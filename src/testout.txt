
> rhythm-server@0.3.0 start /Users/jordan/medialab/dev/rhythm/rhythm-server
> node -r dotenv/config src/

info: configuring authentication...
in create default user
info: [end-meeting-job] Starting to monitor meetings...
Feathers application started on localhost:3000
new connection!
info: registering socketio custom events.
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=testme, meetingUrl=http://localhost:3001/?user=jordan&room=testme, consent=true, consentDate=2017-08-04T15:56:23.691Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjE4MywiZXhwIjoxNTg4MjYyMTgzLCJpc3MiOiJmZWF0aGVycyJ9.C6_2O_drkdf8eVCyXv0IactoM7td76hIj9FB-GYXgzk
info: creating a new participant... NotFound: No record found for id 'jordan'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[testme], createdAt=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), consent=true, name=jordan, _id=jordan, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'testme',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
     consent: true,
     consentDate: '2017-08-04T15:56:23.691Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjE4MywiZXhwIjoxNTg4MjYyMTgzLCJpc3MiOiJmZWF0aGVycyJ9.C6_2O_drkdf8eVCyXv0IactoM7td76hIj9FB-GYXgzk' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
info: no meeting found { participant: 'jordan',
  name: 'jordan',
  participants: [ { participant: 'jordan' } ],
  meeting: 'testme',
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  consent: true,
  consentDate: '2017-08-04T15:56:23.691Z',
  token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjE4MywiZXhwIjoxNTg4MjYyMTgzLCJpc3MiOiJmZWF0aGVycyJ9.C6_2O_drkdf8eVCyXv0IactoM7td76hIj9FB-GYXgzk' } NotFound: No record found for id 'testme'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: starting computing turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:51:23.901Z 2017-08-04T15:56:23.901Z
new meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T15:56:23.855Z,
  meta: {},
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme',
  __v: 0 }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T15:56:23.855Z,
  meta: {},
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 598499273fdd10ba54f6f4df,
  timestamp: 2017-08-04T15:56:23.902Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created turns for meeting: testme
info: auth filter, data: { turns: [],
  to: 2017-08-04T15:56:23.901Z,
  from: 2017-08-04T15:51:23.901Z,
  timestamp: 2017-08-04T15:56:23.909Z,
  transitions: 0,
  meeting: 'testme',
  _id: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:51:28.901Z 2017-08-04T15:56:28.901Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:56:28.903Z,
  from: 2017-08-04T15:51:28.901Z,
  to: 2017-08-04T15:56:28.901Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 9394 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout testme 2017-08-04T15:51:33.902Z 2017-08-04T15:56:33.902Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:56:33.904Z,
  from: 2017-08-04T15:51:33.902Z,
  to: 2017-08-04T15:56:33.902Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:51:38.909Z 2017-08-04T15:56:38.909Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:56:38.962Z,
  from: 2017-08-04T15:51:38.909Z,
  to: 2017-08-04T15:56:38.909Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:51:43.913Z 2017-08-04T15:56:43.913Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:56:43.915Z,
  from: 2017-08-04T15:51:43.913Z,
  to: 2017-08-04T15:56:43.913Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:51:48.919Z 2017-08-04T15:56:48.919Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:56:48.942Z,
  from: 2017-08-04T15:51:48.919Z,
  to: 2017-08-04T15:56:48.919Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=testme, meetingUrl=http://localhost:3001/?user=jordan&room=testme, consent=true, consentDate=2017-08-04T15:56:52.278Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjIxMiwiZXhwIjoxNTg4MjYyMjEyLCJpc3MiOiJmZWF0aGVycyJ9.0_DvbLxW5gGnafBSSSs3pkjh-lmR8iLS_fBHGlt9pVQ
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'testme',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
     consent: true,
     consentDate: '2017-08-04T15:56:52.278Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjIxMiwiZXhwIjoxNTg4MjYyMjEyLCJpc3MiOiJmZWF0aGVycyJ9.0_DvbLxW5gGnafBSSSs3pkjh-lmR8iLS_fBHGlt9pVQ' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T15:56:52.336Z } testme
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 598499443fdd10ba54f6f4e0,
  timestamp: 2017-08-04T15:56:52.360Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:51:53.942Z 2017-08-04T15:56:53.942Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:56:53.944Z,
  from: 2017-08-04T15:51:53.942Z,
  to: 2017-08-04T15:56:53.942Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:51:58.943Z 2017-08-04T15:56:58.943Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:56:58.946Z,
  from: 2017-08-04T15:51:58.943Z,
  to: 2017-08-04T15:56:58.943Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=dog, name=dog, participants=[participant=jordan, participant=dog], meeting=testme, meetingUrl=http://localhost:3001/?user=dog&room=testme, consent=true, consentDate=2017-08-04T15:57:02.652Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjIyMiwiZXhwIjoxNTg4MjYyMjIyLCJpc3MiOiJmZWF0aGVycyJ9.8k1JCzdidd_w5LQmx6M01qsxsJ3N6orRfaef1uZXY9A
info: creating a new participant... NotFound: No record found for id 'dog'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[testme], createdAt=Fri Aug 04 2017 11:57:02 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 11:57:02 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 11:57:02 GMT-0400 (EDT), consent=true, name=dog, _id=dog, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object] ],
     meeting: 'testme',
     meetingUrl: 'http://localhost:3001/?user=dog&room=testme',
     consent: true,
     consentDate: '2017-08-04T15:57:02.652Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjIyMiwiZXhwIjoxNTg4MjYyMjIyLCJpc3MiOiJmZWF0aGVycyJ9.8k1JCzdidd_w5LQmx6M01qsxsJ3N6orRfaef1uZXY9A' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
adding participants to that meeting [ 'jordan', 'dog' ]
info: not adding participant: { participants: [ 'jordan', 'dog' ],
  lastUpdated: 2017-08-04T15:57:02.705Z } testme
updated meeting with participants { participants: [ 'jordan', 'dog' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
info: auth filter, data: { participants: [ 'jordan', 'dog' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog' ],
  _id: 5984994e3fdd10ba54f6f4e1,
  timestamp: 2017-08-04T15:57:02.721Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog' ],
  _id: 5984994e3fdd10ba54f6f4e1,
  timestamp: 2017-08-04T15:57:02.721Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:52:03.951Z 2017-08-04T15:57:03.951Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:03.953Z,
  from: 2017-08-04T15:52:03.951Z,
  to: 2017-08-04T15:57:03.951Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:03.953Z,
  from: 2017-08-04T15:52:03.951Z,
  to: 2017-08-04T15:57:03.951Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:52:08.955Z 2017-08-04T15:57:08.955Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:08.962Z,
  from: 2017-08-04T15:52:08.955Z,
  to: 2017-08-04T15:57:08.955Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:08.962Z,
  from: 2017-08-04T15:52:08.955Z,
  to: 2017-08-04T15:57:08.955Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:52:13.961Z 2017-08-04T15:57:13.961Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:13.964Z,
  from: 2017-08-04T15:52:13.961Z,
  to: 2017-08-04T15:57:13.961Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:13.964Z,
  from: 2017-08-04T15:52:13.961Z,
  to: 2017-08-04T15:57:13.961Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=man, name=man, participants=[participant=jordan, participant=dog, participant=man], meeting=testme, meetingUrl=http://localhost:3001/?user=man&room=testme, consent=true, consentDate=2017-08-04T15:57:15.731Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjIzNSwiZXhwIjoxNTg4MjYyMjM1LCJpc3MiOiJmZWF0aGVycyJ9.FO7LSnxqWA7beEZyndLVadrl-uWwKv_tuJ7SMFbY_Tc
info: creating a new participant... NotFound: No record found for id 'man'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[testme], createdAt=Fri Aug 04 2017 11:57:15 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 11:57:15 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 11:57:15 GMT-0400 (EDT), consent=true, name=man, _id=man, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'man',
     name: 'man',
     participants: [ [Object], [Object], [Object] ],
     meeting: 'testme',
     meetingUrl: 'http://localhost:3001/?user=man&room=testme',
     consent: true,
     consentDate: '2017-08-04T15:57:15.731Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjIzNSwiZXhwIjoxNTg4MjYyMjM1LCJpc3MiOiJmZWF0aGVycyJ9.FO7LSnxqWA7beEZyndLVadrl-uWwKv_tuJ7SMFbY_Tc' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog', 'man' ]
patching meeting { participants: [ 'jordan', 'dog' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
adding participants to that meeting [ 'jordan', 'dog', 'man' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'man' ],
  lastUpdated: 2017-08-04T15:57:15.763Z } testme
updated meeting with participants { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  _id: 5984995b3fdd10ba54f6f4e2,
  timestamp: 2017-08-04T15:57:15.904Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  _id: 5984995b3fdd10ba54f6f4e2,
  timestamp: 2017-08-04T15:57:15.904Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  _id: 5984995b3fdd10ba54f6f4e2,
  timestamp: 2017-08-04T15:57:15.904Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:52:18.966Z 2017-08-04T15:57:18.966Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:18.969Z,
  from: 2017-08-04T15:52:18.966Z,
  to: 2017-08-04T15:57:18.966Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:18.969Z,
  from: 2017-08-04T15:52:18.966Z,
  to: 2017-08-04T15:57:18.966Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:18.969Z,
  from: 2017-08-04T15:52:18.966Z,
  to: 2017-08-04T15:57:18.966Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:52:23.971Z 2017-08-04T15:57:23.971Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:23.973Z,
  from: 2017-08-04T15:52:23.971Z,
  to: 2017-08-04T15:57:23.971Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T15:57:23.973Z,
  from: 2017-08-04T15:52:23.971Z,
  to: 2017-08-04T15:57:23.971Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 1
0
2017-08-04T15:57:24.749Z
2017-08-04T15:57:24.749Z
2017-08-04T15:57:26.083Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 1
0
2017-08-04T15:57:24.776Z
2017-08-04T15:57:24.776Z
2017-08-04T15:57:26.088Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout testme 2017-08-04T15:52:28.976Z 2017-08-04T15:57:28.976Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 598499683fdd10ba54f6f4e6, participant: 'man', turns: 0.5 },
     { _id: 598499683fdd10ba54f6f4e5,
       participant: 'jordan',
       turns: 0.5 } ],
  meeting: 'testme',
  transitions: 1,
  timestamp: 2017-08-04T15:57:28.978Z,
  from: 2017-08-04T15:52:28.976Z,
  to: 2017-08-04T15:57:28.976Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 2
3987
2017-08-04T15:57:24.776Z
2017-08-04T15:57:28.763Z
2017-08-04T15:57:26.088Z
0
2017-08-04T15:57:28.763Z
2017-08-04T15:57:28.763Z
2017-08-04T15:57:29.659Z
info: Tried to insert repeat talking history data! Nuh-Uh
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=man, name=man, participants=[participant=man], meeting=testme, meetingUrl=http://localhost:3001/?user=man&room=testme, consent=true, consentDate=2017-08-04T15:57:31.350Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjI1MSwiZXhwIjoxNTg4MjYyMjUxLCJpc3MiOiJmZWF0aGVycyJ9.gYP778xo5IZnXJTzayoR3lbsGMU-iyGW_q4cVbz6iOg
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'man',
     name: 'man',
     participants: [ [Object] ],
     meeting: 'testme',
     meetingUrl: 'http://localhost:3001/?user=man&room=testme',
     consent: true,
     consentDate: '2017-08-04T15:57:31.350Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjI1MSwiZXhwIjoxNTg4MjYyMjUxLCJpc3MiOiJmZWF0aGVycyJ9.gYP778xo5IZnXJTzayoR3lbsGMU-iyGW_q4cVbz6iOg' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'man' ]
patching meeting { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
adding participants to that meeting [ 'man' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'man' ],
  lastUpdated: 2017-08-04T15:57:31.373Z } testme
updated meeting with participants { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  _id: 5984996b3fdd10ba54f6f4e8,
  timestamp: 2017-08-04T15:57:31.383Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  _id: 5984996b3fdd10ba54f6f4e8,
  timestamp: 2017-08-04T15:57:31.383Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=dog, name=dog, participants=[participant=dog], meeting=testme, meetingUrl=http://localhost:3001/?user=dog&room=testme, consent=true, consentDate=2017-08-04T15:57:32.551Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjI1MiwiZXhwIjoxNTg4MjYyMjUyLCJpc3MiOiJmZWF0aGVycyJ9.taY5xeJpBYGJUsgmwGzMCm-iMZb20DN2O1PkvgY5Hb4
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object] ],
     meeting: 'testme',
     meetingUrl: 'http://localhost:3001/?user=dog&room=testme',
     consent: true,
     consentDate: '2017-08-04T15:57:32.551Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjI1MiwiZXhwIjoxNTg4MjYyMjUyLCJpc3MiOiJmZWF0aGVycyJ9.taY5xeJpBYGJUsgmwGzMCm-iMZb20DN2O1PkvgY5Hb4' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog' ]
patching meeting { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
adding participants to that meeting [ 'dog' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'man' ],
  lastUpdated: 2017-08-04T15:57:32.922Z } testme
updated meeting with participants { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  startTime: 2017-08-04T15:56:23.855Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: true,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  _id: 5984996c3fdd10ba54f6f4e9,
  timestamp: 2017-08-04T15:57:32.935Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  _id: 5984996c3fdd10ba54f6f4e9,
  timestamp: 2017-08-04T15:57:32.935Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'man' ],
  _id: 5984996c3fdd10ba54f6f4e9,
  timestamp: 2017-08-04T15:57:32.935Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, man], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 3608 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout testme 2017-08-04T15:52:33.980Z 2017-08-04T15:57:33.980Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 5984996d3fdd10ba54f6f4eb,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 5984996d3fdd10ba54f6f4ea,
       participant: 'jordan',
       turns: 0.6666666666666666 } ],
  meeting: 'testme',
  transitions: 1,
  timestamp: 2017-08-04T15:57:33.982Z,
  from: 2017-08-04T15:52:33.980Z,
  to: 2017-08-04T15:57:33.980Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984996d3fdd10ba54f6f4eb,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 5984996d3fdd10ba54f6f4ea,
       participant: 'jordan',
       turns: 0.6666666666666666 } ],
  meeting: 'testme',
  transitions: 1,
  timestamp: 2017-08-04T15:57:33.982Z,
  from: 2017-08-04T15:52:33.980Z,
  to: 2017-08-04T15:57:33.980Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984996d3fdd10ba54f6f4eb,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 5984996d3fdd10ba54f6f4ea,
       participant: 'jordan',
       turns: 0.6666666666666666 } ],
  meeting: 'testme',
  transitions: 1,
  timestamp: 2017-08-04T15:57:33.982Z,
  from: 2017-08-04T15:52:33.980Z,
  to: 2017-08-04T15:57:33.980Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:52:38.986Z 2017-08-04T15:57:38.986Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 598499723fdd10ba54f6f4ed,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 598499723fdd10ba54f6f4ec,
       participant: 'jordan',
       turns: 0.6666666666666666 } ],
  meeting: 'testme',
  transitions: 1,
  timestamp: 2017-08-04T15:57:38.989Z,
  from: 2017-08-04T15:52:38.986Z,
  to: 2017-08-04T15:57:38.986Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 598499723fdd10ba54f6f4ed,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 598499723fdd10ba54f6f4ec,
       participant: 'jordan',
       turns: 0.6666666666666666 } ],
  meeting: 'testme',
  transitions: 1,
  timestamp: 2017-08-04T15:57:38.989Z,
  from: 2017-08-04T15:52:38.986Z,
  to: 2017-08-04T15:57:38.986Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 598499723fdd10ba54f6f4ed,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 598499723fdd10ba54f6f4ec,
       participant: 'jordan',
       turns: 0.6666666666666666 } ],
  meeting: 'testme',
  transitions: 1,
  timestamp: 2017-08-04T15:57:38.989Z,
  from: 2017-08-04T15:52:38.986Z,
  to: 2017-08-04T15:57:38.986Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 2
15572
2017-08-04T15:57:24.749Z
2017-08-04T15:57:40.321Z
2017-08-04T15:57:26.083Z
0
2017-08-04T15:57:40.321Z
2017-08-04T15:57:40.321Z
2017-08-04T15:57:40.705Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 1
0
2017-08-04T15:57:40.321Z
2017-08-04T15:57:40.321Z
2017-08-04T15:57:40.747Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 3
15987
2017-08-04T15:57:24.776Z
2017-08-04T15:57:40.763Z
2017-08-04T15:57:26.088Z
12000
2017-08-04T15:57:28.763Z
2017-08-04T15:57:40.763Z
2017-08-04T15:57:29.659Z
0
2017-08-04T15:57:40.763Z
2017-08-04T15:57:40.763Z
2017-08-04T15:57:40.763Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout testme 2017-08-04T15:52:43.992Z 2017-08-04T15:57:43.992Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 598499773fdd10ba54f6f4f3,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 598499773fdd10ba54f6f4f2,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 598499773fdd10ba54f6f4f1,
       participant: 'dog',
       turns: 0.16666666666666666 } ],
  meeting: 'testme',
  transitions: 4,
  timestamp: 2017-08-04T15:57:43.995Z,
  from: 2017-08-04T15:52:43.992Z,
  to: 2017-08-04T15:57:43.992Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 598499773fdd10ba54f6f4f3,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 598499773fdd10ba54f6f4f2,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 598499773fdd10ba54f6f4f1,
       participant: 'dog',
       turns: 0.16666666666666666 } ],
  meeting: 'testme',
  transitions: 4,
  timestamp: 2017-08-04T15:57:43.995Z,
  from: 2017-08-04T15:52:43.992Z,
  to: 2017-08-04T15:57:43.992Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 598499773fdd10ba54f6f4f3,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 598499773fdd10ba54f6f4f2,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 598499773fdd10ba54f6f4f1,
       participant: 'dog',
       turns: 0.16666666666666666 } ],
  meeting: 'testme',
  transitions: 4,
  timestamp: 2017-08-04T15:57:43.995Z,
  from: 2017-08-04T15:52:43.992Z,
  to: 2017-08-04T15:57:43.992Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 4
20958
2017-08-04T15:57:24.776Z
2017-08-04T15:57:45.734Z
2017-08-04T15:57:26.088Z
16971
2017-08-04T15:57:28.763Z
2017-08-04T15:57:45.734Z
2017-08-04T15:57:29.659Z
4971
2017-08-04T15:57:40.763Z
2017-08-04T15:57:45.734Z
2017-08-04T15:57:40.763Z
0
2017-08-04T15:57:45.734Z
2017-08-04T15:57:45.734Z
2017-08-04T15:57:46.338Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 2
5701
2017-08-04T15:57:40.321Z
2017-08-04T15:57:46.022Z
2017-08-04T15:57:40.747Z
0
2017-08-04T15:57:46.022Z
2017-08-04T15:57:46.022Z
2017-08-04T15:57:46.748Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 3
20990
2017-08-04T15:57:24.749Z
2017-08-04T15:57:45.739Z
2017-08-04T15:57:26.083Z
5418
2017-08-04T15:57:40.321Z
2017-08-04T15:57:45.739Z
2017-08-04T15:57:40.705Z
0
2017-08-04T15:57:45.739Z
2017-08-04T15:57:45.739Z
2017-08-04T15:57:46.769Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout testme 2017-08-04T15:52:48.996Z 2017-08-04T15:57:48.996Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 5984997d3fdd10ba54f6f4f9,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 5984997d3fdd10ba54f6f4f8,
       participant: 'jordan',
       turns: 0.4444444444444444 },
     { _id: 5984997d3fdd10ba54f6f4f7,
       participant: 'dog',
       turns: 0.2222222222222222 } ],
  meeting: 'testme',
  transitions: 6,
  timestamp: 2017-08-04T15:57:48.998Z,
  from: 2017-08-04T15:52:48.996Z,
  to: 2017-08-04T15:57:48.996Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984997d3fdd10ba54f6f4f9,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 5984997d3fdd10ba54f6f4f8,
       participant: 'jordan',
       turns: 0.4444444444444444 },
     { _id: 5984997d3fdd10ba54f6f4f7,
       participant: 'dog',
       turns: 0.2222222222222222 } ],
  meeting: 'testme',
  transitions: 6,
  timestamp: 2017-08-04T15:57:48.998Z,
  from: 2017-08-04T15:52:48.996Z,
  to: 2017-08-04T15:57:48.996Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984997d3fdd10ba54f6f4f9,
       participant: 'man',
       turns: 0.3333333333333333 },
     { _id: 5984997d3fdd10ba54f6f4f8,
       participant: 'jordan',
       turns: 0.4444444444444444 },
     { _id: 5984997d3fdd10ba54f6f4f7,
       participant: 'dog',
       turns: 0.2222222222222222 } ],
  meeting: 'testme',
  transitions: 6,
  timestamp: 2017-08-04T15:57:48.998Z,
  from: 2017-08-04T15:52:48.996Z,
  to: 2017-08-04T15:57:48.996Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 5
23311
2017-08-04T15:57:24.776Z
2017-08-04T15:57:48.087Z
2017-08-04T15:57:26.088Z
19324
2017-08-04T15:57:28.763Z
2017-08-04T15:57:48.087Z
2017-08-04T15:57:29.659Z
7324
2017-08-04T15:57:40.763Z
2017-08-04T15:57:48.087Z
2017-08-04T15:57:40.763Z
2353
2017-08-04T15:57:45.734Z
2017-08-04T15:57:48.087Z
2017-08-04T15:57:46.338Z
0
2017-08-04T15:57:48.087Z
2017-08-04T15:57:48.087Z
2017-08-04T15:57:48.854Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 3
7792
2017-08-04T15:57:40.321Z
2017-08-04T15:57:48.113Z
2017-08-04T15:57:40.747Z
2091
2017-08-04T15:57:46.022Z
2017-08-04T15:57:48.113Z
2017-08-04T15:57:46.748Z
0
2017-08-04T15:57:48.113Z
2017-08-04T15:57:48.113Z
2017-08-04T15:57:48.924Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 4
23306
2017-08-04T15:57:24.749Z
2017-08-04T15:57:48.055Z
2017-08-04T15:57:26.083Z
7734
2017-08-04T15:57:40.321Z
2017-08-04T15:57:48.055Z
2017-08-04T15:57:40.705Z
2316
2017-08-04T15:57:45.739Z
2017-08-04T15:57:48.055Z
2017-08-04T15:57:46.769Z
0
2017-08-04T15:57:48.055Z
2017-08-04T15:57:48.055Z
2017-08-04T15:57:48.951Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 5
25396
2017-08-04T15:57:24.749Z
2017-08-04T15:57:50.145Z
2017-08-04T15:57:26.083Z
9824
2017-08-04T15:57:40.321Z
2017-08-04T15:57:50.145Z
2017-08-04T15:57:40.705Z
4406
2017-08-04T15:57:45.739Z
2017-08-04T15:57:50.145Z
2017-08-04T15:57:46.769Z
2090
2017-08-04T15:57:48.055Z
2017-08-04T15:57:50.145Z
2017-08-04T15:57:48.951Z
0
2017-08-04T15:57:50.145Z
2017-08-04T15:57:50.145Z
2017-08-04T15:57:50.275Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 6
25401
2017-08-04T15:57:24.776Z
2017-08-04T15:57:50.177Z
2017-08-04T15:57:26.088Z
21414
2017-08-04T15:57:28.763Z
2017-08-04T15:57:50.177Z
2017-08-04T15:57:29.659Z
9414
2017-08-04T15:57:40.763Z
2017-08-04T15:57:50.177Z
2017-08-04T15:57:40.763Z
4443
2017-08-04T15:57:45.734Z
2017-08-04T15:57:50.177Z
2017-08-04T15:57:46.338Z
2090
2017-08-04T15:57:48.087Z
2017-08-04T15:57:50.177Z
2017-08-04T15:57:48.854Z
0
2017-08-04T15:57:50.177Z
2017-08-04T15:57:50.177Z
2017-08-04T15:57:51.505Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 4
9883
2017-08-04T15:57:40.321Z
2017-08-04T15:57:50.204Z
2017-08-04T15:57:40.747Z
4182
2017-08-04T15:57:46.022Z
2017-08-04T15:57:50.204Z
2017-08-04T15:57:46.748Z
2091
2017-08-04T15:57:48.113Z
2017-08-04T15:57:50.204Z
2017-08-04T15:57:48.924Z
0
2017-08-04T15:57:50.204Z
2017-08-04T15:57:50.204Z
2017-08-04T15:57:52.684Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 7
27540
2017-08-04T15:57:24.776Z
2017-08-04T15:57:52.316Z
2017-08-04T15:57:26.088Z
23553
2017-08-04T15:57:28.763Z
2017-08-04T15:57:52.316Z
2017-08-04T15:57:29.659Z
11553
2017-08-04T15:57:40.763Z
2017-08-04T15:57:52.316Z
2017-08-04T15:57:40.763Z
6582
2017-08-04T15:57:45.734Z
2017-08-04T15:57:52.316Z
2017-08-04T15:57:46.338Z
4229
2017-08-04T15:57:48.087Z
2017-08-04T15:57:52.316Z
2017-08-04T15:57:48.854Z
2139
2017-08-04T15:57:50.177Z
2017-08-04T15:57:52.316Z
2017-08-04T15:57:51.505Z
0
2017-08-04T15:57:52.316Z
2017-08-04T15:57:52.316Z
2017-08-04T15:57:52.742Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 6
26212
2017-08-04T15:57:24.749Z
2017-08-04T15:57:50.961Z
2017-08-04T15:57:26.083Z
10640
2017-08-04T15:57:40.321Z
2017-08-04T15:57:50.961Z
2017-08-04T15:57:40.705Z
5222
2017-08-04T15:57:45.739Z
2017-08-04T15:57:50.961Z
2017-08-04T15:57:46.769Z
2906
2017-08-04T15:57:48.055Z
2017-08-04T15:57:50.961Z
2017-08-04T15:57:48.951Z
816
2017-08-04T15:57:50.145Z
2017-08-04T15:57:50.961Z
2017-08-04T15:57:50.275Z
0
2017-08-04T15:57:50.961Z
2017-08-04T15:57:50.961Z
2017-08-04T15:57:53.180Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout testme 2017-08-04T15:52:53.998Z 2017-08-04T15:57:53.998Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 598499823fdd10ba54f6f504,
       participant: 'man',
       turns: 0.35294117647058826 },
     { _id: 598499823fdd10ba54f6f503,
       participant: 'jordan',
       turns: 0.4117647058823529 },
     { _id: 598499823fdd10ba54f6f502,
       participant: 'dog',
       turns: 0.23529411764705882 } ],
  meeting: 'testme',
  transitions: 13,
  timestamp: 2017-08-04T15:57:54.002Z,
  from: 2017-08-04T15:52:53.998Z,
  to: 2017-08-04T15:57:53.998Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 598499823fdd10ba54f6f504,
       participant: 'man',
       turns: 0.35294117647058826 },
     { _id: 598499823fdd10ba54f6f503,
       participant: 'jordan',
       turns: 0.4117647058823529 },
     { _id: 598499823fdd10ba54f6f502,
       participant: 'dog',
       turns: 0.23529411764705882 } ],
  meeting: 'testme',
  transitions: 13,
  timestamp: 2017-08-04T15:57:54.002Z,
  from: 2017-08-04T15:52:53.998Z,
  to: 2017-08-04T15:57:53.998Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 598499823fdd10ba54f6f504,
       participant: 'man',
       turns: 0.35294117647058826 },
     { _id: 598499823fdd10ba54f6f503,
       participant: 'jordan',
       turns: 0.4117647058823529 },
     { _id: 598499823fdd10ba54f6f502,
       participant: 'dog',
       turns: 0.23529411764705882 } ],
  meeting: 'testme',
  transitions: 13,
  timestamp: 2017-08-04T15:57:54.002Z,
  from: 2017-08-04T15:52:53.998Z,
  to: 2017-08-04T15:57:53.998Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 7
29808
2017-08-04T15:57:24.749Z
2017-08-04T15:57:54.557Z
2017-08-04T15:57:26.083Z
14236
2017-08-04T15:57:40.321Z
2017-08-04T15:57:54.557Z
2017-08-04T15:57:40.705Z
8818
2017-08-04T15:57:45.739Z
2017-08-04T15:57:54.557Z
2017-08-04T15:57:46.769Z
6502
2017-08-04T15:57:48.055Z
2017-08-04T15:57:54.557Z
2017-08-04T15:57:48.951Z
4412
2017-08-04T15:57:50.145Z
2017-08-04T15:57:54.557Z
2017-08-04T15:57:50.275Z
3596
2017-08-04T15:57:50.961Z
2017-08-04T15:57:54.557Z
2017-08-04T15:57:53.180Z
0
2017-08-04T15:57:54.557Z
2017-08-04T15:57:54.557Z
2017-08-04T15:57:54.769Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 8
29726
2017-08-04T15:57:24.776Z
2017-08-04T15:57:54.502Z
2017-08-04T15:57:26.088Z
25739
2017-08-04T15:57:28.763Z
2017-08-04T15:57:54.502Z
2017-08-04T15:57:29.659Z
13739
2017-08-04T15:57:40.763Z
2017-08-04T15:57:54.502Z
2017-08-04T15:57:40.763Z
8768
2017-08-04T15:57:45.734Z
2017-08-04T15:57:54.502Z
2017-08-04T15:57:46.338Z
6415
2017-08-04T15:57:48.087Z
2017-08-04T15:57:54.502Z
2017-08-04T15:57:48.854Z
4325
2017-08-04T15:57:50.177Z
2017-08-04T15:57:54.502Z
2017-08-04T15:57:51.505Z
2186
2017-08-04T15:57:52.316Z
2017-08-04T15:57:54.502Z
2017-08-04T15:57:52.742Z
0
2017-08-04T15:57:54.502Z
2017-08-04T15:57:54.502Z
2017-08-04T15:57:54.807Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 5
14210
2017-08-04T15:57:40.321Z
2017-08-04T15:57:54.531Z
2017-08-04T15:57:40.747Z
8509
2017-08-04T15:57:46.022Z
2017-08-04T15:57:54.531Z
2017-08-04T15:57:46.748Z
6418
2017-08-04T15:57:48.113Z
2017-08-04T15:57:54.531Z
2017-08-04T15:57:48.924Z
4327
2017-08-04T15:57:50.204Z
2017-08-04T15:57:54.531Z
2017-08-04T15:57:52.684Z
0
2017-08-04T15:57:54.531Z
2017-08-04T15:57:54.531Z
2017-08-04T15:57:54.881Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 6
16224
2017-08-04T15:57:40.321Z
2017-08-04T15:57:56.545Z
2017-08-04T15:57:40.747Z
10523
2017-08-04T15:57:46.022Z
2017-08-04T15:57:56.545Z
2017-08-04T15:57:46.748Z
8432
2017-08-04T15:57:48.113Z
2017-08-04T15:57:56.545Z
2017-08-04T15:57:48.924Z
6341
2017-08-04T15:57:50.204Z
2017-08-04T15:57:56.545Z
2017-08-04T15:57:52.684Z
2014
2017-08-04T15:57:54.531Z
2017-08-04T15:57:56.545Z
2017-08-04T15:57:54.881Z
0
2017-08-04T15:57:56.545Z
2017-08-04T15:57:56.545Z
2017-08-04T15:57:57.612Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 8
31828
2017-08-04T15:57:24.749Z
2017-08-04T15:57:56.577Z
2017-08-04T15:57:26.083Z
16256
2017-08-04T15:57:40.321Z
2017-08-04T15:57:56.577Z
2017-08-04T15:57:40.705Z
10838
2017-08-04T15:57:45.739Z
2017-08-04T15:57:56.577Z
2017-08-04T15:57:46.769Z
8522
2017-08-04T15:57:48.055Z
2017-08-04T15:57:56.577Z
2017-08-04T15:57:48.951Z
6432
2017-08-04T15:57:50.145Z
2017-08-04T15:57:56.577Z
2017-08-04T15:57:50.275Z
5616
2017-08-04T15:57:50.961Z
2017-08-04T15:57:56.577Z
2017-08-04T15:57:53.180Z
2020
2017-08-04T15:57:54.557Z
2017-08-04T15:57:56.577Z
2017-08-04T15:57:54.769Z
0
2017-08-04T15:57:56.577Z
2017-08-04T15:57:56.577Z
2017-08-04T15:57:57.644Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 9
31753
2017-08-04T15:57:24.776Z
2017-08-04T15:57:56.529Z
2017-08-04T15:57:26.088Z
27766
2017-08-04T15:57:28.763Z
2017-08-04T15:57:56.529Z
2017-08-04T15:57:29.659Z
15766
2017-08-04T15:57:40.763Z
2017-08-04T15:57:56.529Z
2017-08-04T15:57:40.763Z
10795
2017-08-04T15:57:45.734Z
2017-08-04T15:57:56.529Z
2017-08-04T15:57:46.338Z
8442
2017-08-04T15:57:48.087Z
2017-08-04T15:57:56.529Z
2017-08-04T15:57:48.854Z
6352
2017-08-04T15:57:50.177Z
2017-08-04T15:57:56.529Z
2017-08-04T15:57:51.505Z
4213
2017-08-04T15:57:52.316Z
2017-08-04T15:57:56.529Z
2017-08-04T15:57:52.742Z
2027
2017-08-04T15:57:54.502Z
2017-08-04T15:57:56.529Z
2017-08-04T15:57:54.807Z
0
2017-08-04T15:57:56.529Z
2017-08-04T15:57:56.529Z
2017-08-04T15:57:57.639Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout testme 2017-08-04T15:52:59.002Z 2017-08-04T15:57:59.002Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 598499873fdd10ba54f6f50d,
       participant: 'man',
       turns: 0.34782608695652173 },
     { _id: 598499873fdd10ba54f6f50c,
       participant: 'jordan',
       turns: 0.391304347826087 },
     { _id: 598499873fdd10ba54f6f50b,
       participant: 'dog',
       turns: 0.2608695652173913 } ],
  meeting: 'testme',
  transitions: 17,
  timestamp: 2017-08-04T15:57:59.005Z,
  from: 2017-08-04T15:52:59.002Z,
  to: 2017-08-04T15:57:59.002Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 598499873fdd10ba54f6f50d,
       participant: 'man',
       turns: 0.34782608695652173 },
     { _id: 598499873fdd10ba54f6f50c,
       participant: 'jordan',
       turns: 0.391304347826087 },
     { _id: 598499873fdd10ba54f6f50b,
       participant: 'dog',
       turns: 0.2608695652173913 } ],
  meeting: 'testme',
  transitions: 17,
  timestamp: 2017-08-04T15:57:59.005Z,
  from: 2017-08-04T15:52:59.002Z,
  to: 2017-08-04T15:57:59.002Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 598499873fdd10ba54f6f50d,
       participant: 'man',
       turns: 0.34782608695652173 },
     { _id: 598499873fdd10ba54f6f50c,
       participant: 'jordan',
       turns: 0.391304347826087 },
     { _id: 598499873fdd10ba54f6f50b,
       participant: 'dog',
       turns: 0.2608695652173913 } ],
  meeting: 'testme',
  transitions: 17,
  timestamp: 2017-08-04T15:57:59.005Z,
  from: 2017-08-04T15:52:59.002Z,
  to: 2017-08-04T15:57:59.002Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 9
33664
2017-08-04T15:57:24.749Z
2017-08-04T15:57:58.413Z
2017-08-04T15:57:26.083Z
18092
2017-08-04T15:57:40.321Z
2017-08-04T15:57:58.413Z
2017-08-04T15:57:40.705Z
12674
2017-08-04T15:57:45.739Z
2017-08-04T15:57:58.413Z
2017-08-04T15:57:46.769Z
10358
2017-08-04T15:57:48.055Z
2017-08-04T15:57:58.413Z
2017-08-04T15:57:48.951Z
8268
2017-08-04T15:57:50.145Z
2017-08-04T15:57:58.413Z
2017-08-04T15:57:50.275Z
7452
2017-08-04T15:57:50.961Z
2017-08-04T15:57:58.413Z
2017-08-04T15:57:53.180Z
3856
2017-08-04T15:57:54.557Z
2017-08-04T15:57:58.413Z
2017-08-04T15:57:54.769Z
1836
2017-08-04T15:57:56.577Z
2017-08-04T15:57:58.413Z
2017-08-04T15:57:57.644Z
0
2017-08-04T15:57:58.413Z
2017-08-04T15:57:58.413Z
2017-08-04T15:58:00.697Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 10
37009
2017-08-04T15:57:24.749Z
2017-08-04T15:58:01.758Z
2017-08-04T15:57:26.083Z
21437
2017-08-04T15:57:40.321Z
2017-08-04T15:58:01.758Z
2017-08-04T15:57:40.705Z
16019
2017-08-04T15:57:45.739Z
2017-08-04T15:58:01.758Z
2017-08-04T15:57:46.769Z
13703
2017-08-04T15:57:48.055Z
2017-08-04T15:58:01.758Z
2017-08-04T15:57:48.951Z
11613
2017-08-04T15:57:50.145Z
2017-08-04T15:58:01.758Z
2017-08-04T15:57:50.275Z
10797
2017-08-04T15:57:50.961Z
2017-08-04T15:58:01.758Z
2017-08-04T15:57:53.180Z
7201
2017-08-04T15:57:54.557Z
2017-08-04T15:58:01.758Z
2017-08-04T15:57:54.769Z
5181
2017-08-04T15:57:56.577Z
2017-08-04T15:58:01.758Z
2017-08-04T15:57:57.644Z
3345
2017-08-04T15:57:58.413Z
2017-08-04T15:58:01.758Z
2017-08-04T15:58:00.697Z
0
2017-08-04T15:58:01.758Z
2017-08-04T15:58:01.758Z
2017-08-04T15:58:01.801Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout testme 2017-08-04T15:53:04.005Z 2017-08-04T15:58:04.005Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:09.008Z 2017-08-04T15:58:09.008Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:14.015Z 2017-08-04T15:58:14.015Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:19.021Z 2017-08-04T15:58:19.021Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:24.025Z 2017-08-04T15:58:24.025Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:29.027Z 2017-08-04T15:58:29.027Z
info: updated turns for meeting: testme
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, man], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 31456 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout testme 2017-08-04T15:53:34.030Z 2017-08-04T15:58:34.030Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:39.031Z 2017-08-04T15:58:39.031Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:44.031Z 2017-08-04T15:58:44.031Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:49.036Z 2017-08-04T15:58:49.036Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:54.036Z 2017-08-04T15:58:54.036Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:53:59.038Z 2017-08-04T15:58:59.038Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:04.039Z 2017-08-04T15:59:04.039Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:09.040Z 2017-08-04T15:59:09.040Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:14.040Z 2017-08-04T15:59:14.040Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:19.045Z 2017-08-04T15:59:19.045Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:24.048Z 2017-08-04T15:59:24.048Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:29.052Z 2017-08-04T15:59:29.052Z
info: updated turns for meeting: testme
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, man], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 91462 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout testme 2017-08-04T15:54:34.059Z 2017-08-04T15:59:34.059Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:39.062Z 2017-08-04T15:59:39.062Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:44.063Z 2017-08-04T15:59:44.063Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:49.065Z 2017-08-04T15:59:49.065Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:54.067Z 2017-08-04T15:59:54.067Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:54:59.069Z 2017-08-04T15:59:59.069Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:04.071Z 2017-08-04T16:00:04.071Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:09.072Z 2017-08-04T16:00:09.072Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:14.075Z 2017-08-04T16:00:14.075Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:19.079Z 2017-08-04T16:00:19.079Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:24.084Z 2017-08-04T16:00:24.084Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:29.089Z 2017-08-04T16:00:29.089Z
info: updated turns for meeting: testme
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, man], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 151469 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout testme 2017-08-04T15:55:34.091Z 2017-08-04T16:00:34.091Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:39.093Z 2017-08-04T16:00:39.093Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:44.096Z 2017-08-04T16:00:44.096Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:49.100Z 2017-08-04T16:00:49.100Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:54.106Z 2017-08-04T16:00:54.106Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:55:59.111Z 2017-08-04T16:00:59.111Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:56:04.113Z 2017-08-04T16:01:04.113Z
info: updated turns for meeting: testme
info: getting turn data for hangout testme 2017-08-04T15:56:09.117Z 2017-08-04T16:01:09.117Z
info: updated turns for meeting: testme
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:01:11.845Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjQ3MSwiZXhwIjoxNTg4MjYyNDcxLCJpc3MiOiJmZWF0aGVycyJ9.XpjXtSayaAPkqK-lvt8q3TjEoW7xVrkUWrYBDksjF3c
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:01:11.845Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjQ3MSwiZXhwIjoxNTg4MjYyNDcxLCJpc3MiOiJmZWF0aGVycyJ9.XpjXtSayaAPkqK-lvt8q3TjEoW7xVrkUWrYBDksjF3c' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
info: no meeting found { participant: 'jordan',
  name: 'jordan',
  participants: [ { participant: 'jordan' } ],
  meeting: 'no',
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  consent: true,
  consentDate: '2017-08-04T16:01:11.845Z',
  token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjQ3MSwiZXhwIjoxNTg4MjYyNDcxLCJpc3MiOiJmZWF0aGVycyJ9.XpjXtSayaAPkqK-lvt8q3TjEoW7xVrkUWrYBDksjF3c' } NotFound: No record found for id 'no'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-04T15:56:11.896Z 2017-08-04T16:01:11.896Z
new meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  meta: {},
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no',
  __v: 0 }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  meta: {},
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 59849a473fdd10ba54f6f583,
  timestamp: 2017-08-04T16:01:11.898Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created turns for meeting: no
info: auth filter, data: { turns: [],
  to: 2017-08-04T16:01:11.896Z,
  from: 2017-08-04T15:56:11.896Z,
  timestamp: 2017-08-04T16:01:11.938Z,
  transitions: 0,
  meeting: 'no',
  _id: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:56:14.120Z 2017-08-04T16:01:14.120Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a4a3fdd10ba54f6f586, participant: 'man', turns: 0.4 },
     { _id: 59849a4a3fdd10ba54f6f585,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a4a3fdd10ba54f6f584,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:14.124Z,
  from: 2017-08-04T15:56:14.120Z,
  to: 2017-08-04T16:01:14.120Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:56:16.903Z 2017-08-04T16:01:16.903Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:16.905Z,
  from: 2017-08-04T15:56:16.903Z,
  to: 2017-08-04T16:01:16.903Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:56:19.126Z 2017-08-04T16:01:19.126Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a4f3fdd10ba54f6f589, participant: 'man', turns: 0.4 },
     { _id: 59849a4f3fdd10ba54f6f588,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a4f3fdd10ba54f6f587,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:19.130Z,
  from: 2017-08-04T15:56:19.126Z,
  to: 2017-08-04T16:01:19.126Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:56:21.907Z 2017-08-04T16:01:21.907Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:21.910Z,
  from: 2017-08-04T15:56:21.907Z,
  to: 2017-08-04T16:01:21.907Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:56:24.131Z 2017-08-04T16:01:24.131Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a543fdd10ba54f6f58c, participant: 'man', turns: 0.4 },
     { _id: 59849a543fdd10ba54f6f58b,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a543fdd10ba54f6f58a,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:24.136Z,
  from: 2017-08-04T15:56:24.131Z,
  to: 2017-08-04T16:01:24.131Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:56:26.910Z 2017-08-04T16:01:26.910Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:26.913Z,
  from: 2017-08-04T15:56:26.910Z,
  to: 2017-08-04T16:01:26.910Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:01:27.919Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjQ4NywiZXhwIjoxNTg4MjYyNDg3LCJpc3MiOiJmZWF0aGVycyJ9.qnvbmMdeQxDgx6xpbFM-gNuFv2IiK-Ls20q-HShfOdY
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:01:27.919Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjQ4NywiZXhwIjoxNTg4MjYyNDg3LCJpc3MiOiJmZWF0aGVycyJ9.qnvbmMdeQxDgx6xpbFM-gNuFv2IiK-Ls20q-HShfOdY' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:01:27.948Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 59849a573fdd10ba54f6f58d,
  timestamp: 2017-08-04T16:01:27.954Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 59849a573fdd10ba54f6f58d,
  timestamp: 2017-08-04T16:01:27.954Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:56:29.137Z 2017-08-04T16:01:29.137Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a593fdd10ba54f6f590, participant: 'man', turns: 0.4 },
     { _id: 59849a593fdd10ba54f6f58f,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a593fdd10ba54f6f58e,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:29.140Z,
  from: 2017-08-04T15:56:29.137Z,
  to: 2017-08-04T16:01:29.137Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849a593fdd10ba54f6f590, participant: 'man', turns: 0.4 },
     { _id: 59849a593fdd10ba54f6f58f,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a593fdd10ba54f6f58e,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:29.140Z,
  from: 2017-08-04T15:56:29.137Z,
  to: 2017-08-04T16:01:29.137Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:56:31.916Z 2017-08-04T16:01:31.916Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:31.918Z,
  from: 2017-08-04T15:56:31.916Z,
  to: 2017-08-04T16:01:31.916Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:31.918Z,
  from: 2017-08-04T15:56:31.916Z,
  to: 2017-08-04T16:01:31.916Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, man], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 211476 300000
info: should end?: false
info: should end?: 21389 300000
info: should end?: false
info (maybe) ended meetings: [ false, false ]
info: getting turn data for hangout testme 2017-08-04T15:56:34.141Z 2017-08-04T16:01:34.141Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a5e3fdd10ba54f6f593, participant: 'man', turns: 0.4 },
     { _id: 59849a5e3fdd10ba54f6f592,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a5e3fdd10ba54f6f591,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:34.153Z,
  from: 2017-08-04T15:56:34.141Z,
  to: 2017-08-04T16:01:34.141Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849a5e3fdd10ba54f6f593, participant: 'man', turns: 0.4 },
     { _id: 59849a5e3fdd10ba54f6f592,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a5e3fdd10ba54f6f591,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:34.153Z,
  from: 2017-08-04T15:56:34.141Z,
  to: 2017-08-04T16:01:34.141Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:56:36.919Z 2017-08-04T16:01:36.919Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:36.925Z,
  from: 2017-08-04T15:56:36.919Z,
  to: 2017-08-04T16:01:36.919Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:36.925Z,
  from: 2017-08-04T15:56:36.919Z,
  to: 2017-08-04T16:01:36.919Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:56:39.146Z 2017-08-04T16:01:39.146Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a633fdd10ba54f6f596, participant: 'man', turns: 0.4 },
     { _id: 59849a633fdd10ba54f6f595,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a633fdd10ba54f6f594,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:39.151Z,
  from: 2017-08-04T15:56:39.146Z,
  to: 2017-08-04T16:01:39.146Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849a633fdd10ba54f6f596, participant: 'man', turns: 0.4 },
     { _id: 59849a633fdd10ba54f6f595,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a633fdd10ba54f6f594,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:39.151Z,
  from: 2017-08-04T15:56:39.146Z,
  to: 2017-08-04T16:01:39.146Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:56:41.922Z 2017-08-04T16:01:41.922Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:41.924Z,
  from: 2017-08-04T15:56:41.922Z,
  to: 2017-08-04T16:01:41.922Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:41.924Z,
  from: 2017-08-04T15:56:41.922Z,
  to: 2017-08-04T16:01:41.922Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:56:44.146Z 2017-08-04T16:01:44.146Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a683fdd10ba54f6f599, participant: 'man', turns: 0.4 },
     { _id: 59849a683fdd10ba54f6f598,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a683fdd10ba54f6f597,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:44.152Z,
  from: 2017-08-04T15:56:44.146Z,
  to: 2017-08-04T16:01:44.146Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849a683fdd10ba54f6f599, participant: 'man', turns: 0.4 },
     { _id: 59849a683fdd10ba54f6f598,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a683fdd10ba54f6f597,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:44.152Z,
  from: 2017-08-04T15:56:44.146Z,
  to: 2017-08-04T16:01:44.146Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:56:46.923Z 2017-08-04T16:01:46.923Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:46.924Z,
  from: 2017-08-04T15:56:46.923Z,
  to: 2017-08-04T16:01:46.923Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:56:49.150Z 2017-08-04T16:01:49.150Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a6d3fdd10ba54f6f59c, participant: 'man', turns: 0.4 },
     { _id: 59849a6d3fdd10ba54f6f59b,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a6d3fdd10ba54f6f59a,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:49.154Z,
  from: 2017-08-04T15:56:49.150Z,
  to: 2017-08-04T16:01:49.150Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:56:51.926Z 2017-08-04T16:01:51.926Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:51.928Z,
  from: 2017-08-04T15:56:51.926Z,
  to: 2017-08-04T16:01:51.926Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:56:54.153Z 2017-08-04T16:01:54.153Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a723fdd10ba54f6f59f, participant: 'man', turns: 0.4 },
     { _id: 59849a723fdd10ba54f6f59e,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a723fdd10ba54f6f59d,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:54.157Z,
  from: 2017-08-04T15:56:54.153Z,
  to: 2017-08-04T16:01:54.153Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:56:56.930Z 2017-08-04T16:01:56.930Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:01:56.932Z,
  from: 2017-08-04T15:56:56.930Z,
  to: 2017-08-04T16:01:56.930Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:56:59.156Z 2017-08-04T16:01:59.156Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a773fdd10ba54f6f5a2, participant: 'man', turns: 0.4 },
     { _id: 59849a773fdd10ba54f6f5a1,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a773fdd10ba54f6f5a0,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:01:59.159Z,
  from: 2017-08-04T15:56:59.156Z,
  to: 2017-08-04T16:01:59.156Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:01.934Z 2017-08-04T16:02:01.934Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:01.935Z,
  from: 2017-08-04T15:57:01.934Z,
  to: 2017-08-04T16:02:01.934Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:04.161Z 2017-08-04T16:02:04.161Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a7c3fdd10ba54f6f5a5, participant: 'man', turns: 0.4 },
     { _id: 59849a7c3fdd10ba54f6f5a4,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a7c3fdd10ba54f6f5a3,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:02:04.166Z,
  from: 2017-08-04T15:57:04.161Z,
  to: 2017-08-04T16:02:04.161Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:06.937Z 2017-08-04T16:02:06.937Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:06.939Z,
  from: 2017-08-04T15:57:06.937Z,
  to: 2017-08-04T16:02:06.937Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:09.167Z 2017-08-04T16:02:09.167Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a813fdd10ba54f6f5a8, participant: 'man', turns: 0.4 },
     { _id: 59849a813fdd10ba54f6f5a7,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a813fdd10ba54f6f5a6,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:02:09.170Z,
  from: 2017-08-04T15:57:09.167Z,
  to: 2017-08-04T16:02:09.167Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:11.940Z 2017-08-04T16:02:11.940Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:11.947Z,
  from: 2017-08-04T15:57:11.940Z,
  to: 2017-08-04T16:02:11.940Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:14.170Z 2017-08-04T16:02:14.170Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a863fdd10ba54f6f5ab, participant: 'man', turns: 0.4 },
     { _id: 59849a863fdd10ba54f6f5aa,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a863fdd10ba54f6f5a9,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:02:14.174Z,
  from: 2017-08-04T15:57:14.170Z,
  to: 2017-08-04T16:02:14.170Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:16.949Z 2017-08-04T16:02:16.949Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:16.952Z,
  from: 2017-08-04T15:57:16.949Z,
  to: 2017-08-04T16:02:16.949Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:19.177Z 2017-08-04T16:02:19.177Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a8b3fdd10ba54f6f5ae, participant: 'man', turns: 0.4 },
     { _id: 59849a8b3fdd10ba54f6f5ad,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a8b3fdd10ba54f6f5ac,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:02:19.197Z,
  from: 2017-08-04T15:57:19.177Z,
  to: 2017-08-04T16:02:19.177Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:21.953Z 2017-08-04T16:02:21.953Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:21.955Z,
  from: 2017-08-04T15:57:21.953Z,
  to: 2017-08-04T16:02:21.953Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:24.183Z 2017-08-04T16:02:24.183Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a903fdd10ba54f6f5b1, participant: 'man', turns: 0.4 },
     { _id: 59849a903fdd10ba54f6f5b0,
       participant: 'jordan',
       turns: 0.36 },
     { _id: 59849a903fdd10ba54f6f5af,
       participant: 'dog',
       turns: 0.24 } ],
  meeting: 'testme',
  transitions: 18,
  timestamp: 2017-08-04T16:02:24.189Z,
  from: 2017-08-04T15:57:24.183Z,
  to: 2017-08-04T16:02:24.183Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:26.957Z 2017-08-04T16:02:26.957Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:26.959Z,
  from: 2017-08-04T15:57:26.957Z,
  to: 2017-08-04T16:02:26.957Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:29.191Z 2017-08-04T16:02:29.191Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a953fdd10ba54f6f5b4,
       participant: 'man',
       turns: 0.4090909090909091 },
     { _id: 59849a953fdd10ba54f6f5b3,
       participant: 'dog',
       turns: 0.2727272727272727 },
     { _id: 59849a953fdd10ba54f6f5b2,
       participant: 'jordan',
       turns: 0.3181818181818182 } ],
  meeting: 'testme',
  transitions: 16,
  timestamp: 2017-08-04T16:02:29.241Z,
  from: 2017-08-04T15:57:29.191Z,
  to: 2017-08-04T16:02:29.191Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:31.958Z 2017-08-04T16:02:31.958Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:31.959Z,
  from: 2017-08-04T15:57:31.958Z,
  to: 2017-08-04T16:02:31.958Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, man], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 271477 300000
info: should end?: false
info: should end?: 81389 300000
info: should end?: false
info (maybe) ended meetings: [ false, false ]
info: getting turn data for hangout testme 2017-08-04T15:57:34.194Z 2017-08-04T16:02:34.194Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a9a3fdd10ba54f6f5b7,
       participant: 'man',
       turns: 0.4090909090909091 },
     { _id: 59849a9a3fdd10ba54f6f5b6,
       participant: 'dog',
       turns: 0.2727272727272727 },
     { _id: 59849a9a3fdd10ba54f6f5b5,
       participant: 'jordan',
       turns: 0.3181818181818182 } ],
  meeting: 'testme',
  transitions: 16,
  timestamp: 2017-08-04T16:02:34.198Z,
  from: 2017-08-04T15:57:34.194Z,
  to: 2017-08-04T16:02:34.194Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:36.961Z 2017-08-04T16:02:36.961Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:36.991Z,
  from: 2017-08-04T15:57:36.961Z,
  to: 2017-08-04T16:02:36.961Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:39.199Z 2017-08-04T16:02:39.199Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849a9f3fdd10ba54f6f5ba,
       participant: 'man',
       turns: 0.4090909090909091 },
     { _id: 59849a9f3fdd10ba54f6f5b9,
       participant: 'dog',
       turns: 0.2727272727272727 },
     { _id: 59849a9f3fdd10ba54f6f5b8,
       participant: 'jordan',
       turns: 0.3181818181818182 } ],
  meeting: 'testme',
  transitions: 16,
  timestamp: 2017-08-04T16:02:39.203Z,
  from: 2017-08-04T15:57:39.199Z,
  to: 2017-08-04T16:02:39.199Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:41.965Z 2017-08-04T16:02:41.965Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:41.967Z,
  from: 2017-08-04T15:57:41.965Z,
  to: 2017-08-04T16:02:41.965Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:44.203Z 2017-08-04T16:02:44.203Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849aa43fdd10ba54f6f5bd,
       participant: 'jordan',
       turns: 0.3157894736842105 },
     { _id: 59849aa43fdd10ba54f6f5bc,
       participant: 'dog',
       turns: 0.2631578947368421 },
     { _id: 59849aa43fdd10ba54f6f5bb,
       participant: 'man',
       turns: 0.42105263157894735 } ],
  meeting: 'testme',
  transitions: 14,
  timestamp: 2017-08-04T16:02:44.206Z,
  from: 2017-08-04T15:57:44.203Z,
  to: 2017-08-04T16:02:44.203Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:46.967Z 2017-08-04T16:02:46.967Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:46.970Z,
  from: 2017-08-04T15:57:46.967Z,
  to: 2017-08-04T16:02:46.967Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:49.208Z 2017-08-04T16:02:49.208Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849aa93fdd10ba54f6f5c0,
       participant: 'man',
       turns: 0.46153846153846156 },
     { _id: 59849aa93fdd10ba54f6f5bf,
       participant: 'jordan',
       turns: 0.3076923076923077 },
     { _id: 59849aa93fdd10ba54f6f5be,
       participant: 'dog',
       turns: 0.23076923076923078 } ],
  meeting: 'testme',
  transitions: 9,
  timestamp: 2017-08-04T16:02:49.211Z,
  from: 2017-08-04T15:57:49.208Z,
  to: 2017-08-04T16:02:49.208Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:57:51.972Z 2017-08-04T16:02:51.972Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:51.973Z,
  from: 2017-08-04T15:57:51.972Z,
  to: 2017-08-04T16:02:51.972Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:54.211Z 2017-08-04T16:02:54.211Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: 
   [ { _id: 59849aae3fdd10ba54f6f5c3, participant: 'man', turns: 0.5 },
     { _id: 59849aae3fdd10ba54f6f5c2,
       participant: 'jordan',
       turns: 0.25 },
     { _id: 59849aae3fdd10ba54f6f5c1,
       participant: 'dog',
       turns: 0.25 } ],
  meeting: 'testme',
  transitions: 5,
  timestamp: 2017-08-04T16:02:54.214Z,
  from: 2017-08-04T15:57:54.211Z,
  to: 2017-08-04T16:02:54.211Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 1
0
2017-08-04T16:02:53.992Z
2017-08-04T16:02:53.992Z
2017-08-04T16:02:55.016Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T15:57:56.976Z 2017-08-04T16:02:56.976Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849ab03fdd10ba54f6f5c5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:02:56.979Z,
  from: 2017-08-04T15:57:56.976Z,
  to: 2017-08-04T16:02:56.976Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:57:59.214Z 2017-08-04T16:02:59.214Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [ { _id: 59849ab33fdd10ba54f6f5c6, participant: 'man', turns: 1 } ],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T16:02:59.216Z,
  from: 2017-08-04T15:57:59.214Z,
  to: 2017-08-04T16:02:59.214Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:01.981Z 2017-08-04T16:03:01.981Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849ab53fdd10ba54f6f5c7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:01.985Z,
  from: 2017-08-04T15:58:01.981Z,
  to: 2017-08-04T16:03:01.981Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:58:04.219Z 2017-08-04T16:03:04.219Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T16:03:04.220Z,
  from: 2017-08-04T15:58:04.219Z,
  to: 2017-08-04T16:03:04.219Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:06.983Z 2017-08-04T16:03:06.983Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849aba3fdd10ba54f6f5c8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:06.985Z,
  from: 2017-08-04T15:58:06.983Z,
  to: 2017-08-04T16:03:06.983Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:58:09.223Z 2017-08-04T16:03:09.223Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T16:03:09.224Z,
  from: 2017-08-04T15:58:09.223Z,
  to: 2017-08-04T16:03:09.223Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:11.987Z 2017-08-04T16:03:11.987Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849abf3fdd10ba54f6f5c9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:11.989Z,
  from: 2017-08-04T15:58:11.987Z,
  to: 2017-08-04T16:03:11.987Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:58:14.228Z 2017-08-04T16:03:14.228Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T16:03:14.229Z,
  from: 2017-08-04T15:58:14.228Z,
  to: 2017-08-04T16:03:14.228Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:16.988Z 2017-08-04T16:03:16.988Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849ac43fdd10ba54f6f5ca,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:16.990Z,
  from: 2017-08-04T15:58:16.988Z,
  to: 2017-08-04T16:03:16.988Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:58:19.232Z 2017-08-04T16:03:19.232Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T16:03:19.233Z,
  from: 2017-08-04T15:58:19.232Z,
  to: 2017-08-04T16:03:19.232Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:21.993Z 2017-08-04T16:03:21.993Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849ac93fdd10ba54f6f5cb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:21.996Z,
  from: 2017-08-04T15:58:21.993Z,
  to: 2017-08-04T16:03:21.993Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:58:24.236Z 2017-08-04T16:03:24.236Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T16:03:24.237Z,
  from: 2017-08-04T15:58:24.236Z,
  to: 2017-08-04T16:03:24.236Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:26.998Z 2017-08-04T16:03:26.998Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849acf3fdd10ba54f6f5cc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:27.000Z,
  from: 2017-08-04T15:58:26.998Z,
  to: 2017-08-04T16:03:26.998Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout testme 2017-08-04T15:58:29.241Z 2017-08-04T16:03:29.242Z
info: updated turns for meeting: testme
info: auth filter, data: { turns: [],
  meeting: 'testme',
  transitions: 0,
  timestamp: 2017-08-04T16:03:29.243Z,
  from: 2017-08-04T15:58:29.241Z,
  to: 2017-08-04T16:03:29.242Z,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:31.999Z 2017-08-04T16:03:31.999Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849ad43fdd10ba54f6f5cd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:32.001Z,
  from: 2017-08-04T15:58:31.999Z,
  to: 2017-08-04T16:03:31.999Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, man], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 331479 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, man], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 38266 300000
info: should end?: false
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-04T16:03:33.281Z,
  endTime: 2017-08-04T16:03:33.284Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, man], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=true, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: testme
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 11:56:23 GMT-0400 (EDT), endTime=Fri Aug 04 2017 12:03:33 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=testme, active=false, _id=testme, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T15:56:23.855Z,
  endTime: 2017-08-04T16:03:33.284Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=testme',
  active: false,
  _id: 'testme' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info (maybe) ended meetings: [ true, false ]
info: created participantEvent!
info: auth filter, data: { participants: [],
  _id: 59849ad53fdd10ba54f6f5cf,
  timestamp: 2017-08-04T16:03:33.335Z,
  meeting: 'testme',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: getting turn data for hangout no 2017-08-04T15:58:37.000Z 2017-08-04T16:03:37.000Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849ad93fdd10ba54f6f5d0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:37.003Z,
  from: 2017-08-04T15:58:37.000Z,
  to: 2017-08-04T16:03:37.000Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:42.005Z 2017-08-04T16:03:42.005Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849ade3fdd10ba54f6f5d1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:42.007Z,
  from: 2017-08-04T15:58:42.005Z,
  to: 2017-08-04T16:03:42.005Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:47.006Z 2017-08-04T16:03:47.006Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849ae33fdd10ba54f6f5d2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:47.009Z,
  from: 2017-08-04T15:58:47.006Z,
  to: 2017-08-04T16:03:47.006Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:52.010Z 2017-08-04T16:03:52.010Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849ae83fdd10ba54f6f5d3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:52.012Z,
  from: 2017-08-04T15:58:52.010Z,
  to: 2017-08-04T16:03:52.010Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:58:57.013Z 2017-08-04T16:03:57.013Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849aed3fdd10ba54f6f5d4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:03:57.016Z,
  from: 2017-08-04T15:58:57.013Z,
  to: 2017-08-04T16:03:57.013Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:59:02.018Z 2017-08-04T16:04:02.018Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849af23fdd10ba54f6f5d5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:04:02.020Z,
  from: 2017-08-04T15:59:02.018Z,
  to: 2017-08-04T16:04:02.018Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:04:03.900Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjY0MywiZXhwIjoxNTg4MjYyNjQzLCJpc3MiOiJmZWF0aGVycyJ9.jpwj6igtmghAiFnl2gKZdUX0bQnl-s4UV2QwxGjnvEQ
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:04:03.900Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjY0MywiZXhwIjoxNTg4MjYyNjQzLCJpc3MiOiJmZWF0aGVycyJ9.jpwj6igtmghAiFnl2gKZdUX0bQnl-s4UV2QwxGjnvEQ' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:04:03.916Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 59849af33fdd10ba54f6f5d6,
  timestamp: 2017-08-04T16:04:03.924Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T15:59:07.019Z 2017-08-04T16:04:07.019Z
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:04:07.020Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjY0NywiZXhwIjoxNTg4MjYyNjQ3LCJpc3MiOiJmZWF0aGVycyJ9.ULjmt2NvYVdHy_iRgdyEcN4nGwjvj170Nd4j833Z7rI
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849af73fdd10ba54f6f5d7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:04:07.025Z,
  from: 2017-08-04T15:59:07.019Z,
  to: 2017-08-04T16:04:07.019Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:04:07.020Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjY0NywiZXhwIjoxNTg4MjYyNjQ3LCJpc3MiOiJmZWF0aGVycyJ9.ULjmt2NvYVdHy_iRgdyEcN4nGwjvj170Nd4j833Z7rI' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:04:07.058Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 59849af73fdd10ba54f6f5d8,
  timestamp: 2017-08-04T16:04:07.084Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 1
74220
2017-08-04T16:02:53.992Z
2017-08-04T16:04:08.212Z
2017-08-04T16:02:55.016Z
info: Inserting new talking history data, not a repeat...
info: getting turn data for hangout no 2017-08-04T15:59:12.026Z 2017-08-04T16:04:12.026Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849afc3fdd10ba54f6f5da,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:04:12.028Z,
  from: 2017-08-04T15:59:12.026Z,
  to: 2017-08-04T16:04:12.026Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:59:17.029Z 2017-08-04T16:04:17.029Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b013fdd10ba54f6f5db,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:04:17.031Z,
  from: 2017-08-04T15:59:17.029Z,
  to: 2017-08-04T16:04:17.029Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=bog, name=bog, participants=[participant=jordan, participant=bog], meeting=no, meetingUrl=http://localhost:3001/?user=bog&room=no, consent=true, consentDate=2017-08-04T16:04:17.756Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjY1NywiZXhwIjoxNTg4MjYyNjU3LCJpc3MiOiJmZWF0aGVycyJ9.60w9LUoFEJt78JTGSyqMacKGP_nLuigSVTe6u0stLjc
info: creating a new participant... NotFound: No record found for id 'bog'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Fri Aug 04 2017 12:04:17 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 12:04:17 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 12:04:17 GMT-0400 (EDT), consent=true, name=bog, _id=bog, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'bog',
     name: 'bog',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=bog&room=no',
     consent: true,
     consentDate: '2017-08-04T16:04:17.756Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjY1NywiZXhwIjoxNTg4MjYyNjU3LCJpc3MiOiJmZWF0aGVycyJ9.60w9LUoFEJt78JTGSyqMacKGP_nLuigSVTe6u0stLjc' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'bog' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'bog' ]
info: not adding participant: { participants: [ 'jordan', 'bog' ],
  lastUpdated: 2017-08-04T16:04:17.857Z } no
updated meeting with participants { participants: [ 'jordan', 'bog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'bog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'bog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'bog' ],
  _id: 59849b013fdd10ba54f6f5dc,
  timestamp: 2017-08-04T16:04:17.896Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'bog' ],
  _id: 59849b013fdd10ba54f6f5dc,
  timestamp: 2017-08-04T16:04:17.896Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 1
0
2017-08-04T16:04:19.866Z
2017-08-04T16:04:19.866Z
2017-08-04T16:04:19.866Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 3
85944
2017-08-04T16:02:53.992Z
2017-08-04T16:04:19.936Z
2017-08-04T16:02:55.016Z
11724
2017-08-04T16:04:08.212Z
2017-08-04T16:04:19.936Z
2017-08-04T16:04:09.113Z
0
2017-08-04T16:04:19.936Z
2017-08-04T16:04:19.936Z
2017-08-04T16:04:19.936Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T15:59:22.032Z 2017-08-04T16:04:22.032Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b063fdd10ba54f6f5e0,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b063fdd10ba54f6f5df,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:22.039Z,
  from: 2017-08-04T15:59:22.032Z,
  to: 2017-08-04T16:04:22.032Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b063fdd10ba54f6f5e0,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b063fdd10ba54f6f5df,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:22.039Z,
  from: 2017-08-04T15:59:22.032Z,
  to: 2017-08-04T16:04:22.032Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:59:27.039Z 2017-08-04T16:04:27.039Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b0b3fdd10ba54f6f5e2,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b0b3fdd10ba54f6f5e1,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:27.097Z,
  from: 2017-08-04T15:59:27.039Z,
  to: 2017-08-04T16:04:27.039Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b0b3fdd10ba54f6f5e2,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b0b3fdd10ba54f6f5e1,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:27.097Z,
  from: 2017-08-04T15:59:27.039Z,
  to: 2017-08-04T16:04:27.039Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:59:32.044Z 2017-08-04T16:04:32.044Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b103fdd10ba54f6f5e4,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b103fdd10ba54f6f5e3,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:32.050Z,
  from: 2017-08-04T15:59:32.044Z,
  to: 2017-08-04T16:04:32.044Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b103fdd10ba54f6f5e4,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b103fdd10ba54f6f5e3,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:32.050Z,
  from: 2017-08-04T15:59:32.044Z,
  to: 2017-08-04T16:04:32.044Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, bog], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 13365 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T15:59:37.049Z 2017-08-04T16:04:37.049Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b153fdd10ba54f6f5e6,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b153fdd10ba54f6f5e5,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:37.052Z,
  from: 2017-08-04T15:59:37.049Z,
  to: 2017-08-04T16:04:37.049Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b153fdd10ba54f6f5e6,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b153fdd10ba54f6f5e5,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:37.052Z,
  from: 2017-08-04T15:59:37.049Z,
  to: 2017-08-04T16:04:37.049Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:59:42.057Z 2017-08-04T16:04:42.057Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b1a3fdd10ba54f6f5e8,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b1a3fdd10ba54f6f5e7,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:42.064Z,
  from: 2017-08-04T15:59:42.057Z,
  to: 2017-08-04T16:04:42.057Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b1a3fdd10ba54f6f5e8,
       participant: 'jordan',
       turns: 0.75 },
     { _id: 59849b1a3fdd10ba54f6f5e7,
       participant: 'bog',
       turns: 0.25 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:42.064Z,
  from: 2017-08-04T15:59:42.057Z,
  to: 2017-08-04T16:04:42.057Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 4
107541
2017-08-04T16:02:53.992Z
2017-08-04T16:04:41.533Z
2017-08-04T16:02:55.016Z
33321
2017-08-04T16:04:08.212Z
2017-08-04T16:04:41.533Z
2017-08-04T16:04:09.113Z
21597
2017-08-04T16:04:19.936Z
2017-08-04T16:04:41.533Z
2017-08-04T16:04:19.936Z
0
2017-08-04T16:04:41.533Z
2017-08-04T16:04:41.533Z
2017-08-04T16:04:41.533Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T15:59:47.063Z 2017-08-04T16:04:47.063Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b1f3fdd10ba54f6f5eb,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b1f3fdd10ba54f6f5ea, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:47.066Z,
  from: 2017-08-04T15:59:47.063Z,
  to: 2017-08-04T16:04:47.063Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b1f3fdd10ba54f6f5eb,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b1f3fdd10ba54f6f5ea, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:47.066Z,
  from: 2017-08-04T15:59:47.063Z,
  to: 2017-08-04T16:04:47.063Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:59:52.067Z 2017-08-04T16:04:52.067Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b243fdd10ba54f6f5ed,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b243fdd10ba54f6f5ec, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:52.070Z,
  from: 2017-08-04T15:59:52.067Z,
  to: 2017-08-04T16:04:52.067Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b243fdd10ba54f6f5ed,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b243fdd10ba54f6f5ec, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:52.070Z,
  from: 2017-08-04T15:59:52.067Z,
  to: 2017-08-04T16:04:52.067Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T15:59:57.070Z 2017-08-04T16:04:57.070Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b293fdd10ba54f6f5ef,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b293fdd10ba54f6f5ee, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:57.123Z,
  from: 2017-08-04T15:59:57.070Z,
  to: 2017-08-04T16:04:57.070Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b293fdd10ba54f6f5ef,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b293fdd10ba54f6f5ee, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:04:57.123Z,
  from: 2017-08-04T15:59:57.070Z,
  to: 2017-08-04T16:04:57.070Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=meep, name=meep, participants=[participant=jordan, participant=bog, participant=meep], meeting=no, meetingUrl=http://localhost:3001/?user=meep&room=no, consent=true, consentDate=2017-08-04T16:04:59.350Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjY5OSwiZXhwIjoxNTg4MjYyNjk5LCJpc3MiOiJmZWF0aGVycyJ9._nWx80lFiqnyNKZFfE-EKZcsvZFcLTFqAAywGhT36FM
info: creating a new participant... NotFound: No record found for id 'meep'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Fri Aug 04 2017 12:04:59 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 12:04:59 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 12:04:59 GMT-0400 (EDT), consent=true, name=meep, _id=meep, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'meep',
     name: 'meep',
     participants: [ [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=meep&room=no',
     consent: true,
     consentDate: '2017-08-04T16:04:59.350Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2MjY5OSwiZXhwIjoxNTg4MjYyNjk5LCJpc3MiOiJmZWF0aGVycyJ9._nWx80lFiqnyNKZFfE-EKZcsvZFcLTFqAAywGhT36FM' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'bog', 'meep' ]
info: getting turn data for hangout no 2017-08-04T16:00:02.157Z 2017-08-04T16:05:02.157Z
patching meeting { participants: [ 'jordan', 'bog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'bog', 'meep' ]
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b2e3fdd10ba54f6f5f1,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b2e3fdd10ba54f6f5f0, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:05:02.232Z,
  from: 2017-08-04T16:00:02.157Z,
  to: 2017-08-04T16:05:02.157Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b2e3fdd10ba54f6f5f1,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b2e3fdd10ba54f6f5f0, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:05:02.232Z,
  from: 2017-08-04T16:00:02.157Z,
  to: 2017-08-04T16:05:02.157Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b2e3fdd10ba54f6f5f1,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b2e3fdd10ba54f6f5f0, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:05:02.232Z,
  from: 2017-08-04T16:00:02.157Z,
  to: 2017-08-04T16:05:02.157Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: not adding participant: { participants: [ 'jordan', 'bog', 'meep' ],
  lastUpdated: 2017-08-04T16:05:02.232Z } no
updated meeting with participants { participants: [ 'jordan', 'bog', 'meep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'bog', 'meep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'bog', 'meep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'bog', 'meep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'bog', 'meep' ],
  _id: 59849b2e3fdd10ba54f6f5f2,
  timestamp: 2017-08-04T16:05:02.288Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'bog', 'meep' ],
  _id: 59849b2e3fdd10ba54f6f5f2,
  timestamp: 2017-08-04T16:05:02.288Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'bog', 'meep' ],
  _id: 59849b2e3fdd10ba54f6f5f2,
  timestamp: 2017-08-04T16:05:02.288Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:00:07.162Z 2017-08-04T16:05:07.162Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b333fdd10ba54f6f5f4,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b333fdd10ba54f6f5f3, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:05:07.165Z,
  from: 2017-08-04T16:00:07.162Z,
  to: 2017-08-04T16:05:07.162Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b333fdd10ba54f6f5f4,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b333fdd10ba54f6f5f3, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:05:07.165Z,
  from: 2017-08-04T16:00:07.162Z,
  to: 2017-08-04T16:05:07.162Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b333fdd10ba54f6f5f4,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 59849b333fdd10ba54f6f5f3, participant: 'bog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 2,
  timestamp: 2017-08-04T16:05:07.165Z,
  from: 2017-08-04T16:00:07.162Z,
  to: 2017-08-04T16:05:07.162Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 1
0
2017-08-04T16:05:08.844Z
2017-08-04T16:05:08.844Z
2017-08-04T16:05:09.099Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:00:12.164Z 2017-08-04T16:05:12.164Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 59849b383fdd10ba54f6f5f8,
       participant: 'jordan',
       turns: 0.6666666666666666 },
     { _id: 59849b383fdd10ba54f6f5f7,
       participant: 'bog',
       turns: 0.16666666666666666 },
     { _id: 59849b383fdd10ba54f6f5f6,
       participant: 'meep',
       turns: 0.16666666666666666 } ],
  meeting: 'no',
  transitions: 3,
  timestamp: 2017-08-04T16:05:12.166Z,
  from: 2017-08-04T16:00:12.164Z,
  to: 2017-08-04T16:05:12.164Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 59849b383fdd10ba54f6f5f8,
       participant: 'jordan',
       turns: 0.6666666666666666 },
     { _id: 59849b383fdd10ba54f6f5f7,
       participant: 'bog',
       turns: 0.16666666666666666 },
     { _id: 59849b383fdd10ba54f6f5f6,
       participant: 'meep',
       turns: 0.16666666666666666 } ],
  meeting: 'no',
  transitions: 3,
  timestamp: 2017-08-04T16:05:12.166Z,
  from: 2017-08-04T16:00:12.164Z,
  to: 2017-08-04T16:05:12.164Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 2
51921
2017-08-04T16:04:19.866Z
2017-08-04T16:05:11.787Z
2017-08-04T16:04:19.866Z
0
2017-08-04T16:05:11.787Z
2017-08-04T16:05:11.787Z
2017-08-04T16:05:11.787Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 5
137245
2017-08-04T16:02:53.992Z
2017-08-04T16:05:11.237Z
2017-08-04T16:02:55.016Z
63025
2017-08-04T16:04:08.212Z
2017-08-04T16:05:11.237Z
2017-08-04T16:04:09.113Z
51301
2017-08-04T16:04:19.936Z
2017-08-04T16:05:11.237Z
2017-08-04T16:04:19.936Z
29704
2017-08-04T16:04:41.533Z
2017-08-04T16:05:11.237Z
2017-08-04T16:04:41.533Z
0
2017-08-04T16:05:11.237Z
2017-08-04T16:05:11.237Z
2017-08-04T16:05:11.842Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:00:17.168Z 2017-08-04T16:05:17.168Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:00:22.173Z 2017-08-04T16:05:22.173Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:00:27.176Z 2017-08-04T16:05:27.176Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:00:32.180Z 2017-08-04T16:05:32.180Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, bog, meep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 21447 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:00:37.181Z 2017-08-04T16:05:37.181Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:00:42.187Z 2017-08-04T16:05:42.188Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:00:47.193Z 2017-08-04T16:05:47.193Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:00:52.197Z 2017-08-04T16:05:52.197Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:00:57.202Z 2017-08-04T16:05:57.202Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:02.203Z 2017-08-04T16:06:02.203Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:07.207Z 2017-08-04T16:06:07.207Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:12.213Z 2017-08-04T16:06:12.213Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:17.218Z 2017-08-04T16:06:17.218Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:22.219Z 2017-08-04T16:06:22.219Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:27.222Z 2017-08-04T16:06:27.222Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:32.227Z 2017-08-04T16:06:32.227Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, bog, meep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 81448 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:01:37.231Z 2017-08-04T16:06:37.231Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:42.237Z 2017-08-04T16:06:42.237Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:47.241Z 2017-08-04T16:06:47.241Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:52.245Z 2017-08-04T16:06:52.245Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:01:57.246Z 2017-08-04T16:06:57.246Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:02.246Z 2017-08-04T16:07:02.246Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:07.250Z 2017-08-04T16:07:07.250Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:12.255Z 2017-08-04T16:07:12.255Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:17.257Z 2017-08-04T16:07:17.257Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:22.261Z 2017-08-04T16:07:22.261Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:27.267Z 2017-08-04T16:07:27.267Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:32.272Z 2017-08-04T16:07:32.272Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, bog, meep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 141451 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:02:37.275Z 2017-08-04T16:07:37.275Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:42.279Z 2017-08-04T16:07:42.279Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:47.280Z 2017-08-04T16:07:47.280Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:52.285Z 2017-08-04T16:07:52.285Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:02:57.289Z 2017-08-04T16:07:57.289Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:02.294Z 2017-08-04T16:08:02.294Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:07.295Z 2017-08-04T16:08:07.295Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:12.297Z 2017-08-04T16:08:12.297Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:17.299Z 2017-08-04T16:08:17.299Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:22.303Z 2017-08-04T16:08:22.303Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:27.304Z 2017-08-04T16:08:27.304Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:32.310Z 2017-08-04T16:08:32.310Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, bog, meep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 201453 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:03:37.312Z 2017-08-04T16:08:37.312Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:42.318Z 2017-08-04T16:08:42.318Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:47.323Z 2017-08-04T16:08:47.323Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:52.327Z 2017-08-04T16:08:52.327Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:03:57.332Z 2017-08-04T16:08:57.332Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:02.333Z 2017-08-04T16:09:02.333Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:07.334Z 2017-08-04T16:09:07.334Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:12.340Z 2017-08-04T16:09:12.340Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:17.346Z 2017-08-04T16:09:17.346Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:22.352Z 2017-08-04T16:09:22.352Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:27.353Z 2017-08-04T16:09:27.353Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:32.357Z 2017-08-04T16:09:32.357Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, bog, meep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 261461 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:04:37.359Z 2017-08-04T16:09:37.359Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:42.365Z 2017-08-04T16:09:42.365Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:47.368Z 2017-08-04T16:09:47.368Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:52.372Z 2017-08-04T16:09:52.372Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:04:57.374Z 2017-08-04T16:09:57.374Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:05:02.375Z 2017-08-04T16:10:02.375Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:05:07.380Z 2017-08-04T16:10:07.380Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:05:12.380Z 2017-08-04T16:10:12.380Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:05:17.384Z 2017-08-04T16:10:17.384Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:05:22.389Z 2017-08-04T16:10:22.389Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:05:27.389Z 2017-08-04T16:10:27.389Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:05:32.390Z 2017-08-04T16:10:32.390Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, bog, meep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 321465 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, bog, meep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-04T16:10:33.308Z,
  endTime: 2017-08-04T16:10:33.310Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, bog, meep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Fri Aug 04 2017 12:10:33 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:30:52.504Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI1MiwiZXhwIjoxNTg4MjY0MjUyLCJpc3MiOiJmZWF0aGVycyJ9.2Ti4PLsFG0Qlx1l9J4z2259vBhYjfggxPoxa0wazdP0
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:30:52.504Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI1MiwiZXhwIjoxNTg4MjY0MjUyLCJpc3MiOiJmZWF0aGVycyJ9.2Ti4PLsFG0Qlx1l9J4z2259vBhYjfggxPoxa0wazdP0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T16:10:33.310Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:30:52.558Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:25:52.612Z 2017-08-04T16:30:52.612Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a13c3fdd10ba54f6f6af,
  timestamp: 2017-08-04T16:30:52.616Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:30:52.642Z,
  from: 2017-08-04T16:25:52.612Z,
  to: 2017-08-04T16:30:52.612Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T16:25:57.620Z 2017-08-04T16:30:57.620Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:30:57.621Z,
  from: 2017-08-04T16:25:57.620Z,
  to: 2017-08-04T16:30:57.620Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:30:58.272Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI1OCwiZXhwIjoxNTg4MjY0MjU4LCJpc3MiOiJmZWF0aGVycyJ9.j1raOhqNegvAwKONjtdlFcFloOi4tX859lRIQ-txea0
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:30:58.272Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI1OCwiZXhwIjoxNTg4MjY0MjU4LCJpc3MiOiJmZWF0aGVycyJ9.j1raOhqNegvAwKONjtdlFcFloOi4tX859lRIQ-txea0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:30:58.288Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a1423fdd10ba54f6f6b0,
  timestamp: 2017-08-04T16:30:58.292Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T16:26:02.620Z 2017-08-04T16:31:02.620Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:02.622Z,
  from: 2017-08-04T16:26:02.620Z,
  to: 2017-08-04T16:31:02.620Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:31:02.797Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI2MiwiZXhwIjoxNTg4MjY0MjYyLCJpc3MiOiJmZWF0aGVycyJ9.81l8bJ1Cjy3xdZ6E2VB9XqwoSahzuWp2Q_DL7B2otyY
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:31:02.797Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI2MiwiZXhwIjoxNTg4MjY0MjYyLCJpc3MiOiJmZWF0aGVycyJ9.81l8bJ1Cjy3xdZ6E2VB9XqwoSahzuWp2Q_DL7B2otyY' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:31:02.809Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a1463fdd10ba54f6f6b1,
  timestamp: 2017-08-04T16:31:02.813Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:31:04.927Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI2NCwiZXhwIjoxNTg4MjY0MjY0LCJpc3MiOiJmZWF0aGVycyJ9.NezCHeFM-mEefY4oh6CYGG66TpKnAc88kl3BuLRnRSM
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:31:04.927Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI2NCwiZXhwIjoxNTg4MjY0MjY0LCJpc3MiOiJmZWF0aGVycyJ9.NezCHeFM-mEefY4oh6CYGG66TpKnAc88kl3BuLRnRSM' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:31:04.940Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a1483fdd10ba54f6f6b2,
  timestamp: 2017-08-04T16:31:04.947Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:26:07.623Z 2017-08-04T16:31:07.623Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:07.625Z,
  from: 2017-08-04T16:26:07.623Z,
  to: 2017-08-04T16:31:07.623Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:26:12.626Z 2017-08-04T16:31:12.626Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:12.628Z,
  from: 2017-08-04T16:26:12.626Z,
  to: 2017-08-04T16:31:12.626Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 6
1701760
2017-08-04T16:02:53.992Z
2017-08-04T16:31:15.752Z
2017-08-04T16:02:55.016Z
1627540
2017-08-04T16:04:08.212Z
2017-08-04T16:31:15.752Z
2017-08-04T16:04:09.113Z
1615816
2017-08-04T16:04:19.936Z
2017-08-04T16:31:15.752Z
2017-08-04T16:04:19.936Z
1594219
2017-08-04T16:04:41.533Z
2017-08-04T16:31:15.752Z
2017-08-04T16:04:41.533Z
1564515
2017-08-04T16:05:11.237Z
2017-08-04T16:31:15.752Z
2017-08-04T16:05:11.842Z
0
2017-08-04T16:31:15.752Z
2017-08-04T16:31:15.752Z
2017-08-04T16:31:16.861Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:26:17.630Z 2017-08-04T16:31:17.630Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1553fdd10ba54f6f6b4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:17.633Z,
  from: 2017-08-04T16:26:17.630Z,
  to: 2017-08-04T16:31:17.630Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=ma, name=ma, participants=[participant=jordan, participant=ma], meeting=no, meetingUrl=http://localhost:3001/?user=ma&room=no, consent=true, consentDate=2017-08-04T16:31:18.841Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI3OCwiZXhwIjoxNTg4MjY0Mjc4LCJpc3MiOiJmZWF0aGVycyJ9.zL9LedvjlZmgnOjd2upRHThuX7UoOewAGwNS72iYw5U
info: creating a new participant... NotFound: No record found for id 'ma'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Fri Aug 04 2017 12:31:18 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 12:31:18 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 12:31:18 GMT-0400 (EDT), consent=true, name=ma, _id=ma, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'ma',
     name: 'ma',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=ma&room=no',
     consent: true,
     consentDate: '2017-08-04T16:31:18.841Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDI3OCwiZXhwIjoxNTg4MjY0Mjc4LCJpc3MiOiJmZWF0aGVycyJ9.zL9LedvjlZmgnOjd2upRHThuX7UoOewAGwNS72iYw5U' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'ma' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'ma' ]
info: not adding participant: { participants: [ 'jordan', 'ma' ],
  lastUpdated: 2017-08-04T16:31:18.873Z } no
updated meeting with participants { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a1563fdd10ba54f6f6b5,
  timestamp: 2017-08-04T16:31:18.897Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a1563fdd10ba54f6f6b5,
  timestamp: 2017-08-04T16:31:18.897Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:26:22.631Z 2017-08-04T16:31:22.631Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a15a3fdd10ba54f6f6b6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:22.634Z,
  from: 2017-08-04T16:26:22.631Z,
  to: 2017-08-04T16:31:22.631Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a15a3fdd10ba54f6f6b6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:22.634Z,
  from: 2017-08-04T16:26:22.631Z,
  to: 2017-08-04T16:31:22.631Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:26:27.634Z 2017-08-04T16:31:27.634Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a15f3fdd10ba54f6f6b7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:27.637Z,
  from: 2017-08-04T16:26:27.634Z,
  to: 2017-08-04T16:31:27.634Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:26:32.640Z 2017-08-04T16:31:32.640Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1643fdd10ba54f6f6b8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:32.642Z,
  from: 2017-08-04T16:26:32.640Z,
  to: 2017-08-04T16:31:32.640Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 16533 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:26:37.646Z 2017-08-04T16:31:37.646Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1693fdd10ba54f6f6b9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:37.649Z,
  from: 2017-08-04T16:26:37.646Z,
  to: 2017-08-04T16:31:37.646Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:26:42.649Z 2017-08-04T16:31:42.649Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a16e3fdd10ba54f6f6ba,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:42.651Z,
  from: 2017-08-04T16:26:42.649Z,
  to: 2017-08-04T16:31:42.649Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:26:47.654Z 2017-08-04T16:31:47.654Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1733fdd10ba54f6f6bb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:47.656Z,
  from: 2017-08-04T16:26:47.654Z,
  to: 2017-08-04T16:31:47.654Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:26:52.656Z 2017-08-04T16:31:52.656Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1783fdd10ba54f6f6bc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:52.658Z,
  from: 2017-08-04T16:26:52.656Z,
  to: 2017-08-04T16:31:52.656Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:26:57.658Z 2017-08-04T16:31:57.658Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a17d3fdd10ba54f6f6bd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:31:57.659Z,
  from: 2017-08-04T16:26:57.658Z,
  to: 2017-08-04T16:31:57.658Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:02.662Z 2017-08-04T16:32:02.662Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1823fdd10ba54f6f6be,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:02.663Z,
  from: 2017-08-04T16:27:02.662Z,
  to: 2017-08-04T16:32:02.662Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:07.663Z 2017-08-04T16:32:07.663Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1873fdd10ba54f6f6bf,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:07.666Z,
  from: 2017-08-04T16:27:07.663Z,
  to: 2017-08-04T16:32:07.663Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:12.665Z 2017-08-04T16:32:12.665Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a18c3fdd10ba54f6f6c0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:12.670Z,
  from: 2017-08-04T16:27:12.665Z,
  to: 2017-08-04T16:32:12.665Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:17.672Z 2017-08-04T16:32:17.672Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1913fdd10ba54f6f6c1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:17.675Z,
  from: 2017-08-04T16:27:17.672Z,
  to: 2017-08-04T16:32:17.672Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:22.673Z 2017-08-04T16:32:22.673Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1963fdd10ba54f6f6c2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:22.678Z,
  from: 2017-08-04T16:27:22.673Z,
  to: 2017-08-04T16:32:22.673Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:27.678Z 2017-08-04T16:32:27.678Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a19b3fdd10ba54f6f6c3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:27.680Z,
  from: 2017-08-04T16:27:27.678Z,
  to: 2017-08-04T16:32:27.678Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:32.684Z 2017-08-04T16:32:32.684Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1a03fdd10ba54f6f6c4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:32.686Z,
  from: 2017-08-04T16:27:32.684Z,
  to: 2017-08-04T16:32:32.684Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 76531 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:27:37.684Z 2017-08-04T16:32:37.685Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1a53fdd10ba54f6f6c5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:37.687Z,
  from: 2017-08-04T16:27:37.684Z,
  to: 2017-08-04T16:32:37.685Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:42.686Z 2017-08-04T16:32:42.686Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1aa3fdd10ba54f6f6c6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:42.687Z,
  from: 2017-08-04T16:27:42.686Z,
  to: 2017-08-04T16:32:42.686Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:47.689Z 2017-08-04T16:32:47.689Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1af3fdd10ba54f6f6c7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:47.690Z,
  from: 2017-08-04T16:27:47.689Z,
  to: 2017-08-04T16:32:47.689Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:52.694Z 2017-08-04T16:32:52.694Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1b43fdd10ba54f6f6c8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:52.696Z,
  from: 2017-08-04T16:27:52.694Z,
  to: 2017-08-04T16:32:52.694Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:27:57.697Z 2017-08-04T16:32:57.697Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1b93fdd10ba54f6f6c9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:32:57.699Z,
  from: 2017-08-04T16:27:57.697Z,
  to: 2017-08-04T16:32:57.697Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:02.700Z 2017-08-04T16:33:02.700Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1be3fdd10ba54f6f6ca,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:02.702Z,
  from: 2017-08-04T16:28:02.700Z,
  to: 2017-08-04T16:33:02.700Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:07.705Z 2017-08-04T16:33:07.705Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1c33fdd10ba54f6f6cb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:07.706Z,
  from: 2017-08-04T16:28:07.705Z,
  to: 2017-08-04T16:33:07.705Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:12.708Z 2017-08-04T16:33:12.708Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1c83fdd10ba54f6f6cc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:12.710Z,
  from: 2017-08-04T16:28:12.708Z,
  to: 2017-08-04T16:33:12.708Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:17.712Z 2017-08-04T16:33:17.712Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1cd3fdd10ba54f6f6cd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:17.713Z,
  from: 2017-08-04T16:28:17.712Z,
  to: 2017-08-04T16:33:17.712Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:22.715Z 2017-08-04T16:33:22.715Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1d23fdd10ba54f6f6ce,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:22.717Z,
  from: 2017-08-04T16:28:22.715Z,
  to: 2017-08-04T16:33:22.715Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:27.719Z 2017-08-04T16:33:27.719Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1d73fdd10ba54f6f6cf,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:27.720Z,
  from: 2017-08-04T16:28:27.719Z,
  to: 2017-08-04T16:33:27.719Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:32.719Z 2017-08-04T16:33:32.719Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1dc3fdd10ba54f6f6d0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:32.721Z,
  from: 2017-08-04T16:28:32.719Z,
  to: 2017-08-04T16:33:32.719Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 136536 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:28:37.722Z 2017-08-04T16:33:37.722Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1e13fdd10ba54f6f6d1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:37.724Z,
  from: 2017-08-04T16:28:37.722Z,
  to: 2017-08-04T16:33:37.722Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:42.724Z 2017-08-04T16:33:42.724Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1e63fdd10ba54f6f6d2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:42.727Z,
  from: 2017-08-04T16:28:42.724Z,
  to: 2017-08-04T16:33:42.724Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:47.727Z 2017-08-04T16:33:47.727Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1eb3fdd10ba54f6f6d3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:47.729Z,
  from: 2017-08-04T16:28:47.727Z,
  to: 2017-08-04T16:33:47.727Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:52.731Z 2017-08-04T16:33:52.731Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1f03fdd10ba54f6f6d4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:52.732Z,
  from: 2017-08-04T16:28:52.731Z,
  to: 2017-08-04T16:33:52.731Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:28:57.735Z 2017-08-04T16:33:57.735Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1f53fdd10ba54f6f6d5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:33:57.737Z,
  from: 2017-08-04T16:28:57.735Z,
  to: 2017-08-04T16:33:57.735Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:02.740Z 2017-08-04T16:34:02.740Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1fa3fdd10ba54f6f6d6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:02.742Z,
  from: 2017-08-04T16:29:02.740Z,
  to: 2017-08-04T16:34:02.740Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:07.745Z 2017-08-04T16:34:07.745Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a1ff3fdd10ba54f6f6d7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:07.747Z,
  from: 2017-08-04T16:29:07.745Z,
  to: 2017-08-04T16:34:07.745Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:12.752Z 2017-08-04T16:34:12.752Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2043fdd10ba54f6f6d8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:12.757Z,
  from: 2017-08-04T16:29:12.752Z,
  to: 2017-08-04T16:34:12.752Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:17.756Z 2017-08-04T16:34:17.756Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2093fdd10ba54f6f6d9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:17.757Z,
  from: 2017-08-04T16:29:17.756Z,
  to: 2017-08-04T16:34:17.756Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:22.758Z 2017-08-04T16:34:22.758Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a20e3fdd10ba54f6f6da,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:22.761Z,
  from: 2017-08-04T16:29:22.758Z,
  to: 2017-08-04T16:34:22.758Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:27.762Z 2017-08-04T16:34:27.762Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2133fdd10ba54f6f6db,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:27.763Z,
  from: 2017-08-04T16:29:27.762Z,
  to: 2017-08-04T16:34:27.762Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:32.765Z 2017-08-04T16:34:32.765Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2183fdd10ba54f6f6dc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:32.767Z,
  from: 2017-08-04T16:29:32.765Z,
  to: 2017-08-04T16:34:32.765Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 196538 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:29:37.766Z 2017-08-04T16:34:37.766Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a21d3fdd10ba54f6f6dd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:37.768Z,
  from: 2017-08-04T16:29:37.766Z,
  to: 2017-08-04T16:34:37.766Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:42.770Z 2017-08-04T16:34:42.770Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2223fdd10ba54f6f6de,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:42.772Z,
  from: 2017-08-04T16:29:42.770Z,
  to: 2017-08-04T16:34:42.770Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:47.771Z 2017-08-04T16:34:47.771Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2273fdd10ba54f6f6df,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:47.772Z,
  from: 2017-08-04T16:29:47.771Z,
  to: 2017-08-04T16:34:47.771Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:52.776Z 2017-08-04T16:34:52.776Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a22c3fdd10ba54f6f6e0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:52.778Z,
  from: 2017-08-04T16:29:52.776Z,
  to: 2017-08-04T16:34:52.776Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:29:57.777Z 2017-08-04T16:34:57.777Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2313fdd10ba54f6f6e1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:34:57.779Z,
  from: 2017-08-04T16:29:57.777Z,
  to: 2017-08-04T16:34:57.777Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:02.778Z 2017-08-04T16:35:02.778Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2363fdd10ba54f6f6e2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:02.780Z,
  from: 2017-08-04T16:30:02.778Z,
  to: 2017-08-04T16:35:02.778Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:07.782Z 2017-08-04T16:35:07.782Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a23b3fdd10ba54f6f6e3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:07.783Z,
  from: 2017-08-04T16:30:07.782Z,
  to: 2017-08-04T16:35:07.782Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:12.784Z 2017-08-04T16:35:12.784Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2403fdd10ba54f6f6e4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:12.786Z,
  from: 2017-08-04T16:30:12.784Z,
  to: 2017-08-04T16:35:12.784Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:17.786Z 2017-08-04T16:35:17.786Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2453fdd10ba54f6f6e5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:17.794Z,
  from: 2017-08-04T16:30:17.786Z,
  to: 2017-08-04T16:35:17.786Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:22.790Z 2017-08-04T16:35:22.790Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a24a3fdd10ba54f6f6e6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:22.791Z,
  from: 2017-08-04T16:30:22.790Z,
  to: 2017-08-04T16:35:22.790Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:27.793Z 2017-08-04T16:35:27.793Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a24f3fdd10ba54f6f6e7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:27.795Z,
  from: 2017-08-04T16:30:27.793Z,
  to: 2017-08-04T16:35:27.793Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:32.797Z 2017-08-04T16:35:32.797Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2543fdd10ba54f6f6e8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:32.798Z,
  from: 2017-08-04T16:30:32.797Z,
  to: 2017-08-04T16:35:32.797Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 256541 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:30:37.798Z 2017-08-04T16:35:37.798Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2593fdd10ba54f6f6e9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:37.799Z,
  from: 2017-08-04T16:30:37.798Z,
  to: 2017-08-04T16:35:37.798Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:42.801Z 2017-08-04T16:35:42.801Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a25e3fdd10ba54f6f6ea,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:42.803Z,
  from: 2017-08-04T16:30:42.801Z,
  to: 2017-08-04T16:35:42.801Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:47.804Z 2017-08-04T16:35:47.804Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2633fdd10ba54f6f6eb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:47.805Z,
  from: 2017-08-04T16:30:47.804Z,
  to: 2017-08-04T16:35:47.804Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 7
1975567
2017-08-04T16:02:53.992Z
2017-08-04T16:35:49.559Z
2017-08-04T16:02:55.016Z
1901347
2017-08-04T16:04:08.212Z
2017-08-04T16:35:49.559Z
2017-08-04T16:04:09.113Z
1889623
2017-08-04T16:04:19.936Z
2017-08-04T16:35:49.559Z
2017-08-04T16:04:19.936Z
1868026
2017-08-04T16:04:41.533Z
2017-08-04T16:35:49.559Z
2017-08-04T16:04:41.533Z
1838322
2017-08-04T16:05:11.237Z
2017-08-04T16:35:49.559Z
2017-08-04T16:05:11.842Z
273807
2017-08-04T16:31:15.752Z
2017-08-04T16:35:49.559Z
2017-08-04T16:31:16.861Z
0
2017-08-04T16:35:49.559Z
2017-08-04T16:35:49.559Z
2017-08-04T16:35:49.559Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:30:52.809Z 2017-08-04T16:35:52.809Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2683fdd10ba54f6f6ed,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:52.811Z,
  from: 2017-08-04T16:30:52.809Z,
  to: 2017-08-04T16:35:52.809Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:30:57.809Z 2017-08-04T16:35:57.809Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a26d3fdd10ba54f6f6ee,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:35:57.811Z,
  from: 2017-08-04T16:30:57.809Z,
  to: 2017-08-04T16:35:57.809Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:02.812Z 2017-08-04T16:36:02.812Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2723fdd10ba54f6f6ef,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:02.814Z,
  from: 2017-08-04T16:31:02.812Z,
  to: 2017-08-04T16:36:02.812Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:07.817Z 2017-08-04T16:36:07.817Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2773fdd10ba54f6f6f0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:07.819Z,
  from: 2017-08-04T16:31:07.817Z,
  to: 2017-08-04T16:36:07.817Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:12.821Z 2017-08-04T16:36:12.821Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a27c3fdd10ba54f6f6f1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:12.824Z,
  from: 2017-08-04T16:31:12.821Z,
  to: 2017-08-04T16:36:12.821Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:17.826Z 2017-08-04T16:36:17.826Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2813fdd10ba54f6f6f2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:17.827Z,
  from: 2017-08-04T16:31:17.826Z,
  to: 2017-08-04T16:36:17.826Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:22.828Z 2017-08-04T16:36:22.828Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2863fdd10ba54f6f6f3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:22.830Z,
  from: 2017-08-04T16:31:22.828Z,
  to: 2017-08-04T16:36:22.828Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:27.831Z 2017-08-04T16:36:27.831Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a28b3fdd10ba54f6f6f4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:27.833Z,
  from: 2017-08-04T16:31:27.831Z,
  to: 2017-08-04T16:36:27.831Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:32.831Z 2017-08-04T16:36:32.831Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2903fdd10ba54f6f6f5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:32.834Z,
  from: 2017-08-04T16:31:32.831Z,
  to: 2017-08-04T16:36:32.831Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 43844 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:31:37.837Z 2017-08-04T16:36:37.837Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2953fdd10ba54f6f6f6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:37.839Z,
  from: 2017-08-04T16:31:37.837Z,
  to: 2017-08-04T16:36:37.837Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:42.838Z 2017-08-04T16:36:42.838Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a29a3fdd10ba54f6f6f7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:42.842Z,
  from: 2017-08-04T16:31:42.838Z,
  to: 2017-08-04T16:36:42.838Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:47.842Z 2017-08-04T16:36:47.842Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a29f3fdd10ba54f6f6f8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:47.845Z,
  from: 2017-08-04T16:31:47.842Z,
  to: 2017-08-04T16:36:47.842Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:52.843Z 2017-08-04T16:36:52.843Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2a43fdd10ba54f6f6f9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:52.844Z,
  from: 2017-08-04T16:31:52.843Z,
  to: 2017-08-04T16:36:52.843Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:31:57.849Z 2017-08-04T16:36:57.849Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2a93fdd10ba54f6f6fa,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:36:57.898Z,
  from: 2017-08-04T16:31:57.849Z,
  to: 2017-08-04T16:36:57.849Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:02.851Z 2017-08-04T16:37:02.851Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2ae3fdd10ba54f6f6fb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:02.853Z,
  from: 2017-08-04T16:32:02.851Z,
  to: 2017-08-04T16:37:02.851Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:07.853Z 2017-08-04T16:37:07.853Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2b33fdd10ba54f6f6fc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:07.856Z,
  from: 2017-08-04T16:32:07.853Z,
  to: 2017-08-04T16:37:07.853Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:12.856Z 2017-08-04T16:37:12.856Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2b83fdd10ba54f6f6fd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:12.891Z,
  from: 2017-08-04T16:32:12.856Z,
  to: 2017-08-04T16:37:12.856Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:17.861Z 2017-08-04T16:37:17.861Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2bd3fdd10ba54f6f6fe,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:17.863Z,
  from: 2017-08-04T16:32:17.861Z,
  to: 2017-08-04T16:37:17.861Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:22.871Z 2017-08-04T16:37:22.871Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2c23fdd10ba54f6f6ff,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:22.879Z,
  from: 2017-08-04T16:32:22.871Z,
  to: 2017-08-04T16:37:22.871Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:27.880Z 2017-08-04T16:37:27.880Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2c73fdd10ba54f6f700,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:27.883Z,
  from: 2017-08-04T16:32:27.880Z,
  to: 2017-08-04T16:37:27.880Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:32.885Z 2017-08-04T16:37:32.885Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2cc3fdd10ba54f6f701,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:32.888Z,
  from: 2017-08-04T16:32:32.885Z,
  to: 2017-08-04T16:37:32.885Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 103854 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:32:37.889Z 2017-08-04T16:37:37.889Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2d13fdd10ba54f6f702,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:37.892Z,
  from: 2017-08-04T16:32:37.889Z,
  to: 2017-08-04T16:37:37.889Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:42.894Z 2017-08-04T16:37:42.894Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2d63fdd10ba54f6f703,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:42.897Z,
  from: 2017-08-04T16:32:42.894Z,
  to: 2017-08-04T16:37:42.894Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:47.899Z 2017-08-04T16:37:47.899Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2db3fdd10ba54f6f704,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:47.901Z,
  from: 2017-08-04T16:32:47.899Z,
  to: 2017-08-04T16:37:47.899Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:52.900Z 2017-08-04T16:37:52.900Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2e03fdd10ba54f6f705,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:52.902Z,
  from: 2017-08-04T16:32:52.900Z,
  to: 2017-08-04T16:37:52.900Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:32:57.904Z 2017-08-04T16:37:57.904Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2e53fdd10ba54f6f706,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:37:57.906Z,
  from: 2017-08-04T16:32:57.904Z,
  to: 2017-08-04T16:37:57.904Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=ma, name=ma, participants=[participant=jordan, participant=ma], meeting=no, meetingUrl=http://localhost:3001/?user=ma&room=no, consent=true, consentDate=2017-08-04T16:38:02.164Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDY4MiwiZXhwIjoxNTg4MjY0NjgyLCJpc3MiOiJmZWF0aGVycyJ9.xqdt50WRx75lTcOOg02ZOmTjYnoKXAB6wU3rULDe11o
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'ma',
     name: 'ma',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=ma&room=no',
     consent: true,
     consentDate: '2017-08-04T16:38:02.164Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDY4MiwiZXhwIjoxNTg4MjY0NjgyLCJpc3MiOiJmZWF0aGVycyJ9.xqdt50WRx75lTcOOg02ZOmTjYnoKXAB6wU3rULDe11o' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'ma' ]
patching meeting { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'ma' ]
info: not adding participant: { participants: [ 'jordan', 'ma' ],
  lastUpdated: 2017-08-04T16:38:02.246Z } no
updated meeting with participants { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a2ea3fdd10ba54f6f707,
  timestamp: 2017-08-04T16:38:02.251Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a2ea3fdd10ba54f6f707,
  timestamp: 2017-08-04T16:38:02.251Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:02.908Z 2017-08-04T16:38:02.908Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2ea3fdd10ba54f6f708,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:38:02.911Z,
  from: 2017-08-04T16:33:02.908Z,
  to: 2017-08-04T16:38:02.908Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a2ea3fdd10ba54f6f708,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:38:02.911Z,
  from: 2017-08-04T16:33:02.908Z,
  to: 2017-08-04T16:38:02.908Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:07.913Z 2017-08-04T16:38:07.913Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2ef3fdd10ba54f6f709,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:38:07.915Z,
  from: 2017-08-04T16:33:07.913Z,
  to: 2017-08-04T16:38:07.913Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a2ef3fdd10ba54f6f709,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:38:07.915Z,
  from: 2017-08-04T16:33:07.913Z,
  to: 2017-08-04T16:38:07.913Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:12.915Z 2017-08-04T16:38:12.915Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2f43fdd10ba54f6f70a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:38:12.918Z,
  from: 2017-08-04T16:33:12.915Z,
  to: 2017-08-04T16:38:12.915Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a2f43fdd10ba54f6f70a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:38:12.918Z,
  from: 2017-08-04T16:33:12.915Z,
  to: 2017-08-04T16:38:12.915Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:17.918Z 2017-08-04T16:38:17.919Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2f93fdd10ba54f6f70b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:38:17.921Z,
  from: 2017-08-04T16:33:17.918Z,
  to: 2017-08-04T16:38:17.919Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a2f93fdd10ba54f6f70b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:38:17.921Z,
  from: 2017-08-04T16:33:17.918Z,
  to: 2017-08-04T16:38:17.919Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:22.924Z 2017-08-04T16:38:22.924Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a2fe3fdd10ba54f6f70c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:38:22.926Z,
  from: 2017-08-04T16:33:22.924Z,
  to: 2017-08-04T16:38:22.924Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 1
0
2017-08-04T16:38:22.321Z
2017-08-04T16:38:22.321Z
2017-08-04T16:38:22.832Z
info: Tried to insert repeat talking history data! Nuh-Uh
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=ma, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:38:24.836Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDcwNCwiZXhwIjoxNTg4MjY0NzA0LCJpc3MiOiJmZWF0aGVycyJ9.d6iNvFXOa5Ilqd6dDxmmMalNVItzV61keE12cYXMtJU
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:38:24.836Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDcwNCwiZXhwIjoxNTg4MjY0NzA0LCJpc3MiOiJmZWF0aGVycyJ9.d6iNvFXOa5Ilqd6dDxmmMalNVItzV61keE12cYXMtJU' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'ma', 'jordan' ]
patching meeting { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'ma', 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'ma' ],
  lastUpdated: 2017-08-04T16:38:24.903Z } no
updated meeting with participants { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a3003fdd10ba54f6f70e,
  timestamp: 2017-08-04T16:38:24.928Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a3003fdd10ba54f6f70e,
  timestamp: 2017-08-04T16:38:24.928Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:27.925Z 2017-08-04T16:38:27.925Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3033fdd10ba54f6f710,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3033fdd10ba54f6f70f, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:38:27.927Z,
  from: 2017-08-04T16:33:27.925Z,
  to: 2017-08-04T16:38:27.925Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a3033fdd10ba54f6f710,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3033fdd10ba54f6f70f, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:38:27.927Z,
  from: 2017-08-04T16:33:27.925Z,
  to: 2017-08-04T16:38:27.925Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:32.930Z 2017-08-04T16:38:32.930Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3083fdd10ba54f6f712,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3083fdd10ba54f6f711, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:38:32.935Z,
  from: 2017-08-04T16:33:32.930Z,
  to: 2017-08-04T16:38:32.930Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a3083fdd10ba54f6f712,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3083fdd10ba54f6f711, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:38:32.935Z,
  from: 2017-08-04T16:33:32.930Z,
  to: 2017-08-04T16:38:32.930Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 10583 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:33:37.937Z 2017-08-04T16:38:37.937Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a30d3fdd10ba54f6f714,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a30d3fdd10ba54f6f713, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:38:37.939Z,
  from: 2017-08-04T16:33:37.937Z,
  to: 2017-08-04T16:38:37.937Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:42.940Z 2017-08-04T16:38:42.940Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3123fdd10ba54f6f716,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3123fdd10ba54f6f715, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:38:42.942Z,
  from: 2017-08-04T16:33:42.940Z,
  to: 2017-08-04T16:38:42.940Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:47.941Z 2017-08-04T16:38:47.941Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3173fdd10ba54f6f718,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3173fdd10ba54f6f717, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:38:47.943Z,
  from: 2017-08-04T16:33:47.941Z,
  to: 2017-08-04T16:38:47.941Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:52.944Z 2017-08-04T16:38:52.944Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a31c3fdd10ba54f6f71a,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a31c3fdd10ba54f6f719, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:38:52.945Z,
  from: 2017-08-04T16:33:52.944Z,
  to: 2017-08-04T16:38:52.944Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:33:57.947Z 2017-08-04T16:38:57.947Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3213fdd10ba54f6f71c,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3213fdd10ba54f6f71b, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:38:57.949Z,
  from: 2017-08-04T16:33:57.947Z,
  to: 2017-08-04T16:38:57.947Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:34:02.950Z 2017-08-04T16:39:02.950Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3263fdd10ba54f6f71e,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3263fdd10ba54f6f71d, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:02.952Z,
  from: 2017-08-04T16:34:02.950Z,
  to: 2017-08-04T16:39:02.950Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:34:07.953Z 2017-08-04T16:39:07.953Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a32b3fdd10ba54f6f720,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a32b3fdd10ba54f6f71f, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:07.957Z,
  from: 2017-08-04T16:34:07.953Z,
  to: 2017-08-04T16:39:07.953Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:34:12.959Z 2017-08-04T16:39:12.959Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3303fdd10ba54f6f722,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3303fdd10ba54f6f721, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:12.961Z,
  from: 2017-08-04T16:34:12.959Z,
  to: 2017-08-04T16:39:12.959Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:34:17.962Z 2017-08-04T16:39:17.962Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3353fdd10ba54f6f724,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3353fdd10ba54f6f723, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:17.963Z,
  from: 2017-08-04T16:34:17.962Z,
  to: 2017-08-04T16:39:17.962Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:34:22.964Z 2017-08-04T16:39:22.964Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a33a3fdd10ba54f6f726,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a33a3fdd10ba54f6f725, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:22.966Z,
  from: 2017-08-04T16:34:22.964Z,
  to: 2017-08-04T16:39:22.964Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:34:27.966Z 2017-08-04T16:39:27.966Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a33f3fdd10ba54f6f728,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a33f3fdd10ba54f6f727, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:27.968Z,
  from: 2017-08-04T16:34:27.966Z,
  to: 2017-08-04T16:39:27.966Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:34:32.971Z 2017-08-04T16:39:32.971Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3443fdd10ba54f6f72a,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3443fdd10ba54f6f729, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:32.973Z,
  from: 2017-08-04T16:34:32.971Z,
  to: 2017-08-04T16:39:32.971Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 70591 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:34:37.972Z 2017-08-04T16:39:37.972Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3493fdd10ba54f6f72c,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3493fdd10ba54f6f72b, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:37.973Z,
  from: 2017-08-04T16:34:37.972Z,
  to: 2017-08-04T16:39:37.972Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:34:42.975Z 2017-08-04T16:39:42.975Z
info: updated turns for meeting: no
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:39:44.004Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDc4MywiZXhwIjoxNTg4MjY0NzgzLCJpc3MiOiJmZWF0aGVycyJ9.e7rQYDle61Wrwx4Owqwe9VzFTcrCPkOHAJ1ThcX3C4g
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:39:44.004Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDc4MywiZXhwIjoxNTg4MjY0NzgzLCJpc3MiOiJmZWF0aGVycyJ9.e7rQYDle61Wrwx4Owqwe9VzFTcrCPkOHAJ1ThcX3C4g' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'ma' ],
  lastUpdated: 2017-08-04T16:39:44.018Z } no
updated meeting with participants { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a3503fdd10ba54f6f72f,
  timestamp: 2017-08-04T16:39:44.024Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:34:47.978Z 2017-08-04T16:39:47.978Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3533fdd10ba54f6f731,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3533fdd10ba54f6f730, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:47.980Z,
  from: 2017-08-04T16:34:47.978Z,
  to: 2017-08-04T16:39:47.978Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T16:34:52.983Z 2017-08-04T16:39:52.983Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3583fdd10ba54f6f733,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3583fdd10ba54f6f732, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:52.986Z,
  from: 2017-08-04T16:34:52.983Z,
  to: 2017-08-04T16:39:52.983Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:39:53.215Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDc5MywiZXhwIjoxNTg4MjY0NzkzLCJpc3MiOiJmZWF0aGVycyJ9.nOaOjXjZD6jeuYrwGsDI1cfvJheCJgNSPqJDMHjy9yg
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:39:53.215Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDc5MywiZXhwIjoxNTg4MjY0NzkzLCJpc3MiOiJmZWF0aGVycyJ9.nOaOjXjZD6jeuYrwGsDI1cfvJheCJgNSPqJDMHjy9yg' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'ma' ],
  lastUpdated: 2017-08-04T16:39:53.228Z } no
updated meeting with participants { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a3593fdd10ba54f6f734,
  timestamp: 2017-08-04T16:39:53.234Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T16:34:57.983Z 2017-08-04T16:39:57.983Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a35d3fdd10ba54f6f736,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a35d3fdd10ba54f6f735, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:39:57.985Z,
  from: 2017-08-04T16:34:57.983Z,
  to: 2017-08-04T16:39:57.983Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:39:58.544Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDc5OCwiZXhwIjoxNTg4MjY0Nzk4LCJpc3MiOiJmZWF0aGVycyJ9.a9Ofy1t_AhfBlmkd4dBrodaFD8h6NOnH_e0-oa0uvd8
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:39:58.544Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDc5OCwiZXhwIjoxNTg4MjY0Nzk4LCJpc3MiOiJmZWF0aGVycyJ9.a9Ofy1t_AhfBlmkd4dBrodaFD8h6NOnH_e0-oa0uvd8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'ma' ],
  lastUpdated: 2017-08-04T16:39:58.571Z } no
updated meeting with participants { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a35e3fdd10ba54f6f737,
  timestamp: 2017-08-04T16:39:58.577Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:02.986Z 2017-08-04T16:40:02.986Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3623fdd10ba54f6f739,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3623fdd10ba54f6f738, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:40:02.989Z,
  from: 2017-08-04T16:35:02.986Z,
  to: 2017-08-04T16:40:02.986Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:07.992Z 2017-08-04T16:40:07.992Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3673fdd10ba54f6f73b,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3673fdd10ba54f6f73a, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:40:07.994Z,
  from: 2017-08-04T16:35:07.992Z,
  to: 2017-08-04T16:40:07.992Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:12.998Z 2017-08-04T16:40:12.998Z
info: updated turns for meeting: no
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:40:15.828Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDgxNSwiZXhwIjoxNTg4MjY0ODE1LCJpc3MiOiJmZWF0aGVycyJ9.0QqrnM7hYMWzg0Jk9QBvoprp26YiOu4-l4WqyGDW9cQ
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:40:15.828Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDgxNSwiZXhwIjoxNTg4MjY0ODE1LCJpc3MiOiJmZWF0aGVycyJ9.0QqrnM7hYMWzg0Jk9QBvoprp26YiOu4-l4WqyGDW9cQ' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'ma' ],
  lastUpdated: 2017-08-04T16:40:15.928Z } no
updated meeting with participants { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a36f3fdd10ba54f6f73e,
  timestamp: 2017-08-04T16:40:15.951Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:17.999Z 2017-08-04T16:40:17.999Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3723fdd10ba54f6f740,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3723fdd10ba54f6f73f, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:40:18.001Z,
  from: 2017-08-04T16:35:17.999Z,
  to: 2017-08-04T16:40:17.999Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:23.001Z 2017-08-04T16:40:23.001Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3773fdd10ba54f6f742,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3773fdd10ba54f6f741, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:40:23.003Z,
  from: 2017-08-04T16:35:23.001Z,
  to: 2017-08-04T16:40:23.001Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:28.002Z 2017-08-04T16:40:28.002Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a37c3fdd10ba54f6f744,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a37c3fdd10ba54f6f743, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:40:28.004Z,
  from: 2017-08-04T16:35:28.002Z,
  to: 2017-08-04T16:40:28.002Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:33.008Z 2017-08-04T16:40:33.008Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3813fdd10ba54f6f746,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3813fdd10ba54f6f745, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:40:33.010Z,
  from: 2017-08-04T16:35:33.008Z,
  to: 2017-08-04T16:40:33.008Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 130589 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:35:38.011Z 2017-08-04T16:40:38.011Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3863fdd10ba54f6f748,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3863fdd10ba54f6f747, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:40:38.012Z,
  from: 2017-08-04T16:35:38.011Z,
  to: 2017-08-04T16:40:38.011Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:43.012Z 2017-08-04T16:40:43.012Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a38b3fdd10ba54f6f74a,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a38b3fdd10ba54f6f749, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:40:43.013Z,
  from: 2017-08-04T16:35:43.012Z,
  to: 2017-08-04T16:40:43.012Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:48.016Z 2017-08-04T16:40:48.016Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3903fdd10ba54f6f74c,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984a3903fdd10ba54f6f74b, participant: 'ma', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:40:48.018Z,
  from: 2017-08-04T16:35:48.016Z,
  to: 2017-08-04T16:40:48.016Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:53.016Z 2017-08-04T16:40:53.016Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3953fdd10ba54f6f74d, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:40:53.021Z,
  from: 2017-08-04T16:35:53.016Z,
  to: 2017-08-04T16:40:53.016Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:35:58.021Z 2017-08-04T16:40:58.021Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a39a3fdd10ba54f6f74e, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:40:58.023Z,
  from: 2017-08-04T16:35:58.021Z,
  to: 2017-08-04T16:40:58.021Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:36:03.026Z 2017-08-04T16:41:03.027Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a39f3fdd10ba54f6f74f, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:03.028Z,
  from: 2017-08-04T16:36:03.026Z,
  to: 2017-08-04T16:41:03.027Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:36:08.031Z 2017-08-04T16:41:08.031Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3a43fdd10ba54f6f750, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:08.032Z,
  from: 2017-08-04T16:36:08.031Z,
  to: 2017-08-04T16:41:08.031Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:36:13.034Z 2017-08-04T16:41:13.034Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3a93fdd10ba54f6f751, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:13.040Z,
  from: 2017-08-04T16:36:13.034Z,
  to: 2017-08-04T16:41:13.034Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T16:36:18.038Z 2017-08-04T16:41:18.038Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3ae3fdd10ba54f6f752, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:18.040Z,
  from: 2017-08-04T16:36:18.038Z,
  to: 2017-08-04T16:41:18.038Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984a3ae3fdd10ba54f6f752, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:18.040Z,
  from: 2017-08-04T16:36:18.038Z,
  to: 2017-08-04T16:41:18.038Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=ma, name=ma, participants=[participant=jordan, participant=ma], meeting=no, meetingUrl=http://localhost:3001/?user=ma&room=no, consent=true, consentDate=2017-08-04T16:41:18.608Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDg3OCwiZXhwIjoxNTg4MjY0ODc4LCJpc3MiOiJmZWF0aGVycyJ9.qV4eggn00IvLrxq85m5LA_s4XyK1SBKCwLwu2rumCVI
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'ma',
     name: 'ma',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=ma&room=no',
     consent: true,
     consentDate: '2017-08-04T16:41:18.608Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDg3OCwiZXhwIjoxNTg4MjY0ODc4LCJpc3MiOiJmZWF0aGVycyJ9.qV4eggn00IvLrxq85m5LA_s4XyK1SBKCwLwu2rumCVI' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'ma' ]
patching meeting { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'ma' ]
info: not adding participant: { participants: [ 'jordan', 'ma' ],
  lastUpdated: 2017-08-04T16:41:18.748Z } no
updated meeting with participants { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a3ae3fdd10ba54f6f753,
  timestamp: 2017-08-04T16:41:18.763Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a3ae3fdd10ba54f6f753,
  timestamp: 2017-08-04T16:41:18.763Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:36:23.040Z 2017-08-04T16:41:23.040Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3b33fdd10ba54f6f754, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:23.042Z,
  from: 2017-08-04T16:36:23.040Z,
  to: 2017-08-04T16:41:23.040Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:36:28.043Z 2017-08-04T16:41:28.043Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3b83fdd10ba54f6f755, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:28.044Z,
  from: 2017-08-04T16:36:28.043Z,
  to: 2017-08-04T16:41:28.043Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T16:36:33.074Z 2017-08-04T16:41:33.074Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3bd3fdd10ba54f6f756, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:33.205Z,
  from: 2017-08-04T16:36:33.074Z,
  to: 2017-08-04T16:41:33.074Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984a3bd3fdd10ba54f6f756, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:33.205Z,
  from: 2017-08-04T16:36:33.074Z,
  to: 2017-08-04T16:41:33.074Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=ma, name=ma, participants=[participant=jordan, participant=ma], meeting=no, meetingUrl=http://localhost:3001/?user=ma&room=no, consent=true, consentDate=2017-08-04T16:41:33.334Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDg5MywiZXhwIjoxNTg4MjY0ODkzLCJpc3MiOiJmZWF0aGVycyJ9.iF5YR2lIQtX80pc3YR9jHGpg8fKxK4KYxNI0MjVoO8A
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'ma',
     name: 'ma',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=ma&room=no',
     consent: true,
     consentDate: '2017-08-04T16:41:33.334Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NDg5MywiZXhwIjoxNTg4MjY0ODkzLCJpc3MiOiJmZWF0aGVycyJ9.iF5YR2lIQtX80pc3YR9jHGpg8fKxK4KYxNI0MjVoO8A' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'ma' ]
patching meeting { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'ma' ]
info: not adding participant: { participants: [ 'jordan', 'ma' ],
  lastUpdated: 2017-08-04T16:41:33.375Z } no
updated meeting with participants { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a3bd3fdd10ba54f6f757,
  timestamp: 2017-08-04T16:41:33.384Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ma' ],
  _id: 5984a3bd3fdd10ba54f6f757,
  timestamp: 2017-08-04T16:41:33.384Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 190647 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:36:38.079Z 2017-08-04T16:41:38.079Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3c23fdd10ba54f6f758, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:38.084Z,
  from: 2017-08-04T16:36:38.079Z,
  to: 2017-08-04T16:41:38.079Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984a3c23fdd10ba54f6f758, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:38.084Z,
  from: 2017-08-04T16:36:38.079Z,
  to: 2017-08-04T16:41:38.079Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:36:43.084Z 2017-08-04T16:41:43.084Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3c73fdd10ba54f6f759, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:43.088Z,
  from: 2017-08-04T16:36:43.084Z,
  to: 2017-08-04T16:41:43.084Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984a3c73fdd10ba54f6f759, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:43.088Z,
  from: 2017-08-04T16:36:43.084Z,
  to: 2017-08-04T16:41:43.084Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:36:48.088Z 2017-08-04T16:41:48.088Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984a3cc3fdd10ba54f6f75a, participant: 'ma', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:41:48.090Z,
  from: 2017-08-04T16:36:48.088Z,
  to: 2017-08-04T16:41:48.088Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 8
2334931
2017-08-04T16:02:53.992Z
2017-08-04T16:41:48.923Z
2017-08-04T16:02:55.016Z
2260711
2017-08-04T16:04:08.212Z
2017-08-04T16:41:48.923Z
2017-08-04T16:04:09.113Z
2248987
2017-08-04T16:04:19.936Z
2017-08-04T16:41:48.923Z
2017-08-04T16:04:19.936Z
2227390
2017-08-04T16:04:41.533Z
2017-08-04T16:41:48.923Z
2017-08-04T16:04:41.533Z
2197686
2017-08-04T16:05:11.237Z
2017-08-04T16:41:48.923Z
2017-08-04T16:05:11.842Z
633171
2017-08-04T16:31:15.752Z
2017-08-04T16:41:48.923Z
2017-08-04T16:31:16.861Z
359364
2017-08-04T16:35:49.559Z
2017-08-04T16:41:48.923Z
2017-08-04T16:35:49.559Z
0
2017-08-04T16:41:48.923Z
2017-08-04T16:41:48.923Z
2017-08-04T16:41:48.923Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:36:53.094Z 2017-08-04T16:41:53.094Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3d13fdd10ba54f6f75d, participant: 'ma', turns: 0.5 },
     { _id: 5984a3d13fdd10ba54f6f75c,
       participant: 'jordan',
       turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:41:53.095Z,
  from: 2017-08-04T16:36:53.094Z,
  to: 2017-08-04T16:41:53.094Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:36:58.099Z 2017-08-04T16:41:58.099Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3d63fdd10ba54f6f75f, participant: 'ma', turns: 0.5 },
     { _id: 5984a3d63fdd10ba54f6f75e,
       participant: 'jordan',
       turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:41:58.101Z,
  from: 2017-08-04T16:36:58.099Z,
  to: 2017-08-04T16:41:58.099Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 9
2345416
2017-08-04T16:02:53.992Z
2017-08-04T16:41:59.408Z
2017-08-04T16:02:55.016Z
2271196
2017-08-04T16:04:08.212Z
2017-08-04T16:41:59.408Z
2017-08-04T16:04:09.113Z
2259472
2017-08-04T16:04:19.936Z
2017-08-04T16:41:59.408Z
2017-08-04T16:04:19.936Z
2237875
2017-08-04T16:04:41.533Z
2017-08-04T16:41:59.408Z
2017-08-04T16:04:41.533Z
2208171
2017-08-04T16:05:11.237Z
2017-08-04T16:41:59.408Z
2017-08-04T16:05:11.842Z
643656
2017-08-04T16:31:15.752Z
2017-08-04T16:41:59.408Z
2017-08-04T16:31:16.861Z
369849
2017-08-04T16:35:49.559Z
2017-08-04T16:41:59.408Z
2017-08-04T16:35:49.559Z
10485
2017-08-04T16:41:48.923Z
2017-08-04T16:41:59.408Z
2017-08-04T16:41:48.923Z
0
2017-08-04T16:41:59.408Z
2017-08-04T16:41:59.408Z
2017-08-04T16:41:59.408Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:37:03.104Z 2017-08-04T16:42:03.104Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3db3fdd10ba54f6f762,
       participant: 'ma',
       turns: 0.3333333333333333 },
     { _id: 5984a3db3fdd10ba54f6f761,
       participant: 'jordan',
       turns: 0.6666666666666666 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:03.106Z,
  from: 2017-08-04T16:37:03.104Z,
  to: 2017-08-04T16:42:03.104Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:37:08.109Z 2017-08-04T16:42:08.109Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3e03fdd10ba54f6f764,
       participant: 'ma',
       turns: 0.3333333333333333 },
     { _id: 5984a3e03fdd10ba54f6f763,
       participant: 'jordan',
       turns: 0.6666666666666666 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:08.110Z,
  from: 2017-08-04T16:37:08.109Z,
  to: 2017-08-04T16:42:08.109Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:37:13.110Z 2017-08-04T16:42:13.110Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3e53fdd10ba54f6f766,
       participant: 'ma',
       turns: 0.3333333333333333 },
     { _id: 5984a3e53fdd10ba54f6f765,
       participant: 'jordan',
       turns: 0.6666666666666666 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:13.112Z,
  from: 2017-08-04T16:37:13.110Z,
  to: 2017-08-04T16:42:13.110Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 10
2362196
2017-08-04T16:02:53.992Z
2017-08-04T16:42:16.188Z
2017-08-04T16:02:55.016Z
2287976
2017-08-04T16:04:08.212Z
2017-08-04T16:42:16.188Z
2017-08-04T16:04:09.113Z
2276252
2017-08-04T16:04:19.936Z
2017-08-04T16:42:16.188Z
2017-08-04T16:04:19.936Z
2254655
2017-08-04T16:04:41.533Z
2017-08-04T16:42:16.188Z
2017-08-04T16:04:41.533Z
2224951
2017-08-04T16:05:11.237Z
2017-08-04T16:42:16.188Z
2017-08-04T16:05:11.842Z
660436
2017-08-04T16:31:15.752Z
2017-08-04T16:42:16.188Z
2017-08-04T16:31:16.861Z
386629
2017-08-04T16:35:49.559Z
2017-08-04T16:42:16.188Z
2017-08-04T16:35:49.559Z
27265
2017-08-04T16:41:48.923Z
2017-08-04T16:42:16.188Z
2017-08-04T16:41:48.923Z
16780
2017-08-04T16:41:59.408Z
2017-08-04T16:42:16.188Z
2017-08-04T16:41:59.408Z
0
2017-08-04T16:42:16.188Z
2017-08-04T16:42:16.188Z
2017-08-04T16:42:16.657Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:37:18.114Z 2017-08-04T16:42:18.114Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3ea3fdd10ba54f6f769, participant: 'ma', turns: 0.25 },
     { _id: 5984a3ea3fdd10ba54f6f768,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:18.116Z,
  from: 2017-08-04T16:37:18.114Z,
  to: 2017-08-04T16:42:18.114Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:37:23.117Z 2017-08-04T16:42:23.117Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3ef3fdd10ba54f6f76b, participant: 'ma', turns: 0.25 },
     { _id: 5984a3ef3fdd10ba54f6f76a,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:23.120Z,
  from: 2017-08-04T16:37:23.117Z,
  to: 2017-08-04T16:42:23.117Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:37:28.119Z 2017-08-04T16:42:28.119Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3f43fdd10ba54f6f76d, participant: 'ma', turns: 0.25 },
     { _id: 5984a3f43fdd10ba54f6f76c,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:28.120Z,
  from: 2017-08-04T16:37:28.119Z,
  to: 2017-08-04T16:42:28.119Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:37:33.119Z 2017-08-04T16:42:33.119Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3f93fdd10ba54f6f76f, participant: 'ma', turns: 0.25 },
     { _id: 5984a3f93fdd10ba54f6f76e,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:33.121Z,
  from: 2017-08-04T16:37:33.119Z,
  to: 2017-08-04T16:42:33.119Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 16815 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:37:38.124Z 2017-08-04T16:42:38.124Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a3fe3fdd10ba54f6f771, participant: 'ma', turns: 0.25 },
     { _id: 5984a3fe3fdd10ba54f6f770,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:38.126Z,
  from: 2017-08-04T16:37:38.124Z,
  to: 2017-08-04T16:42:38.124Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:37:43.125Z 2017-08-04T16:42:43.125Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4033fdd10ba54f6f773, participant: 'ma', turns: 0.25 },
     { _id: 5984a4033fdd10ba54f6f772,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:43.127Z,
  from: 2017-08-04T16:37:43.125Z,
  to: 2017-08-04T16:42:43.125Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:37:48.128Z 2017-08-04T16:42:48.128Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4083fdd10ba54f6f775, participant: 'ma', turns: 0.25 },
     { _id: 5984a4083fdd10ba54f6f774,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:48.162Z,
  from: 2017-08-04T16:37:48.128Z,
  to: 2017-08-04T16:42:48.128Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:37:53.130Z 2017-08-04T16:42:53.130Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a40d3fdd10ba54f6f777, participant: 'ma', turns: 0.25 },
     { _id: 5984a40d3fdd10ba54f6f776,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:53.132Z,
  from: 2017-08-04T16:37:53.130Z,
  to: 2017-08-04T16:42:53.130Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:37:58.132Z 2017-08-04T16:42:58.132Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4123fdd10ba54f6f779, participant: 'ma', turns: 0.25 },
     { _id: 5984a4123fdd10ba54f6f778,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:42:58.136Z,
  from: 2017-08-04T16:37:58.132Z,
  to: 2017-08-04T16:42:58.132Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:03.135Z 2017-08-04T16:43:03.135Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4173fdd10ba54f6f77b, participant: 'ma', turns: 0.25 },
     { _id: 5984a4173fdd10ba54f6f77a,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:43:03.176Z,
  from: 2017-08-04T16:38:03.135Z,
  to: 2017-08-04T16:43:03.135Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:08.136Z 2017-08-04T16:43:08.136Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a41c3fdd10ba54f6f77d, participant: 'ma', turns: 0.25 },
     { _id: 5984a41c3fdd10ba54f6f77c,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:43:08.139Z,
  from: 2017-08-04T16:38:08.136Z,
  to: 2017-08-04T16:43:08.136Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:13.140Z 2017-08-04T16:43:13.140Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4213fdd10ba54f6f77f, participant: 'ma', turns: 0.25 },
     { _id: 5984a4213fdd10ba54f6f77e,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:43:13.147Z,
  from: 2017-08-04T16:38:13.140Z,
  to: 2017-08-04T16:43:13.140Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:18.145Z 2017-08-04T16:43:18.145Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4263fdd10ba54f6f781, participant: 'ma', turns: 0.25 },
     { _id: 5984a4263fdd10ba54f6f780,
       participant: 'jordan',
       turns: 0.75 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T16:43:18.147Z,
  from: 2017-08-04T16:38:18.145Z,
  to: 2017-08-04T16:43:18.145Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:23.149Z 2017-08-04T16:43:23.149Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a42b3fdd10ba54f6f782,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:43:23.151Z,
  from: 2017-08-04T16:38:23.149Z,
  to: 2017-08-04T16:43:23.149Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:28.153Z 2017-08-04T16:43:28.153Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4303fdd10ba54f6f783,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:43:28.157Z,
  from: 2017-08-04T16:38:28.153Z,
  to: 2017-08-04T16:43:28.153Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:33.159Z 2017-08-04T16:43:33.159Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4353fdd10ba54f6f784,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:43:33.161Z,
  from: 2017-08-04T16:38:33.159Z,
  to: 2017-08-04T16:43:33.159Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 76821 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:38:38.164Z 2017-08-04T16:43:38.164Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a43a3fdd10ba54f6f785,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:43:38.167Z,
  from: 2017-08-04T16:38:38.164Z,
  to: 2017-08-04T16:43:38.164Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:43.171Z 2017-08-04T16:43:43.171Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a43f3fdd10ba54f6f786,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:43:43.173Z,
  from: 2017-08-04T16:38:43.171Z,
  to: 2017-08-04T16:43:43.171Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:48.172Z 2017-08-04T16:43:48.172Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4443fdd10ba54f6f787,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:43:48.175Z,
  from: 2017-08-04T16:38:48.172Z,
  to: 2017-08-04T16:43:48.172Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:53.178Z 2017-08-04T16:43:53.178Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4493fdd10ba54f6f788,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:43:53.179Z,
  from: 2017-08-04T16:38:53.178Z,
  to: 2017-08-04T16:43:53.178Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:38:58.182Z 2017-08-04T16:43:58.182Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a44e3fdd10ba54f6f789,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:43:58.185Z,
  from: 2017-08-04T16:38:58.182Z,
  to: 2017-08-04T16:43:58.182Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:03.183Z 2017-08-04T16:44:03.183Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4533fdd10ba54f6f78a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:03.185Z,
  from: 2017-08-04T16:39:03.183Z,
  to: 2017-08-04T16:44:03.183Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:08.184Z 2017-08-04T16:44:08.184Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4583fdd10ba54f6f78b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:08.188Z,
  from: 2017-08-04T16:39:08.184Z,
  to: 2017-08-04T16:44:08.184Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:13.187Z 2017-08-04T16:44:13.187Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a45d3fdd10ba54f6f78c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:13.189Z,
  from: 2017-08-04T16:39:13.187Z,
  to: 2017-08-04T16:44:13.187Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:18.190Z 2017-08-04T16:44:18.190Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4623fdd10ba54f6f78d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:18.191Z,
  from: 2017-08-04T16:39:18.190Z,
  to: 2017-08-04T16:44:18.190Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:23.192Z 2017-08-04T16:44:23.192Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4673fdd10ba54f6f78e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:23.194Z,
  from: 2017-08-04T16:39:23.192Z,
  to: 2017-08-04T16:44:23.192Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:28.195Z 2017-08-04T16:44:28.195Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a46c3fdd10ba54f6f78f,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:28.197Z,
  from: 2017-08-04T16:39:28.195Z,
  to: 2017-08-04T16:44:28.195Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:33.198Z 2017-08-04T16:44:33.198Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4713fdd10ba54f6f790,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:33.200Z,
  from: 2017-08-04T16:39:33.198Z,
  to: 2017-08-04T16:44:33.198Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 136824 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:39:38.199Z 2017-08-04T16:44:38.199Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4763fdd10ba54f6f791,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:38.202Z,
  from: 2017-08-04T16:39:38.199Z,
  to: 2017-08-04T16:44:38.199Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:43.203Z 2017-08-04T16:44:43.203Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a47b3fdd10ba54f6f792,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:43.206Z,
  from: 2017-08-04T16:39:43.203Z,
  to: 2017-08-04T16:44:43.203Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:48.206Z 2017-08-04T16:44:48.206Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4803fdd10ba54f6f793,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:48.208Z,
  from: 2017-08-04T16:39:48.206Z,
  to: 2017-08-04T16:44:48.206Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:53.210Z 2017-08-04T16:44:53.210Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4853fdd10ba54f6f794,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:53.212Z,
  from: 2017-08-04T16:39:53.210Z,
  to: 2017-08-04T16:44:53.210Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:39:58.211Z 2017-08-04T16:44:58.211Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a48a3fdd10ba54f6f795,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:44:58.213Z,
  from: 2017-08-04T16:39:58.211Z,
  to: 2017-08-04T16:44:58.211Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:40:03.217Z 2017-08-04T16:45:03.217Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a48f3fdd10ba54f6f796,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:03.219Z,
  from: 2017-08-04T16:40:03.217Z,
  to: 2017-08-04T16:45:03.217Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:40:08.222Z 2017-08-04T16:45:08.222Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4943fdd10ba54f6f797,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:08.224Z,
  from: 2017-08-04T16:40:08.222Z,
  to: 2017-08-04T16:45:08.222Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:40:13.225Z 2017-08-04T16:45:13.225Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4993fdd10ba54f6f798,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:13.227Z,
  from: 2017-08-04T16:40:13.225Z,
  to: 2017-08-04T16:45:13.225Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:40:18.231Z 2017-08-04T16:45:18.231Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a49e3fdd10ba54f6f799,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:18.234Z,
  from: 2017-08-04T16:40:18.231Z,
  to: 2017-08-04T16:45:18.231Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:40:23.234Z 2017-08-04T16:45:23.234Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4a33fdd10ba54f6f79a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:23.236Z,
  from: 2017-08-04T16:40:23.234Z,
  to: 2017-08-04T16:45:23.234Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:40:28.239Z 2017-08-04T16:45:28.239Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4a83fdd10ba54f6f79b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:28.242Z,
  from: 2017-08-04T16:40:28.239Z,
  to: 2017-08-04T16:45:28.239Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:40:33.242Z 2017-08-04T16:45:33.242Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4ad3fdd10ba54f6f79c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:33.243Z,
  from: 2017-08-04T16:40:33.242Z,
  to: 2017-08-04T16:45:33.242Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 196831 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:40:38.244Z 2017-08-04T16:45:38.244Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4b23fdd10ba54f6f79d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:38.246Z,
  from: 2017-08-04T16:40:38.244Z,
  to: 2017-08-04T16:45:38.244Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 11
2563778
2017-08-04T16:02:53.992Z
2017-08-04T16:45:37.770Z
2017-08-04T16:02:55.016Z
2489558
2017-08-04T16:04:08.212Z
2017-08-04T16:45:37.770Z
2017-08-04T16:04:09.113Z
2477834
2017-08-04T16:04:19.936Z
2017-08-04T16:45:37.770Z
2017-08-04T16:04:19.936Z
2456237
2017-08-04T16:04:41.533Z
2017-08-04T16:45:37.770Z
2017-08-04T16:04:41.533Z
2426533
2017-08-04T16:05:11.237Z
2017-08-04T16:45:37.770Z
2017-08-04T16:05:11.842Z
862018
2017-08-04T16:31:15.752Z
2017-08-04T16:45:37.770Z
2017-08-04T16:31:16.861Z
588211
2017-08-04T16:35:49.559Z
2017-08-04T16:45:37.770Z
2017-08-04T16:35:49.559Z
228847
2017-08-04T16:41:48.923Z
2017-08-04T16:45:37.770Z
2017-08-04T16:41:48.923Z
218362
2017-08-04T16:41:59.408Z
2017-08-04T16:45:37.770Z
2017-08-04T16:41:59.408Z
201582
2017-08-04T16:42:16.188Z
2017-08-04T16:45:37.770Z
2017-08-04T16:42:16.657Z
0
2017-08-04T16:45:37.770Z
2017-08-04T16:45:37.770Z
2017-08-04T16:45:37.983Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 12
2567191
2017-08-04T16:02:53.992Z
2017-08-04T16:45:41.183Z
2017-08-04T16:02:55.016Z
2492971
2017-08-04T16:04:08.212Z
2017-08-04T16:45:41.183Z
2017-08-04T16:04:09.113Z
2481247
2017-08-04T16:04:19.936Z
2017-08-04T16:45:41.183Z
2017-08-04T16:04:19.936Z
2459650
2017-08-04T16:04:41.533Z
2017-08-04T16:45:41.183Z
2017-08-04T16:04:41.533Z
2429946
2017-08-04T16:05:11.237Z
2017-08-04T16:45:41.183Z
2017-08-04T16:05:11.842Z
865431
2017-08-04T16:31:15.752Z
2017-08-04T16:45:41.183Z
2017-08-04T16:31:16.861Z
591624
2017-08-04T16:35:49.559Z
2017-08-04T16:45:41.183Z
2017-08-04T16:35:49.559Z
232260
2017-08-04T16:41:48.923Z
2017-08-04T16:45:41.183Z
2017-08-04T16:41:48.923Z
221775
2017-08-04T16:41:59.408Z
2017-08-04T16:45:41.183Z
2017-08-04T16:41:59.408Z
204995
2017-08-04T16:42:16.188Z
2017-08-04T16:45:41.183Z
2017-08-04T16:42:16.657Z
3413
2017-08-04T16:45:37.770Z
2017-08-04T16:45:41.183Z
2017-08-04T16:45:37.983Z
0
2017-08-04T16:45:41.183Z
2017-08-04T16:45:41.183Z
2017-08-04T16:45:41.268Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:40:43.247Z 2017-08-04T16:45:43.247Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4b73fdd10ba54f6f7a0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:43.249Z,
  from: 2017-08-04T16:40:43.247Z,
  to: 2017-08-04T16:45:43.247Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 13
2568855
2017-08-04T16:02:53.992Z
2017-08-04T16:45:42.847Z
2017-08-04T16:02:55.016Z
2494635
2017-08-04T16:04:08.212Z
2017-08-04T16:45:42.847Z
2017-08-04T16:04:09.113Z
2482911
2017-08-04T16:04:19.936Z
2017-08-04T16:45:42.847Z
2017-08-04T16:04:19.936Z
2461314
2017-08-04T16:04:41.533Z
2017-08-04T16:45:42.847Z
2017-08-04T16:04:41.533Z
2431610
2017-08-04T16:05:11.237Z
2017-08-04T16:45:42.847Z
2017-08-04T16:05:11.842Z
867095
2017-08-04T16:31:15.752Z
2017-08-04T16:45:42.847Z
2017-08-04T16:31:16.861Z
593288
2017-08-04T16:35:49.559Z
2017-08-04T16:45:42.847Z
2017-08-04T16:35:49.559Z
233924
2017-08-04T16:41:48.923Z
2017-08-04T16:45:42.847Z
2017-08-04T16:41:48.923Z
223439
2017-08-04T16:41:59.408Z
2017-08-04T16:45:42.847Z
2017-08-04T16:41:59.408Z
206659
2017-08-04T16:42:16.188Z
2017-08-04T16:45:42.847Z
2017-08-04T16:42:16.657Z
5077
2017-08-04T16:45:37.770Z
2017-08-04T16:45:42.847Z
2017-08-04T16:45:37.983Z
1664
2017-08-04T16:45:41.183Z
2017-08-04T16:45:42.847Z
2017-08-04T16:45:41.268Z
0
2017-08-04T16:45:42.847Z
2017-08-04T16:45:42.847Z
2017-08-04T16:45:42.847Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 14
2570605
2017-08-04T16:02:53.992Z
2017-08-04T16:45:44.597Z
2017-08-04T16:02:55.016Z
2496385
2017-08-04T16:04:08.212Z
2017-08-04T16:45:44.597Z
2017-08-04T16:04:09.113Z
2484661
2017-08-04T16:04:19.936Z
2017-08-04T16:45:44.597Z
2017-08-04T16:04:19.936Z
2463064
2017-08-04T16:04:41.533Z
2017-08-04T16:45:44.597Z
2017-08-04T16:04:41.533Z
2433360
2017-08-04T16:05:11.237Z
2017-08-04T16:45:44.597Z
2017-08-04T16:05:11.842Z
868845
2017-08-04T16:31:15.752Z
2017-08-04T16:45:44.597Z
2017-08-04T16:31:16.861Z
595038
2017-08-04T16:35:49.559Z
2017-08-04T16:45:44.597Z
2017-08-04T16:35:49.559Z
235674
2017-08-04T16:41:48.923Z
2017-08-04T16:45:44.597Z
2017-08-04T16:41:48.923Z
225189
2017-08-04T16:41:59.408Z
2017-08-04T16:45:44.597Z
2017-08-04T16:41:59.408Z
208409
2017-08-04T16:42:16.188Z
2017-08-04T16:45:44.597Z
2017-08-04T16:42:16.657Z
6827
2017-08-04T16:45:37.770Z
2017-08-04T16:45:44.597Z
2017-08-04T16:45:37.983Z
3414
2017-08-04T16:45:41.183Z
2017-08-04T16:45:44.597Z
2017-08-04T16:45:41.268Z
1750
2017-08-04T16:45:42.847Z
2017-08-04T16:45:44.597Z
2017-08-04T16:45:42.847Z
0
2017-08-04T16:45:44.597Z
2017-08-04T16:45:44.597Z
2017-08-04T16:45:44.597Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:40:48.251Z 2017-08-04T16:45:48.251Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4bc3fdd10ba54f6f7a3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:48.253Z,
  from: 2017-08-04T16:40:48.251Z,
  to: 2017-08-04T16:45:48.251Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:40:53.255Z 2017-08-04T16:45:53.255Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4c13fdd10ba54f6f7a4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:53.258Z,
  from: 2017-08-04T16:40:53.255Z,
  to: 2017-08-04T16:45:53.255Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:40:58.261Z 2017-08-04T16:45:58.261Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4c63fdd10ba54f6f7a5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:45:58.263Z,
  from: 2017-08-04T16:40:58.261Z,
  to: 2017-08-04T16:45:58.261Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:03.263Z 2017-08-04T16:46:03.263Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4cb3fdd10ba54f6f7a6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:03.266Z,
  from: 2017-08-04T16:41:03.263Z,
  to: 2017-08-04T16:46:03.263Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:08.268Z 2017-08-04T16:46:08.268Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4d03fdd10ba54f6f7a7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:08.272Z,
  from: 2017-08-04T16:41:08.268Z,
  to: 2017-08-04T16:46:08.268Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 15
2595177
2017-08-04T16:02:53.992Z
2017-08-04T16:46:09.169Z
2017-08-04T16:02:55.016Z
2520957
2017-08-04T16:04:08.212Z
2017-08-04T16:46:09.169Z
2017-08-04T16:04:09.113Z
2509233
2017-08-04T16:04:19.936Z
2017-08-04T16:46:09.169Z
2017-08-04T16:04:19.936Z
2487636
2017-08-04T16:04:41.533Z
2017-08-04T16:46:09.169Z
2017-08-04T16:04:41.533Z
2457932
2017-08-04T16:05:11.237Z
2017-08-04T16:46:09.169Z
2017-08-04T16:05:11.842Z
893417
2017-08-04T16:31:15.752Z
2017-08-04T16:46:09.169Z
2017-08-04T16:31:16.861Z
619610
2017-08-04T16:35:49.559Z
2017-08-04T16:46:09.169Z
2017-08-04T16:35:49.559Z
260246
2017-08-04T16:41:48.923Z
2017-08-04T16:46:09.169Z
2017-08-04T16:41:48.923Z
249761
2017-08-04T16:41:59.408Z
2017-08-04T16:46:09.169Z
2017-08-04T16:41:59.408Z
232981
2017-08-04T16:42:16.188Z
2017-08-04T16:46:09.169Z
2017-08-04T16:42:16.657Z
31399
2017-08-04T16:45:37.770Z
2017-08-04T16:46:09.169Z
2017-08-04T16:45:37.983Z
27986
2017-08-04T16:45:41.183Z
2017-08-04T16:46:09.169Z
2017-08-04T16:45:41.268Z
26322
2017-08-04T16:45:42.847Z
2017-08-04T16:46:09.169Z
2017-08-04T16:45:42.847Z
24572
2017-08-04T16:45:44.597Z
2017-08-04T16:46:09.169Z
2017-08-04T16:45:44.597Z
0
2017-08-04T16:46:09.169Z
2017-08-04T16:46:09.169Z
2017-08-04T16:46:09.169Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:41:13.273Z 2017-08-04T16:46:13.273Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4d53fdd10ba54f6f7a9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:13.277Z,
  from: 2017-08-04T16:41:13.273Z,
  to: 2017-08-04T16:46:13.273Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:18.279Z 2017-08-04T16:46:18.279Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4da3fdd10ba54f6f7aa,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:18.281Z,
  from: 2017-08-04T16:41:18.279Z,
  to: 2017-08-04T16:46:18.279Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:23.283Z 2017-08-04T16:46:23.283Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4df3fdd10ba54f6f7ab,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:23.286Z,
  from: 2017-08-04T16:41:23.283Z,
  to: 2017-08-04T16:46:23.283Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:28.286Z 2017-08-04T16:46:28.286Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4e43fdd10ba54f6f7ac,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:28.297Z,
  from: 2017-08-04T16:41:28.286Z,
  to: 2017-08-04T16:46:28.286Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:33.296Z 2017-08-04T16:46:33.296Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4e93fdd10ba54f6f7ad,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:33.298Z,
  from: 2017-08-04T16:41:33.296Z,
  to: 2017-08-04T16:46:33.296Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 24321 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:41:38.301Z 2017-08-04T16:46:38.301Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4ee3fdd10ba54f6f7ae,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:38.303Z,
  from: 2017-08-04T16:41:38.301Z,
  to: 2017-08-04T16:46:38.301Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:43.303Z 2017-08-04T16:46:43.303Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4f33fdd10ba54f6f7af,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:43.305Z,
  from: 2017-08-04T16:41:43.303Z,
  to: 2017-08-04T16:46:43.303Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:48.305Z 2017-08-04T16:46:48.305Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4f83fdd10ba54f6f7b0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:48.308Z,
  from: 2017-08-04T16:41:48.305Z,
  to: 2017-08-04T16:46:48.305Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:53.312Z 2017-08-04T16:46:53.312Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a4fd3fdd10ba54f6f7b1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:53.314Z,
  from: 2017-08-04T16:41:53.312Z,
  to: 2017-08-04T16:46:53.312Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:41:58.312Z 2017-08-04T16:46:58.312Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5023fdd10ba54f6f7b2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:46:58.314Z,
  from: 2017-08-04T16:41:58.312Z,
  to: 2017-08-04T16:46:58.312Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:42:03.314Z 2017-08-04T16:47:03.314Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5073fdd10ba54f6f7b3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:03.316Z,
  from: 2017-08-04T16:42:03.314Z,
  to: 2017-08-04T16:47:03.314Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:42:08.317Z 2017-08-04T16:47:08.317Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a50c3fdd10ba54f6f7b4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:08.320Z,
  from: 2017-08-04T16:42:08.317Z,
  to: 2017-08-04T16:47:08.317Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:42:13.322Z 2017-08-04T16:47:13.322Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5113fdd10ba54f6f7b5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:13.324Z,
  from: 2017-08-04T16:42:13.322Z,
  to: 2017-08-04T16:47:13.322Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:42:18.327Z 2017-08-04T16:47:18.327Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5163fdd10ba54f6f7b6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:18.330Z,
  from: 2017-08-04T16:42:18.327Z,
  to: 2017-08-04T16:47:18.327Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 16
2664229
2017-08-04T16:02:53.992Z
2017-08-04T16:47:18.221Z
2017-08-04T16:02:55.016Z
2590009
2017-08-04T16:04:08.212Z
2017-08-04T16:47:18.221Z
2017-08-04T16:04:09.113Z
2578285
2017-08-04T16:04:19.936Z
2017-08-04T16:47:18.221Z
2017-08-04T16:04:19.936Z
2556688
2017-08-04T16:04:41.533Z
2017-08-04T16:47:18.221Z
2017-08-04T16:04:41.533Z
2526984
2017-08-04T16:05:11.237Z
2017-08-04T16:47:18.221Z
2017-08-04T16:05:11.842Z
962469
2017-08-04T16:31:15.752Z
2017-08-04T16:47:18.221Z
2017-08-04T16:31:16.861Z
688662
2017-08-04T16:35:49.559Z
2017-08-04T16:47:18.221Z
2017-08-04T16:35:49.559Z
329298
2017-08-04T16:41:48.923Z
2017-08-04T16:47:18.221Z
2017-08-04T16:41:48.923Z
318813
2017-08-04T16:41:59.408Z
2017-08-04T16:47:18.221Z
2017-08-04T16:41:59.408Z
302033
2017-08-04T16:42:16.188Z
2017-08-04T16:47:18.221Z
2017-08-04T16:42:16.657Z
100451
2017-08-04T16:45:37.770Z
2017-08-04T16:47:18.221Z
2017-08-04T16:45:37.983Z
97038
2017-08-04T16:45:41.183Z
2017-08-04T16:47:18.221Z
2017-08-04T16:45:41.268Z
95374
2017-08-04T16:45:42.847Z
2017-08-04T16:47:18.221Z
2017-08-04T16:45:42.847Z
93624
2017-08-04T16:45:44.597Z
2017-08-04T16:47:18.221Z
2017-08-04T16:45:44.597Z
69052
2017-08-04T16:46:09.169Z
2017-08-04T16:47:18.221Z
2017-08-04T16:46:09.169Z
0
2017-08-04T16:47:18.221Z
2017-08-04T16:47:18.221Z
2017-08-04T16:47:19.117Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:42:23.331Z 2017-08-04T16:47:23.331Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a51b3fdd10ba54f6f7b8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:23.333Z,
  from: 2017-08-04T16:42:23.331Z,
  to: 2017-08-04T16:47:23.331Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:42:28.333Z 2017-08-04T16:47:28.333Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5203fdd10ba54f6f7b9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:28.335Z,
  from: 2017-08-04T16:42:28.333Z,
  to: 2017-08-04T16:47:28.333Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:42:33.336Z 2017-08-04T16:47:33.336Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5253fdd10ba54f6f7ba,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:33.338Z,
  from: 2017-08-04T16:42:33.336Z,
  to: 2017-08-04T16:47:33.336Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 14377 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: utterances found: 17
2680000
2017-08-04T16:02:53.992Z
2017-08-04T16:47:33.992Z
2017-08-04T16:02:55.016Z
2605780
2017-08-04T16:04:08.212Z
2017-08-04T16:47:33.992Z
2017-08-04T16:04:09.113Z
2594056
2017-08-04T16:04:19.936Z
2017-08-04T16:47:33.992Z
2017-08-04T16:04:19.936Z
2572459
2017-08-04T16:04:41.533Z
2017-08-04T16:47:33.992Z
2017-08-04T16:04:41.533Z
2542755
2017-08-04T16:05:11.237Z
2017-08-04T16:47:33.992Z
2017-08-04T16:05:11.842Z
978240
2017-08-04T16:31:15.752Z
2017-08-04T16:47:33.992Z
2017-08-04T16:31:16.861Z
704433
2017-08-04T16:35:49.559Z
2017-08-04T16:47:33.992Z
2017-08-04T16:35:49.559Z
345069
2017-08-04T16:41:48.923Z
2017-08-04T16:47:33.992Z
2017-08-04T16:41:48.923Z
334584
2017-08-04T16:41:59.408Z
2017-08-04T16:47:33.992Z
2017-08-04T16:41:59.408Z
317804
2017-08-04T16:42:16.188Z
2017-08-04T16:47:33.992Z
2017-08-04T16:42:16.657Z
116222
2017-08-04T16:45:37.770Z
2017-08-04T16:47:33.992Z
2017-08-04T16:45:37.983Z
112809
2017-08-04T16:45:41.183Z
2017-08-04T16:47:33.992Z
2017-08-04T16:45:41.268Z
111145
2017-08-04T16:45:42.847Z
2017-08-04T16:47:33.992Z
2017-08-04T16:45:42.847Z
109395
2017-08-04T16:45:44.597Z
2017-08-04T16:47:33.992Z
2017-08-04T16:45:44.597Z
84823
2017-08-04T16:46:09.169Z
2017-08-04T16:47:33.992Z
2017-08-04T16:46:09.169Z
15771
2017-08-04T16:47:18.221Z
2017-08-04T16:47:33.992Z
2017-08-04T16:47:19.117Z
0
2017-08-04T16:47:33.992Z
2017-08-04T16:47:33.992Z
2017-08-04T16:47:33.992Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 18
2680811
2017-08-04T16:02:53.992Z
2017-08-04T16:47:34.803Z
2017-08-04T16:02:55.016Z
2606591
2017-08-04T16:04:08.212Z
2017-08-04T16:47:34.803Z
2017-08-04T16:04:09.113Z
2594867
2017-08-04T16:04:19.936Z
2017-08-04T16:47:34.803Z
2017-08-04T16:04:19.936Z
2573270
2017-08-04T16:04:41.533Z
2017-08-04T16:47:34.803Z
2017-08-04T16:04:41.533Z
2543566
2017-08-04T16:05:11.237Z
2017-08-04T16:47:34.803Z
2017-08-04T16:05:11.842Z
979051
2017-08-04T16:31:15.752Z
2017-08-04T16:47:34.803Z
2017-08-04T16:31:16.861Z
705244
2017-08-04T16:35:49.559Z
2017-08-04T16:47:34.803Z
2017-08-04T16:35:49.559Z
345880
2017-08-04T16:41:48.923Z
2017-08-04T16:47:34.803Z
2017-08-04T16:41:48.923Z
335395
2017-08-04T16:41:59.408Z
2017-08-04T16:47:34.803Z
2017-08-04T16:41:59.408Z
318615
2017-08-04T16:42:16.188Z
2017-08-04T16:47:34.803Z
2017-08-04T16:42:16.657Z
117033
2017-08-04T16:45:37.770Z
2017-08-04T16:47:34.803Z
2017-08-04T16:45:37.983Z
113620
2017-08-04T16:45:41.183Z
2017-08-04T16:47:34.803Z
2017-08-04T16:45:41.268Z
111956
2017-08-04T16:45:42.847Z
2017-08-04T16:47:34.803Z
2017-08-04T16:45:42.847Z
110206
2017-08-04T16:45:44.597Z
2017-08-04T16:47:34.803Z
2017-08-04T16:45:44.597Z
85634
2017-08-04T16:46:09.169Z
2017-08-04T16:47:34.803Z
2017-08-04T16:46:09.169Z
16582
2017-08-04T16:47:18.221Z
2017-08-04T16:47:34.803Z
2017-08-04T16:47:19.117Z
811
2017-08-04T16:47:33.992Z
2017-08-04T16:47:34.803Z
2017-08-04T16:47:33.992Z
0
2017-08-04T16:47:34.803Z
2017-08-04T16:47:34.803Z
2017-08-04T16:47:35.368Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:42:38.339Z 2017-08-04T16:47:38.339Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a52a3fdd10ba54f6f7bd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:38.341Z,
  from: 2017-08-04T16:42:38.339Z,
  to: 2017-08-04T16:47:38.339Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 19
2683979
2017-08-04T16:02:53.992Z
2017-08-04T16:47:37.971Z
2017-08-04T16:02:55.016Z
2609759
2017-08-04T16:04:08.212Z
2017-08-04T16:47:37.971Z
2017-08-04T16:04:09.113Z
2598035
2017-08-04T16:04:19.936Z
2017-08-04T16:47:37.971Z
2017-08-04T16:04:19.936Z
2576438
2017-08-04T16:04:41.533Z
2017-08-04T16:47:37.971Z
2017-08-04T16:04:41.533Z
2546734
2017-08-04T16:05:11.237Z
2017-08-04T16:47:37.971Z
2017-08-04T16:05:11.842Z
982219
2017-08-04T16:31:15.752Z
2017-08-04T16:47:37.971Z
2017-08-04T16:31:16.861Z
708412
2017-08-04T16:35:49.559Z
2017-08-04T16:47:37.971Z
2017-08-04T16:35:49.559Z
349048
2017-08-04T16:41:48.923Z
2017-08-04T16:47:37.971Z
2017-08-04T16:41:48.923Z
338563
2017-08-04T16:41:59.408Z
2017-08-04T16:47:37.971Z
2017-08-04T16:41:59.408Z
321783
2017-08-04T16:42:16.188Z
2017-08-04T16:47:37.971Z
2017-08-04T16:42:16.657Z
120201
2017-08-04T16:45:37.770Z
2017-08-04T16:47:37.971Z
2017-08-04T16:45:37.983Z
116788
2017-08-04T16:45:41.183Z
2017-08-04T16:47:37.971Z
2017-08-04T16:45:41.268Z
115124
2017-08-04T16:45:42.847Z
2017-08-04T16:47:37.971Z
2017-08-04T16:45:42.847Z
113374
2017-08-04T16:45:44.597Z
2017-08-04T16:47:37.971Z
2017-08-04T16:45:44.597Z
88802
2017-08-04T16:46:09.169Z
2017-08-04T16:47:37.971Z
2017-08-04T16:46:09.169Z
19750
2017-08-04T16:47:18.221Z
2017-08-04T16:47:37.971Z
2017-08-04T16:47:19.117Z
3979
2017-08-04T16:47:33.992Z
2017-08-04T16:47:37.971Z
2017-08-04T16:47:33.992Z
3168
2017-08-04T16:47:34.803Z
2017-08-04T16:47:37.971Z
2017-08-04T16:47:35.368Z
0
2017-08-04T16:47:37.971Z
2017-08-04T16:47:37.971Z
2017-08-04T16:47:38.227Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:42:43.340Z 2017-08-04T16:47:43.340Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a52f3fdd10ba54f6f7bf,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:43.343Z,
  from: 2017-08-04T16:42:43.340Z,
  to: 2017-08-04T16:47:43.340Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:42:48.344Z 2017-08-04T16:47:48.345Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5343fdd10ba54f6f7c0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:48.347Z,
  from: 2017-08-04T16:42:48.344Z,
  to: 2017-08-04T16:47:48.345Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 20
2693798
2017-08-04T16:02:53.992Z
2017-08-04T16:47:47.790Z
2017-08-04T16:02:55.016Z
2619578
2017-08-04T16:04:08.212Z
2017-08-04T16:47:47.790Z
2017-08-04T16:04:09.113Z
2607854
2017-08-04T16:04:19.936Z
2017-08-04T16:47:47.790Z
2017-08-04T16:04:19.936Z
2586257
2017-08-04T16:04:41.533Z
2017-08-04T16:47:47.790Z
2017-08-04T16:04:41.533Z
2556553
2017-08-04T16:05:11.237Z
2017-08-04T16:47:47.790Z
2017-08-04T16:05:11.842Z
992038
2017-08-04T16:31:15.752Z
2017-08-04T16:47:47.790Z
2017-08-04T16:31:16.861Z
718231
2017-08-04T16:35:49.559Z
2017-08-04T16:47:47.790Z
2017-08-04T16:35:49.559Z
358867
2017-08-04T16:41:48.923Z
2017-08-04T16:47:47.790Z
2017-08-04T16:41:48.923Z
348382
2017-08-04T16:41:59.408Z
2017-08-04T16:47:47.790Z
2017-08-04T16:41:59.408Z
331602
2017-08-04T16:42:16.188Z
2017-08-04T16:47:47.790Z
2017-08-04T16:42:16.657Z
130020
2017-08-04T16:45:37.770Z
2017-08-04T16:47:47.790Z
2017-08-04T16:45:37.983Z
126607
2017-08-04T16:45:41.183Z
2017-08-04T16:47:47.790Z
2017-08-04T16:45:41.268Z
124943
2017-08-04T16:45:42.847Z
2017-08-04T16:47:47.790Z
2017-08-04T16:45:42.847Z
123193
2017-08-04T16:45:44.597Z
2017-08-04T16:47:47.790Z
2017-08-04T16:45:44.597Z
98621
2017-08-04T16:46:09.169Z
2017-08-04T16:47:47.790Z
2017-08-04T16:46:09.169Z
29569
2017-08-04T16:47:18.221Z
2017-08-04T16:47:47.790Z
2017-08-04T16:47:19.117Z
13798
2017-08-04T16:47:33.992Z
2017-08-04T16:47:47.790Z
2017-08-04T16:47:33.992Z
12987
2017-08-04T16:47:34.803Z
2017-08-04T16:47:47.790Z
2017-08-04T16:47:35.368Z
9819
2017-08-04T16:47:37.971Z
2017-08-04T16:47:47.790Z
2017-08-04T16:47:38.227Z
0
2017-08-04T16:47:47.790Z
2017-08-04T16:47:47.790Z
2017-08-04T16:47:49.155Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:42:53.347Z 2017-08-04T16:47:53.347Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5393fdd10ba54f6f7c2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:53.350Z,
  from: 2017-08-04T16:42:53.347Z,
  to: 2017-08-04T16:47:53.347Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 21
2698022
2017-08-04T16:02:53.992Z
2017-08-04T16:47:52.014Z
2017-08-04T16:02:55.016Z
2623802
2017-08-04T16:04:08.212Z
2017-08-04T16:47:52.014Z
2017-08-04T16:04:09.113Z
2612078
2017-08-04T16:04:19.936Z
2017-08-04T16:47:52.014Z
2017-08-04T16:04:19.936Z
2590481
2017-08-04T16:04:41.533Z
2017-08-04T16:47:52.014Z
2017-08-04T16:04:41.533Z
2560777
2017-08-04T16:05:11.237Z
2017-08-04T16:47:52.014Z
2017-08-04T16:05:11.842Z
996262
2017-08-04T16:31:15.752Z
2017-08-04T16:47:52.014Z
2017-08-04T16:31:16.861Z
722455
2017-08-04T16:35:49.559Z
2017-08-04T16:47:52.014Z
2017-08-04T16:35:49.559Z
363091
2017-08-04T16:41:48.923Z
2017-08-04T16:47:52.014Z
2017-08-04T16:41:48.923Z
352606
2017-08-04T16:41:59.408Z
2017-08-04T16:47:52.014Z
2017-08-04T16:41:59.408Z
335826
2017-08-04T16:42:16.188Z
2017-08-04T16:47:52.014Z
2017-08-04T16:42:16.657Z
134244
2017-08-04T16:45:37.770Z
2017-08-04T16:47:52.014Z
2017-08-04T16:45:37.983Z
130831
2017-08-04T16:45:41.183Z
2017-08-04T16:47:52.014Z
2017-08-04T16:45:41.268Z
129167
2017-08-04T16:45:42.847Z
2017-08-04T16:47:52.014Z
2017-08-04T16:45:42.847Z
127417
2017-08-04T16:45:44.597Z
2017-08-04T16:47:52.014Z
2017-08-04T16:45:44.597Z
102845
2017-08-04T16:46:09.169Z
2017-08-04T16:47:52.014Z
2017-08-04T16:46:09.169Z
33793
2017-08-04T16:47:18.221Z
2017-08-04T16:47:52.014Z
2017-08-04T16:47:19.117Z
18022
2017-08-04T16:47:33.992Z
2017-08-04T16:47:52.014Z
2017-08-04T16:47:33.992Z
17211
2017-08-04T16:47:34.803Z
2017-08-04T16:47:52.014Z
2017-08-04T16:47:35.368Z
14043
2017-08-04T16:47:37.971Z
2017-08-04T16:47:52.014Z
2017-08-04T16:47:38.227Z
4224
2017-08-04T16:47:47.790Z
2017-08-04T16:47:52.014Z
2017-08-04T16:47:49.155Z
0
2017-08-04T16:47:52.014Z
2017-08-04T16:47:52.014Z
2017-08-04T16:47:56.195Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 22
2703100
2017-08-04T16:02:53.992Z
2017-08-04T16:47:57.092Z
2017-08-04T16:02:55.016Z
2628880
2017-08-04T16:04:08.212Z
2017-08-04T16:47:57.092Z
2017-08-04T16:04:09.113Z
2617156
2017-08-04T16:04:19.936Z
2017-08-04T16:47:57.092Z
2017-08-04T16:04:19.936Z
2595559
2017-08-04T16:04:41.533Z
2017-08-04T16:47:57.092Z
2017-08-04T16:04:41.533Z
2565855
2017-08-04T16:05:11.237Z
2017-08-04T16:47:57.092Z
2017-08-04T16:05:11.842Z
1001340
2017-08-04T16:31:15.752Z
2017-08-04T16:47:57.092Z
2017-08-04T16:31:16.861Z
727533
2017-08-04T16:35:49.559Z
2017-08-04T16:47:57.092Z
2017-08-04T16:35:49.559Z
368169
2017-08-04T16:41:48.923Z
2017-08-04T16:47:57.092Z
2017-08-04T16:41:48.923Z
357684
2017-08-04T16:41:59.408Z
2017-08-04T16:47:57.092Z
2017-08-04T16:41:59.408Z
340904
2017-08-04T16:42:16.188Z
2017-08-04T16:47:57.092Z
2017-08-04T16:42:16.657Z
139322
2017-08-04T16:45:37.770Z
2017-08-04T16:47:57.092Z
2017-08-04T16:45:37.983Z
135909
2017-08-04T16:45:41.183Z
2017-08-04T16:47:57.092Z
2017-08-04T16:45:41.268Z
134245
2017-08-04T16:45:42.847Z
2017-08-04T16:47:57.092Z
2017-08-04T16:45:42.847Z
132495
2017-08-04T16:45:44.597Z
2017-08-04T16:47:57.092Z
2017-08-04T16:45:44.597Z
107923
2017-08-04T16:46:09.169Z
2017-08-04T16:47:57.092Z
2017-08-04T16:46:09.169Z
38871
2017-08-04T16:47:18.221Z
2017-08-04T16:47:57.092Z
2017-08-04T16:47:19.117Z
23100
2017-08-04T16:47:33.992Z
2017-08-04T16:47:57.092Z
2017-08-04T16:47:33.992Z
22289
2017-08-04T16:47:34.803Z
2017-08-04T16:47:57.092Z
2017-08-04T16:47:35.368Z
19121
2017-08-04T16:47:37.971Z
2017-08-04T16:47:57.092Z
2017-08-04T16:47:38.227Z
9302
2017-08-04T16:47:47.790Z
2017-08-04T16:47:57.092Z
2017-08-04T16:47:49.155Z
5078
2017-08-04T16:47:52.014Z
2017-08-04T16:47:57.092Z
2017-08-04T16:47:56.195Z
0
2017-08-04T16:47:57.092Z
2017-08-04T16:47:57.092Z
2017-08-04T16:47:57.219Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:42:58.350Z 2017-08-04T16:47:58.350Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a53e3fdd10ba54f6f7c5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:47:58.352Z,
  from: 2017-08-04T16:42:58.350Z,
  to: 2017-08-04T16:47:58.350Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:03.353Z 2017-08-04T16:48:03.353Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5433fdd10ba54f6f7c6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:03.356Z,
  from: 2017-08-04T16:43:03.353Z,
  to: 2017-08-04T16:48:03.353Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:08.357Z 2017-08-04T16:48:08.357Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5483fdd10ba54f6f7c7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:08.364Z,
  from: 2017-08-04T16:43:08.357Z,
  to: 2017-08-04T16:48:08.357Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:13.358Z 2017-08-04T16:48:13.358Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a54d3fdd10ba54f6f7c8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:13.360Z,
  from: 2017-08-04T16:43:13.358Z,
  to: 2017-08-04T16:48:13.358Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:18.360Z 2017-08-04T16:48:18.360Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5523fdd10ba54f6f7c9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:18.363Z,
  from: 2017-08-04T16:43:18.360Z,
  to: 2017-08-04T16:48:18.360Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:23.364Z 2017-08-04T16:48:23.364Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5573fdd10ba54f6f7ca,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:23.367Z,
  from: 2017-08-04T16:43:23.364Z,
  to: 2017-08-04T16:48:23.364Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:28.369Z 2017-08-04T16:48:28.369Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a55c3fdd10ba54f6f7cb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:28.376Z,
  from: 2017-08-04T16:43:28.369Z,
  to: 2017-08-04T16:48:28.369Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:33.370Z 2017-08-04T16:48:33.370Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5613fdd10ba54f6f7cc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:33.372Z,
  from: 2017-08-04T16:43:33.370Z,
  to: 2017-08-04T16:48:33.370Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 36280 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:43:38.374Z 2017-08-04T16:48:38.374Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5663fdd10ba54f6f7cd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:38.376Z,
  from: 2017-08-04T16:43:38.374Z,
  to: 2017-08-04T16:48:38.374Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:43.378Z 2017-08-04T16:48:43.378Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a56b3fdd10ba54f6f7ce,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:43.380Z,
  from: 2017-08-04T16:43:43.378Z,
  to: 2017-08-04T16:48:43.378Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:48.379Z 2017-08-04T16:48:48.379Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5703fdd10ba54f6f7cf,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:48.381Z,
  from: 2017-08-04T16:43:48.379Z,
  to: 2017-08-04T16:48:48.379Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:53.387Z 2017-08-04T16:48:53.387Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5753fdd10ba54f6f7d0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:53.391Z,
  from: 2017-08-04T16:43:53.387Z,
  to: 2017-08-04T16:48:53.387Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:43:58.392Z 2017-08-04T16:48:58.392Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a57a3fdd10ba54f6f7d1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:48:58.394Z,
  from: 2017-08-04T16:43:58.392Z,
  to: 2017-08-04T16:48:58.392Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:03.392Z 2017-08-04T16:49:03.392Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a57f3fdd10ba54f6f7d2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:03.395Z,
  from: 2017-08-04T16:44:03.392Z,
  to: 2017-08-04T16:49:03.392Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:08.395Z 2017-08-04T16:49:08.395Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5843fdd10ba54f6f7d3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:08.398Z,
  from: 2017-08-04T16:44:08.395Z,
  to: 2017-08-04T16:49:08.395Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:13.397Z 2017-08-04T16:49:13.397Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5893fdd10ba54f6f7d4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:13.400Z,
  from: 2017-08-04T16:44:13.397Z,
  to: 2017-08-04T16:49:13.397Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:18.401Z 2017-08-04T16:49:18.401Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a58e3fdd10ba54f6f7d5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:18.403Z,
  from: 2017-08-04T16:44:18.401Z,
  to: 2017-08-04T16:49:18.401Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:23.404Z 2017-08-04T16:49:23.404Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5933fdd10ba54f6f7d6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:23.411Z,
  from: 2017-08-04T16:44:23.404Z,
  to: 2017-08-04T16:49:23.404Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:28.412Z 2017-08-04T16:49:28.412Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5983fdd10ba54f6f7d7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:28.414Z,
  from: 2017-08-04T16:44:28.412Z,
  to: 2017-08-04T16:49:28.412Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:33.413Z 2017-08-04T16:49:33.413Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a59d3fdd10ba54f6f7d8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:33.416Z,
  from: 2017-08-04T16:44:33.413Z,
  to: 2017-08-04T16:49:33.413Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 96284 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:44:38.417Z 2017-08-04T16:49:38.417Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5a23fdd10ba54f6f7d9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:38.420Z,
  from: 2017-08-04T16:44:38.417Z,
  to: 2017-08-04T16:49:38.417Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:43.418Z 2017-08-04T16:49:43.418Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5a73fdd10ba54f6f7da,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:43.422Z,
  from: 2017-08-04T16:44:43.418Z,
  to: 2017-08-04T16:49:43.418Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:48.423Z 2017-08-04T16:49:48.423Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5ac3fdd10ba54f6f7db,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:48.425Z,
  from: 2017-08-04T16:44:48.423Z,
  to: 2017-08-04T16:49:48.423Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:53.424Z 2017-08-04T16:49:53.424Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5b13fdd10ba54f6f7dc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:53.428Z,
  from: 2017-08-04T16:44:53.424Z,
  to: 2017-08-04T16:49:53.424Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:44:58.428Z 2017-08-04T16:49:58.428Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5b63fdd10ba54f6f7dd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:49:58.430Z,
  from: 2017-08-04T16:44:58.428Z,
  to: 2017-08-04T16:49:58.428Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:03.431Z 2017-08-04T16:50:03.431Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5bb3fdd10ba54f6f7de,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:03.433Z,
  from: 2017-08-04T16:45:03.431Z,
  to: 2017-08-04T16:50:03.431Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:08.435Z 2017-08-04T16:50:08.435Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5c03fdd10ba54f6f7df,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:08.439Z,
  from: 2017-08-04T16:45:08.435Z,
  to: 2017-08-04T16:50:08.435Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:13.438Z 2017-08-04T16:50:13.438Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5c53fdd10ba54f6f7e0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:13.474Z,
  from: 2017-08-04T16:45:13.438Z,
  to: 2017-08-04T16:50:13.438Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:18.440Z 2017-08-04T16:50:18.440Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5ca3fdd10ba54f6f7e1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:18.443Z,
  from: 2017-08-04T16:45:18.440Z,
  to: 2017-08-04T16:50:18.440Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:23.446Z 2017-08-04T16:50:23.446Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5cf3fdd10ba54f6f7e2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:23.449Z,
  from: 2017-08-04T16:45:23.446Z,
  to: 2017-08-04T16:50:23.446Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:28.450Z 2017-08-04T16:50:28.450Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5d43fdd10ba54f6f7e3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:28.493Z,
  from: 2017-08-04T16:45:28.450Z,
  to: 2017-08-04T16:50:28.450Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:33.453Z 2017-08-04T16:50:33.453Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5d93fdd10ba54f6f7e4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:33.455Z,
  from: 2017-08-04T16:45:33.453Z,
  to: 2017-08-04T16:50:33.453Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 156328 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:45:38.455Z 2017-08-04T16:50:38.455Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5de3fdd10ba54f6f7e5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:38.458Z,
  from: 2017-08-04T16:45:38.455Z,
  to: 2017-08-04T16:50:38.455Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:43.457Z 2017-08-04T16:50:43.457Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5e33fdd10ba54f6f7e6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:43.459Z,
  from: 2017-08-04T16:45:43.457Z,
  to: 2017-08-04T16:50:43.457Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:48.460Z 2017-08-04T16:50:48.460Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5e83fdd10ba54f6f7e7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:48.463Z,
  from: 2017-08-04T16:45:48.460Z,
  to: 2017-08-04T16:50:48.460Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:53.463Z 2017-08-04T16:50:53.463Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5ed3fdd10ba54f6f7e8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:53.466Z,
  from: 2017-08-04T16:45:53.463Z,
  to: 2017-08-04T16:50:53.463Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:45:58.467Z 2017-08-04T16:50:58.467Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5f23fdd10ba54f6f7e9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:50:58.469Z,
  from: 2017-08-04T16:45:58.467Z,
  to: 2017-08-04T16:50:58.467Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:03.469Z 2017-08-04T16:51:03.469Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5f73fdd10ba54f6f7ea,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:03.472Z,
  from: 2017-08-04T16:46:03.469Z,
  to: 2017-08-04T16:51:03.469Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:08.471Z 2017-08-04T16:51:08.471Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a5fc3fdd10ba54f6f7eb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:08.474Z,
  from: 2017-08-04T16:46:08.471Z,
  to: 2017-08-04T16:51:08.471Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:13.476Z 2017-08-04T16:51:13.476Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6013fdd10ba54f6f7ec,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:13.482Z,
  from: 2017-08-04T16:46:13.476Z,
  to: 2017-08-04T16:51:13.476Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:18.484Z 2017-08-04T16:51:18.484Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6063fdd10ba54f6f7ed,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:18.487Z,
  from: 2017-08-04T16:46:18.484Z,
  to: 2017-08-04T16:51:18.484Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:23.486Z 2017-08-04T16:51:23.486Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a60b3fdd10ba54f6f7ee,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:23.489Z,
  from: 2017-08-04T16:46:23.486Z,
  to: 2017-08-04T16:51:23.486Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:28.490Z 2017-08-04T16:51:28.490Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6103fdd10ba54f6f7ef,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:28.492Z,
  from: 2017-08-04T16:46:28.490Z,
  to: 2017-08-04T16:51:28.490Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:33.492Z 2017-08-04T16:51:33.492Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6153fdd10ba54f6f7f0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:33.494Z,
  from: 2017-08-04T16:46:33.492Z,
  to: 2017-08-04T16:51:33.492Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 216288 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:46:38.497Z 2017-08-04T16:51:38.497Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a61a3fdd10ba54f6f7f1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:38.500Z,
  from: 2017-08-04T16:46:38.497Z,
  to: 2017-08-04T16:51:38.497Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:43.503Z 2017-08-04T16:51:43.503Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a61f3fdd10ba54f6f7f2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:43.506Z,
  from: 2017-08-04T16:46:43.503Z,
  to: 2017-08-04T16:51:43.503Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:48.507Z 2017-08-04T16:51:48.507Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6243fdd10ba54f6f7f3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:48.509Z,
  from: 2017-08-04T16:46:48.507Z,
  to: 2017-08-04T16:51:48.507Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:53.509Z 2017-08-04T16:51:53.509Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6293fdd10ba54f6f7f4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:53.511Z,
  from: 2017-08-04T16:46:53.509Z,
  to: 2017-08-04T16:51:53.509Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:46:58.511Z 2017-08-04T16:51:58.511Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a62e3fdd10ba54f6f7f5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:51:58.514Z,
  from: 2017-08-04T16:46:58.511Z,
  to: 2017-08-04T16:51:58.511Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:03.518Z 2017-08-04T16:52:03.518Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6333fdd10ba54f6f7f6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:03.520Z,
  from: 2017-08-04T16:47:03.518Z,
  to: 2017-08-04T16:52:03.518Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:08.522Z 2017-08-04T16:52:08.522Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6383fdd10ba54f6f7f7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:08.524Z,
  from: 2017-08-04T16:47:08.522Z,
  to: 2017-08-04T16:52:08.522Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:13.526Z 2017-08-04T16:52:13.526Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a63d3fdd10ba54f6f7f8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:13.529Z,
  from: 2017-08-04T16:47:13.526Z,
  to: 2017-08-04T16:52:13.526Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:18.530Z 2017-08-04T16:52:18.530Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6423fdd10ba54f6f7f9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:18.532Z,
  from: 2017-08-04T16:47:18.530Z,
  to: 2017-08-04T16:52:18.530Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:23.533Z 2017-08-04T16:52:23.533Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6473fdd10ba54f6f7fa,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:23.535Z,
  from: 2017-08-04T16:47:23.533Z,
  to: 2017-08-04T16:52:23.533Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:28.536Z 2017-08-04T16:52:28.536Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a64c3fdd10ba54f6f7fb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:28.541Z,
  from: 2017-08-04T16:47:28.536Z,
  to: 2017-08-04T16:52:28.536Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 276293 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:47:33.544Z 2017-08-04T16:52:33.544Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6513fdd10ba54f6f7fc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:33.547Z,
  from: 2017-08-04T16:47:33.544Z,
  to: 2017-08-04T16:52:33.544Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:38.548Z 2017-08-04T16:52:38.548Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6563fdd10ba54f6f7fd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:38.550Z,
  from: 2017-08-04T16:47:38.548Z,
  to: 2017-08-04T16:52:38.548Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:43.552Z 2017-08-04T16:52:43.552Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a65b3fdd10ba54f6f7fe,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:43.555Z,
  from: 2017-08-04T16:47:43.552Z,
  to: 2017-08-04T16:52:43.552Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:48.553Z 2017-08-04T16:52:48.553Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6603fdd10ba54f6f7ff,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:48.554Z,
  from: 2017-08-04T16:47:48.553Z,
  to: 2017-08-04T16:52:48.553Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:53.556Z 2017-08-04T16:52:53.556Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a6653fdd10ba54f6f800,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:53.558Z,
  from: 2017-08-04T16:47:53.556Z,
  to: 2017-08-04T16:52:53.556Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:47:58.561Z 2017-08-04T16:52:58.561Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:52:58.568Z,
  from: 2017-08-04T16:47:58.561Z,
  to: 2017-08-04T16:52:58.561Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:48:03.568Z 2017-08-04T16:53:03.568Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:53:03.569Z,
  from: 2017-08-04T16:48:03.568Z,
  to: 2017-08-04T16:53:03.568Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:48:08.572Z 2017-08-04T16:53:08.572Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:53:08.573Z,
  from: 2017-08-04T16:48:08.572Z,
  to: 2017-08-04T16:53:08.572Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:48:13.575Z 2017-08-04T16:53:13.575Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:53:13.576Z,
  from: 2017-08-04T16:48:13.575Z,
  to: 2017-08-04T16:53:13.575Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:48:18.578Z 2017-08-04T16:53:18.578Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:53:18.579Z,
  from: 2017-08-04T16:48:18.578Z,
  to: 2017-08-04T16:53:18.578Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:48:23.580Z 2017-08-04T16:53:23.580Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:53:23.582Z,
  from: 2017-08-04T16:48:23.580Z,
  to: 2017-08-04T16:53:23.580Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:48:28.586Z 2017-08-04T16:53:28.586Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:53:28.588Z,
  from: 2017-08-04T16:48:28.586Z,
  to: 2017-08-04T16:53:28.586Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 336298 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-04T16:53:33.518Z,
  endTime: 2017-08-04T16:53:33.528Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ma], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Fri Aug 04 2017 12:53:33 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T16:53:33.528Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info (maybe) ended meetings: [ true ]
info: Creating report visualization...
info: Sending report...
info: created participantEvent!
info: auth filter, data: { participants: [],
  _id: 5984a68d3fdd10ba54f6f802,
  timestamp: 2017-08-04T16:53:33.566Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: utterances found: 23
3177618
2017-08-04T16:02:53.992Z
2017-08-04T16:55:51.610Z
2017-08-04T16:02:55.016Z
3103398
2017-08-04T16:04:08.212Z
2017-08-04T16:55:51.610Z
2017-08-04T16:04:09.113Z
3091674
2017-08-04T16:04:19.936Z
2017-08-04T16:55:51.610Z
2017-08-04T16:04:19.936Z
3070077
2017-08-04T16:04:41.533Z
2017-08-04T16:55:51.610Z
2017-08-04T16:04:41.533Z
3040373
2017-08-04T16:05:11.237Z
2017-08-04T16:55:51.610Z
2017-08-04T16:05:11.842Z
1475858
2017-08-04T16:31:15.752Z
2017-08-04T16:55:51.610Z
2017-08-04T16:31:16.861Z
1202051
2017-08-04T16:35:49.559Z
2017-08-04T16:55:51.610Z
2017-08-04T16:35:49.559Z
842687
2017-08-04T16:41:48.923Z
2017-08-04T16:55:51.610Z
2017-08-04T16:41:48.923Z
832202
2017-08-04T16:41:59.408Z
2017-08-04T16:55:51.610Z
2017-08-04T16:41:59.408Z
815422
2017-08-04T16:42:16.188Z
2017-08-04T16:55:51.610Z
2017-08-04T16:42:16.657Z
613840
2017-08-04T16:45:37.770Z
2017-08-04T16:55:51.610Z
2017-08-04T16:45:37.983Z
610427
2017-08-04T16:45:41.183Z
2017-08-04T16:55:51.610Z
2017-08-04T16:45:41.268Z
608763
2017-08-04T16:45:42.847Z
2017-08-04T16:55:51.610Z
2017-08-04T16:45:42.847Z
607013
2017-08-04T16:45:44.597Z
2017-08-04T16:55:51.610Z
2017-08-04T16:45:44.597Z
582441
2017-08-04T16:46:09.169Z
2017-08-04T16:55:51.610Z
2017-08-04T16:46:09.169Z
513389
2017-08-04T16:47:18.221Z
2017-08-04T16:55:51.610Z
2017-08-04T16:47:19.117Z
497618
2017-08-04T16:47:33.992Z
2017-08-04T16:55:51.610Z
2017-08-04T16:47:33.992Z
496807
2017-08-04T16:47:34.803Z
2017-08-04T16:55:51.610Z
2017-08-04T16:47:35.368Z
493639
2017-08-04T16:47:37.971Z
2017-08-04T16:55:51.610Z
2017-08-04T16:47:38.227Z
483820
2017-08-04T16:47:47.790Z
2017-08-04T16:55:51.610Z
2017-08-04T16:47:49.155Z
479596
2017-08-04T16:47:52.014Z
2017-08-04T16:55:51.610Z
2017-08-04T16:47:56.195Z
474518
2017-08-04T16:47:57.092Z
2017-08-04T16:55:51.610Z
2017-08-04T16:47:57.219Z
0
2017-08-04T16:55:51.610Z
2017-08-04T16:55:51.610Z
2017-08-04T16:55:52.122Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:58:22.713Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTkwMiwiZXhwIjoxNTg4MjY1OTAyLCJpc3MiOiJmZWF0aGVycyJ9.L16AuyHS81isxQYVu1kTBv0mmb-0BHZbU4yiHRY3fAQ
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:58:22.713Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTkwMiwiZXhwIjoxNTg4MjY1OTAyLCJpc3MiOiJmZWF0aGVycyJ9.L16AuyHS81isxQYVu1kTBv0mmb-0BHZbU4yiHRY3fAQ' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T16:53:33.528Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:58:22.730Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-04T16:53:22.739Z 2017-08-04T16:58:22.739Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a7ae3fdd10ba54f6f805,
  timestamp: 2017-08-04T16:58:22.739Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7ae3fdd10ba54f6f806,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:58:22.746Z,
  from: 2017-08-04T16:53:22.739Z,
  to: 2017-08-04T16:58:22.739Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 24
3328787
2017-08-04T16:02:53.992Z
2017-08-04T16:58:22.779Z
2017-08-04T16:02:55.016Z
3254567
2017-08-04T16:04:08.212Z
2017-08-04T16:58:22.779Z
2017-08-04T16:04:09.113Z
3242843
2017-08-04T16:04:19.936Z
2017-08-04T16:58:22.779Z
2017-08-04T16:04:19.936Z
3221246
2017-08-04T16:04:41.533Z
2017-08-04T16:58:22.779Z
2017-08-04T16:04:41.533Z
3191542
2017-08-04T16:05:11.237Z
2017-08-04T16:58:22.779Z
2017-08-04T16:05:11.842Z
1627027
2017-08-04T16:31:15.752Z
2017-08-04T16:58:22.779Z
2017-08-04T16:31:16.861Z
1353220
2017-08-04T16:35:49.559Z
2017-08-04T16:58:22.779Z
2017-08-04T16:35:49.559Z
993856
2017-08-04T16:41:48.923Z
2017-08-04T16:58:22.779Z
2017-08-04T16:41:48.923Z
983371
2017-08-04T16:41:59.408Z
2017-08-04T16:58:22.779Z
2017-08-04T16:41:59.408Z
966591
2017-08-04T16:42:16.188Z
2017-08-04T16:58:22.779Z
2017-08-04T16:42:16.657Z
765009
2017-08-04T16:45:37.770Z
2017-08-04T16:58:22.779Z
2017-08-04T16:45:37.983Z
761596
2017-08-04T16:45:41.183Z
2017-08-04T16:58:22.779Z
2017-08-04T16:45:41.268Z
759932
2017-08-04T16:45:42.847Z
2017-08-04T16:58:22.779Z
2017-08-04T16:45:42.847Z
758182
2017-08-04T16:45:44.597Z
2017-08-04T16:58:22.779Z
2017-08-04T16:45:44.597Z
733610
2017-08-04T16:46:09.169Z
2017-08-04T16:58:22.779Z
2017-08-04T16:46:09.169Z
664558
2017-08-04T16:47:18.221Z
2017-08-04T16:58:22.779Z
2017-08-04T16:47:19.117Z
648787
2017-08-04T16:47:33.992Z
2017-08-04T16:58:22.779Z
2017-08-04T16:47:33.992Z
647976
2017-08-04T16:47:34.803Z
2017-08-04T16:58:22.779Z
2017-08-04T16:47:35.368Z
644808
2017-08-04T16:47:37.971Z
2017-08-04T16:58:22.779Z
2017-08-04T16:47:38.227Z
634989
2017-08-04T16:47:47.790Z
2017-08-04T16:58:22.779Z
2017-08-04T16:47:49.155Z
630765
2017-08-04T16:47:52.014Z
2017-08-04T16:58:22.779Z
2017-08-04T16:47:56.195Z
625687
2017-08-04T16:47:57.092Z
2017-08-04T16:58:22.779Z
2017-08-04T16:47:57.219Z
151169
2017-08-04T16:55:51.610Z
2017-08-04T16:58:22.779Z
2017-08-04T16:55:52.122Z
0
2017-08-04T16:58:22.779Z
2017-08-04T16:58:22.779Z
2017-08-04T16:58:22.779Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:53:27.743Z 2017-08-04T16:58:27.743Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7b33fdd10ba54f6f808,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:58:27.745Z,
  from: 2017-08-04T16:53:27.743Z,
  to: 2017-08-04T16:58:27.743Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:53:32.746Z 2017-08-04T16:58:32.746Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7b83fdd10ba54f6f809,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:58:32.779Z,
  from: 2017-08-04T16:53:32.746Z,
  to: 2017-08-04T16:58:32.746Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 10762 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:53:37.751Z 2017-08-04T16:58:37.751Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7bd3fdd10ba54f6f80a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:58:37.753Z,
  from: 2017-08-04T16:53:37.751Z,
  to: 2017-08-04T16:58:37.751Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:58:39.529Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTkxOSwiZXhwIjoxNTg4MjY1OTE5LCJpc3MiOiJmZWF0aGVycyJ9.x6Ycq92lS0aaLg_BhW7kDUQaJzcjUAxjlvHVgWlIZxs
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:58:39.529Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTkxOSwiZXhwIjoxNTg4MjY1OTE5LCJpc3MiOiJmZWF0aGVycyJ9.x6Ycq92lS0aaLg_BhW7kDUQaJzcjUAxjlvHVgWlIZxs' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:58:39.545Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a7bf3fdd10ba54f6f80b,
  timestamp: 2017-08-04T16:58:39.555Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:53:42.755Z 2017-08-04T16:58:42.755Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7c23fdd10ba54f6f80c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:58:42.757Z,
  from: 2017-08-04T16:53:42.755Z,
  to: 2017-08-04T16:58:42.755Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:58:45.964Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTkyNSwiZXhwIjoxNTg4MjY1OTI1LCJpc3MiOiJmZWF0aGVycyJ9.6gb5yNu1RlQY0VSPLj20iEE0TYspEyy1XQlRv_oNmt0
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:58:45.964Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTkyNSwiZXhwIjoxNTg4MjY1OTI1LCJpc3MiOiJmZWF0aGVycyJ9.6gb5yNu1RlQY0VSPLj20iEE0TYspEyy1XQlRv_oNmt0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:58:45.975Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a7c53fdd10ba54f6f80d,
  timestamp: 2017-08-04T16:58:45.982Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:53:47.756Z 2017-08-04T16:58:47.756Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7c73fdd10ba54f6f80e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:58:47.804Z,
  from: 2017-08-04T16:53:47.756Z,
  to: 2017-08-04T16:58:47.756Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:53:52.758Z 2017-08-04T16:58:52.758Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7cc3fdd10ba54f6f80f,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:58:52.760Z,
  from: 2017-08-04T16:53:52.758Z,
  to: 2017-08-04T16:58:52.758Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 25
3362413
2017-08-04T16:02:53.992Z
2017-08-04T16:58:56.405Z
2017-08-04T16:02:55.016Z
3288193
2017-08-04T16:04:08.212Z
2017-08-04T16:58:56.405Z
2017-08-04T16:04:09.113Z
3276469
2017-08-04T16:04:19.936Z
2017-08-04T16:58:56.405Z
2017-08-04T16:04:19.936Z
3254872
2017-08-04T16:04:41.533Z
2017-08-04T16:58:56.405Z
2017-08-04T16:04:41.533Z
3225168
2017-08-04T16:05:11.237Z
2017-08-04T16:58:56.405Z
2017-08-04T16:05:11.842Z
1660653
2017-08-04T16:31:15.752Z
2017-08-04T16:58:56.405Z
2017-08-04T16:31:16.861Z
1386846
2017-08-04T16:35:49.559Z
2017-08-04T16:58:56.405Z
2017-08-04T16:35:49.559Z
1027482
2017-08-04T16:41:48.923Z
2017-08-04T16:58:56.405Z
2017-08-04T16:41:48.923Z
1016997
2017-08-04T16:41:59.408Z
2017-08-04T16:58:56.405Z
2017-08-04T16:41:59.408Z
1000217
2017-08-04T16:42:16.188Z
2017-08-04T16:58:56.405Z
2017-08-04T16:42:16.657Z
798635
2017-08-04T16:45:37.770Z
2017-08-04T16:58:56.405Z
2017-08-04T16:45:37.983Z
795222
2017-08-04T16:45:41.183Z
2017-08-04T16:58:56.405Z
2017-08-04T16:45:41.268Z
793558
2017-08-04T16:45:42.847Z
2017-08-04T16:58:56.405Z
2017-08-04T16:45:42.847Z
791808
2017-08-04T16:45:44.597Z
2017-08-04T16:58:56.405Z
2017-08-04T16:45:44.597Z
767236
2017-08-04T16:46:09.169Z
2017-08-04T16:58:56.405Z
2017-08-04T16:46:09.169Z
698184
2017-08-04T16:47:18.221Z
2017-08-04T16:58:56.405Z
2017-08-04T16:47:19.117Z
682413
2017-08-04T16:47:33.992Z
2017-08-04T16:58:56.405Z
2017-08-04T16:47:33.992Z
681602
2017-08-04T16:47:34.803Z
2017-08-04T16:58:56.405Z
2017-08-04T16:47:35.368Z
678434
2017-08-04T16:47:37.971Z
2017-08-04T16:58:56.405Z
2017-08-04T16:47:38.227Z
668615
2017-08-04T16:47:47.790Z
2017-08-04T16:58:56.405Z
2017-08-04T16:47:49.155Z
664391
2017-08-04T16:47:52.014Z
2017-08-04T16:58:56.405Z
2017-08-04T16:47:56.195Z
659313
2017-08-04T16:47:57.092Z
2017-08-04T16:58:56.405Z
2017-08-04T16:47:57.219Z
184795
2017-08-04T16:55:51.610Z
2017-08-04T16:58:56.405Z
2017-08-04T16:55:52.122Z
33626
2017-08-04T16:58:22.779Z
2017-08-04T16:58:56.405Z
2017-08-04T16:58:22.779Z
0
2017-08-04T16:58:56.405Z
2017-08-04T16:58:56.405Z
2017-08-04T16:58:56.405Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T16:53:57.760Z 2017-08-04T16:58:57.760Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7d13fdd10ba54f6f811,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:58:57.763Z,
  from: 2017-08-04T16:53:57.760Z,
  to: 2017-08-04T16:58:57.760Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:02.764Z 2017-08-04T16:59:02.764Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7d63fdd10ba54f6f812,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:02.796Z,
  from: 2017-08-04T16:54:02.764Z,
  to: 2017-08-04T16:59:02.764Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T16:54:07.823Z 2017-08-04T16:59:07.823Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7db3fdd10ba54f6f813,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:07.848Z,
  from: 2017-08-04T16:54:07.823Z,
  to: 2017-08-04T16:59:07.823Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:59:07.856Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTk0NywiZXhwIjoxNTg4MjY1OTQ3LCJpc3MiOiJmZWF0aGVycyJ9.5MRvcXmXaZi7jFp1T2MM82w62JEtuX1PT_ctA-xBrmo
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:59:07.856Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTk0NywiZXhwIjoxNTg4MjY1OTQ3LCJpc3MiOiJmZWF0aGVycyJ9.5MRvcXmXaZi7jFp1T2MM82w62JEtuX1PT_ctA-xBrmo' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:59:07.874Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a7db3fdd10ba54f6f814,
  timestamp: 2017-08-04T16:59:07.879Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T16:59:11.394Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTk1MSwiZXhwIjoxNTg4MjY1OTUxLCJpc3MiOiJmZWF0aGVycyJ9.zj0C32ggdMN2LVYt3wGn5IyImQnhPO-86WgUiFzDT8c
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T16:59:11.394Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTk1MSwiZXhwIjoxNTg4MjY1OTUxLCJpc3MiOiJmZWF0aGVycyJ9.zj0C32ggdMN2LVYt3wGn5IyImQnhPO-86WgUiFzDT8c' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T16:59:11.425Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a7df3fdd10ba54f6f815,
  timestamp: 2017-08-04T16:59:11.434Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984a7df3fdd10ba54f6f815,
  timestamp: 2017-08-04T16:59:11.434Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:12.828Z 2017-08-04T16:59:12.828Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7e03fdd10ba54f6f816,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:12.830Z,
  from: 2017-08-04T16:54:12.828Z,
  to: 2017-08-04T16:59:12.828Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7e03fdd10ba54f6f816,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:12.830Z,
  from: 2017-08-04T16:54:12.828Z,
  to: 2017-08-04T16:59:12.828Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=ten, name=ten, participants=[participant=jordan, participant=ten], meeting=no, meetingUrl=http://localhost:3001/?user=ten&room=no, consent=true, consentDate=2017-08-04T16:59:15.923Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTk1NSwiZXhwIjoxNTg4MjY1OTU1LCJpc3MiOiJmZWF0aGVycyJ9.UjdMcZG6pVWVanVNo0xKURHohDNM0IQD-FUHF4P6uDg
info: creating a new participant... NotFound: No record found for id 'ten'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Fri Aug 04 2017 12:59:15 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 12:59:15 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 12:59:15 GMT-0400 (EDT), consent=true, name=ten, _id=ten, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'ten',
     name: 'ten',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=ten&room=no',
     consent: true,
     consentDate: '2017-08-04T16:59:15.923Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTk1NSwiZXhwIjoxNTg4MjY1OTU1LCJpc3MiOiJmZWF0aGVycyJ9.UjdMcZG6pVWVanVNo0xKURHohDNM0IQD-FUHF4P6uDg' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'ten' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'ten' ]
info: not adding participant: { participants: [ 'jordan', 'ten' ],
  lastUpdated: 2017-08-04T16:59:15.993Z } no
updated meeting with participants { participants: [ 'jordan', 'ten' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ten' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ten' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ten' ],
  _id: 5984a7e43fdd10ba54f6f817,
  timestamp: 2017-08-04T16:59:16.014Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ten' ],
  _id: 5984a7e43fdd10ba54f6f817,
  timestamp: 2017-08-04T16:59:16.014Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:17.830Z 2017-08-04T16:59:17.830Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7e53fdd10ba54f6f818,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:17.832Z,
  from: 2017-08-04T16:54:17.830Z,
  to: 2017-08-04T16:59:17.830Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7e53fdd10ba54f6f818,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:17.832Z,
  from: 2017-08-04T16:54:17.830Z,
  to: 2017-08-04T16:59:17.830Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=tena, name=tena, participants=[participant=jordan, participant=ten, participant=tena], meeting=no, meetingUrl=http://localhost:3001/?user=tena&room=no, consent=true, consentDate=2017-08-04T16:59:21.892Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTk2MSwiZXhwIjoxNTg4MjY1OTYxLCJpc3MiOiJmZWF0aGVycyJ9.GQuoGMocRrqKC-zIwTZhCeV4IfsswBjuuubGTi-RpBQ
info: creating a new participant... NotFound: No record found for id 'tena'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Fri Aug 04 2017 12:59:21 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 12:59:21 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 12:59:21 GMT-0400 (EDT), consent=true, name=tena, _id=tena, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'tena',
     name: 'tena',
     participants: [ [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=tena&room=no',
     consent: true,
     consentDate: '2017-08-04T16:59:21.892Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NTk2MSwiZXhwIjoxNTg4MjY1OTYxLCJpc3MiOiJmZWF0aGVycyJ9.GQuoGMocRrqKC-zIwTZhCeV4IfsswBjuuubGTi-RpBQ' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'ten', 'tena' ]
patching meeting { participants: [ 'jordan', 'ten' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'ten', 'tena' ]
info: not adding participant: { participants: [ 'jordan', 'ten', 'tena' ],
  lastUpdated: 2017-08-04T16:59:21.913Z } no
updated meeting with participants { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  _id: 5984a7e93fdd10ba54f6f819,
  timestamp: 2017-08-04T16:59:21.917Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  _id: 5984a7e93fdd10ba54f6f819,
  timestamp: 2017-08-04T16:59:21.917Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  _id: 5984a7e93fdd10ba54f6f819,
  timestamp: 2017-08-04T16:59:21.917Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:22.834Z 2017-08-04T16:59:22.834Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7ea3fdd10ba54f6f81a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:22.836Z,
  from: 2017-08-04T16:54:22.834Z,
  to: 2017-08-04T16:59:22.834Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7ea3fdd10ba54f6f81a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:22.836Z,
  from: 2017-08-04T16:54:22.834Z,
  to: 2017-08-04T16:59:22.834Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7ea3fdd10ba54f6f81a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:22.836Z,
  from: 2017-08-04T16:54:22.834Z,
  to: 2017-08-04T16:59:22.834Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:27.840Z 2017-08-04T16:59:27.840Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7ef3fdd10ba54f6f81b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:27.842Z,
  from: 2017-08-04T16:54:27.840Z,
  to: 2017-08-04T16:59:27.840Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7ef3fdd10ba54f6f81b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:27.842Z,
  from: 2017-08-04T16:54:27.840Z,
  to: 2017-08-04T16:59:27.840Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7ef3fdd10ba54f6f81b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:27.842Z,
  from: 2017-08-04T16:54:27.840Z,
  to: 2017-08-04T16:59:27.840Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:32.842Z 2017-08-04T16:59:32.842Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7f43fdd10ba54f6f81c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:32.843Z,
  from: 2017-08-04T16:54:32.842Z,
  to: 2017-08-04T16:59:32.842Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7f43fdd10ba54f6f81c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:32.843Z,
  from: 2017-08-04T16:54:32.842Z,
  to: 2017-08-04T16:59:32.842Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7f43fdd10ba54f6f81c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:32.843Z,
  from: 2017-08-04T16:54:32.842Z,
  to: 2017-08-04T16:59:32.842Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ten, tena], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 37144 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:54:37.847Z 2017-08-04T16:59:37.847Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7f93fdd10ba54f6f81d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:37.849Z,
  from: 2017-08-04T16:54:37.847Z,
  to: 2017-08-04T16:59:37.847Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7f93fdd10ba54f6f81d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:37.849Z,
  from: 2017-08-04T16:54:37.847Z,
  to: 2017-08-04T16:59:37.847Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7f93fdd10ba54f6f81d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:37.849Z,
  from: 2017-08-04T16:54:37.847Z,
  to: 2017-08-04T16:59:37.847Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:42.853Z 2017-08-04T16:59:42.853Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a7fe3fdd10ba54f6f81e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:42.855Z,
  from: 2017-08-04T16:54:42.853Z,
  to: 2017-08-04T16:59:42.853Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7fe3fdd10ba54f6f81e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:42.855Z,
  from: 2017-08-04T16:54:42.853Z,
  to: 2017-08-04T16:59:42.853Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984a7fe3fdd10ba54f6f81e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:42.855Z,
  from: 2017-08-04T16:54:42.853Z,
  to: 2017-08-04T16:59:42.853Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:47.858Z 2017-08-04T16:59:47.858Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8033fdd10ba54f6f81f,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:47.862Z,
  from: 2017-08-04T16:54:47.858Z,
  to: 2017-08-04T16:59:47.858Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:52.862Z 2017-08-04T16:59:52.862Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8083fdd10ba54f6f820,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:52.868Z,
  from: 2017-08-04T16:54:52.862Z,
  to: 2017-08-04T16:59:52.862Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:54:57.863Z 2017-08-04T16:59:57.863Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a80d3fdd10ba54f6f821,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T16:59:57.866Z,
  from: 2017-08-04T16:54:57.863Z,
  to: 2017-08-04T16:59:57.863Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:02.867Z 2017-08-04T17:00:02.867Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8123fdd10ba54f6f822,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:02.869Z,
  from: 2017-08-04T16:55:02.867Z,
  to: 2017-08-04T17:00:02.867Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:07.871Z 2017-08-04T17:00:07.871Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8173fdd10ba54f6f823,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:07.872Z,
  from: 2017-08-04T16:55:07.871Z,
  to: 2017-08-04T17:00:07.871Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:12.872Z 2017-08-04T17:00:12.872Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a81c3fdd10ba54f6f824,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:12.874Z,
  from: 2017-08-04T16:55:12.872Z,
  to: 2017-08-04T17:00:12.872Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:17.876Z 2017-08-04T17:00:17.876Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8213fdd10ba54f6f825,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:17.878Z,
  from: 2017-08-04T16:55:17.876Z,
  to: 2017-08-04T17:00:17.876Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:22.879Z 2017-08-04T17:00:22.879Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8263fdd10ba54f6f826,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:22.881Z,
  from: 2017-08-04T16:55:22.879Z,
  to: 2017-08-04T17:00:22.879Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:27.880Z 2017-08-04T17:00:27.880Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a82b3fdd10ba54f6f827,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:27.882Z,
  from: 2017-08-04T16:55:27.880Z,
  to: 2017-08-04T17:00:27.880Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:32.881Z 2017-08-04T17:00:32.881Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8303fdd10ba54f6f828,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:32.883Z,
  from: 2017-08-04T16:55:32.881Z,
  to: 2017-08-04T17:00:32.881Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ten, tena], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 97145 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:55:37.883Z 2017-08-04T17:00:37.883Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8353fdd10ba54f6f829,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:37.885Z,
  from: 2017-08-04T16:55:37.883Z,
  to: 2017-08-04T17:00:37.883Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:42.885Z 2017-08-04T17:00:42.885Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a83a3fdd10ba54f6f82a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:42.888Z,
  from: 2017-08-04T16:55:42.885Z,
  to: 2017-08-04T17:00:42.885Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:47.887Z 2017-08-04T17:00:47.887Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a83f3fdd10ba54f6f82b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:47.892Z,
  from: 2017-08-04T16:55:47.887Z,
  to: 2017-08-04T17:00:47.887Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:52.890Z 2017-08-04T17:00:52.890Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8443fdd10ba54f6f82c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:52.892Z,
  from: 2017-08-04T16:55:52.890Z,
  to: 2017-08-04T17:00:52.890Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:55:57.891Z 2017-08-04T17:00:57.891Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8493fdd10ba54f6f82d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:00:57.894Z,
  from: 2017-08-04T16:55:57.891Z,
  to: 2017-08-04T17:00:57.891Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:02.896Z 2017-08-04T17:01:02.896Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a84e3fdd10ba54f6f82e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:02.898Z,
  from: 2017-08-04T16:56:02.896Z,
  to: 2017-08-04T17:01:02.896Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:07.898Z 2017-08-04T17:01:07.898Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8533fdd10ba54f6f82f,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:07.900Z,
  from: 2017-08-04T16:56:07.898Z,
  to: 2017-08-04T17:01:07.898Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:12.902Z 2017-08-04T17:01:12.902Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8583fdd10ba54f6f830,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:12.904Z,
  from: 2017-08-04T16:56:12.902Z,
  to: 2017-08-04T17:01:12.902Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:17.905Z 2017-08-04T17:01:17.905Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a85d3fdd10ba54f6f831,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:17.907Z,
  from: 2017-08-04T16:56:17.905Z,
  to: 2017-08-04T17:01:17.905Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:22.908Z 2017-08-04T17:01:22.908Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8623fdd10ba54f6f832,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:22.910Z,
  from: 2017-08-04T16:56:22.908Z,
  to: 2017-08-04T17:01:22.908Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:27.909Z 2017-08-04T17:01:27.909Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8673fdd10ba54f6f833,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:27.911Z,
  from: 2017-08-04T16:56:27.909Z,
  to: 2017-08-04T17:01:27.909Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:32.913Z 2017-08-04T17:01:32.913Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a86c3fdd10ba54f6f834,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:32.916Z,
  from: 2017-08-04T16:56:32.913Z,
  to: 2017-08-04T17:01:32.913Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ten, tena], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 157156 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:56:37.916Z 2017-08-04T17:01:37.916Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8713fdd10ba54f6f835,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:37.918Z,
  from: 2017-08-04T16:56:37.916Z,
  to: 2017-08-04T17:01:37.916Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:01:42.237Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjEwMiwiZXhwIjoxNTg4MjY2MTAyLCJpc3MiOiJmZWF0aGVycyJ9.mUrOcOOEKl8_lNZgLP7kARmNe3yfryd0JcgDF55it4k
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:01:42.237Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjEwMiwiZXhwIjoxNTg4MjY2MTAyLCJpc3MiOiJmZWF0aGVycyJ9.mUrOcOOEKl8_lNZgLP7kARmNe3yfryd0JcgDF55it4k' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'ten', 'tena' ],
  lastUpdated: 2017-08-04T17:01:42.248Z } no
updated meeting with participants { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  _id: 5984a8763fdd10ba54f6f836,
  timestamp: 2017-08-04T17:01:42.253Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:42.921Z 2017-08-04T17:01:42.921Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8763fdd10ba54f6f837,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:42.923Z,
  from: 2017-08-04T16:56:42.921Z,
  to: 2017-08-04T17:01:42.921Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:47.926Z 2017-08-04T17:01:47.926Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a87b3fdd10ba54f6f838,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:47.928Z,
  from: 2017-08-04T16:56:47.926Z,
  to: 2017-08-04T17:01:47.926Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:52.927Z 2017-08-04T17:01:52.927Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8803fdd10ba54f6f839,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:52.929Z,
  from: 2017-08-04T16:56:52.927Z,
  to: 2017-08-04T17:01:52.927Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:56:57.930Z 2017-08-04T17:01:57.930Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8853fdd10ba54f6f83a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:01:57.932Z,
  from: 2017-08-04T16:56:57.930Z,
  to: 2017-08-04T17:01:57.930Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:02.933Z 2017-08-04T17:02:02.933Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a88a3fdd10ba54f6f83b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:02.936Z,
  from: 2017-08-04T16:57:02.933Z,
  to: 2017-08-04T17:02:02.933Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:07.934Z 2017-08-04T17:02:07.934Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a88f3fdd10ba54f6f83c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:07.936Z,
  from: 2017-08-04T16:57:07.934Z,
  to: 2017-08-04T17:02:07.934Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:12.938Z 2017-08-04T17:02:12.938Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8943fdd10ba54f6f83d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:12.940Z,
  from: 2017-08-04T16:57:12.938Z,
  to: 2017-08-04T17:02:12.938Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:17.941Z 2017-08-04T17:02:17.941Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8993fdd10ba54f6f83e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:17.943Z,
  from: 2017-08-04T16:57:17.941Z,
  to: 2017-08-04T17:02:17.941Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:22.944Z 2017-08-04T17:02:22.944Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a89e3fdd10ba54f6f83f,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:22.946Z,
  from: 2017-08-04T16:57:22.944Z,
  to: 2017-08-04T17:02:22.944Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:27.947Z 2017-08-04T17:02:27.947Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8a33fdd10ba54f6f840,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:27.949Z,
  from: 2017-08-04T16:57:27.947Z,
  to: 2017-08-04T17:02:27.947Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:32.948Z 2017-08-04T17:02:32.948Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8a83fdd10ba54f6f841,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:32.950Z,
  from: 2017-08-04T16:57:32.948Z,
  to: 2017-08-04T17:02:32.948Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ten, tena], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 217152 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:57:37.953Z 2017-08-04T17:02:37.953Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8ad3fdd10ba54f6f842,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:37.956Z,
  from: 2017-08-04T16:57:37.953Z,
  to: 2017-08-04T17:02:37.953Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:42.957Z 2017-08-04T17:02:42.957Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8b23fdd10ba54f6f843,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:42.959Z,
  from: 2017-08-04T16:57:42.957Z,
  to: 2017-08-04T17:02:42.957Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:47.958Z 2017-08-04T17:02:47.958Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8b73fdd10ba54f6f844,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:47.960Z,
  from: 2017-08-04T16:57:47.958Z,
  to: 2017-08-04T17:02:47.958Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:52.962Z 2017-08-04T17:02:52.963Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8bc3fdd10ba54f6f845,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:52.965Z,
  from: 2017-08-04T16:57:52.962Z,
  to: 2017-08-04T17:02:52.963Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:57:57.963Z 2017-08-04T17:02:57.963Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8c13fdd10ba54f6f846,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:02:57.965Z,
  from: 2017-08-04T16:57:57.963Z,
  to: 2017-08-04T17:02:57.963Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:02.966Z 2017-08-04T17:03:02.966Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8c63fdd10ba54f6f847,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:02.968Z,
  from: 2017-08-04T16:58:02.966Z,
  to: 2017-08-04T17:03:02.966Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:07.968Z 2017-08-04T17:03:07.968Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8cb3fdd10ba54f6f848,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:07.972Z,
  from: 2017-08-04T16:58:07.968Z,
  to: 2017-08-04T17:03:07.968Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:12.971Z 2017-08-04T17:03:12.971Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8d03fdd10ba54f6f849,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:12.973Z,
  from: 2017-08-04T16:58:12.971Z,
  to: 2017-08-04T17:03:12.971Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:17.976Z 2017-08-04T17:03:17.976Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8d53fdd10ba54f6f84a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:17.978Z,
  from: 2017-08-04T16:58:17.976Z,
  to: 2017-08-04T17:03:17.976Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:22.979Z 2017-08-04T17:03:22.979Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8da3fdd10ba54f6f84b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:22.980Z,
  from: 2017-08-04T16:58:22.979Z,
  to: 2017-08-04T17:03:22.979Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:27.980Z 2017-08-04T17:03:27.980Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8df3fdd10ba54f6f84c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:27.985Z,
  from: 2017-08-04T16:58:27.980Z,
  to: 2017-08-04T17:03:27.980Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:32.985Z 2017-08-04T17:03:32.985Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8e43fdd10ba54f6f84d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:32.986Z,
  from: 2017-08-04T16:58:32.985Z,
  to: 2017-08-04T17:03:32.985Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ten, tena], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 277158 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T16:58:37.988Z 2017-08-04T17:03:37.988Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8e93fdd10ba54f6f84e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:37.990Z,
  from: 2017-08-04T16:58:37.988Z,
  to: 2017-08-04T17:03:37.988Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:42.989Z 2017-08-04T17:03:42.989Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8ee3fdd10ba54f6f84f,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:42.991Z,
  from: 2017-08-04T16:58:42.989Z,
  to: 2017-08-04T17:03:42.989Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:03:47.449Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjIyNywiZXhwIjoxNTg4MjY2MjI3LCJpc3MiOiJmZWF0aGVycyJ9._e-5LOEkWBvX-rrZi_QX9JSNZ81fgJovXov32loZMrM
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:03:47.449Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjIyNywiZXhwIjoxNTg4MjY2MjI3LCJpc3MiOiJmZWF0aGVycyJ9._e-5LOEkWBvX-rrZi_QX9JSNZ81fgJovXov32loZMrM' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'ten', 'tena' ],
  lastUpdated: 2017-08-04T17:03:47.463Z } no
updated meeting with participants { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  _id: 5984a8f33fdd10ba54f6f850,
  timestamp: 2017-08-04T17:03:47.468Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:47.995Z 2017-08-04T17:03:47.995Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8f43fdd10ba54f6f851,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:47.998Z,
  from: 2017-08-04T16:58:47.995Z,
  to: 2017-08-04T17:03:47.995Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:03:50.806Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjIzMCwiZXhwIjoxNTg4MjY2MjMwLCJpc3MiOiJmZWF0aGVycyJ9.eoy7JBssqeghKlQOID09b99grXtE2-NOkk0bR2AiEQY
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:03:50.806Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjIzMCwiZXhwIjoxNTg4MjY2MjMwLCJpc3MiOiJmZWF0aGVycyJ9.eoy7JBssqeghKlQOID09b99grXtE2-NOkk0bR2AiEQY' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'ten', 'tena' ],
  lastUpdated: 2017-08-04T17:03:50.816Z } no
updated meeting with participants { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  _id: 5984a8f63fdd10ba54f6f852,
  timestamp: 2017-08-04T17:03:50.821Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:52.998Z 2017-08-04T17:03:52.998Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984a8f93fdd10ba54f6f853,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:53.000Z,
  from: 2017-08-04T16:58:52.998Z,
  to: 2017-08-04T17:03:52.998Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:03:57.096Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjIzNywiZXhwIjoxNTg4MjY2MjM3LCJpc3MiOiJmZWF0aGVycyJ9.X9TzZTcct9lqzfovfZzjPQCpWTUrU95pjnv8TQxPNcg
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:03:57.096Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjIzNywiZXhwIjoxNTg4MjY2MjM3LCJpc3MiOiJmZWF0aGVycyJ9.X9TzZTcct9lqzfovfZzjPQCpWTUrU95pjnv8TQxPNcg' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'ten', 'tena' ],
  lastUpdated: 2017-08-04T17:03:57.106Z } no
updated meeting with participants { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'ten', 'tena' ],
  _id: 5984a8fd3fdd10ba54f6f854,
  timestamp: 2017-08-04T17:03:57.110Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:58:58.000Z 2017-08-04T17:03:58.000Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:03:58.002Z,
  from: 2017-08-04T16:58:58.000Z,
  to: 2017-08-04T17:03:58.000Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:59:03.004Z 2017-08-04T17:04:03.004Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:04:03.006Z,
  from: 2017-08-04T16:59:03.004Z,
  to: 2017-08-04T17:04:03.004Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:59:08.008Z 2017-08-04T17:04:08.008Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:04:08.014Z,
  from: 2017-08-04T16:59:08.008Z,
  to: 2017-08-04T17:04:08.008Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:59:13.013Z 2017-08-04T17:04:13.013Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:04:13.015Z,
  from: 2017-08-04T16:59:13.013Z,
  to: 2017-08-04T17:04:13.013Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:59:18.016Z 2017-08-04T17:04:18.016Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:04:18.018Z,
  from: 2017-08-04T16:59:18.016Z,
  to: 2017-08-04T17:04:18.016Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:59:23.021Z 2017-08-04T17:04:23.021Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:04:23.023Z,
  from: 2017-08-04T16:59:23.021Z,
  to: 2017-08-04T17:04:23.021Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:59:28.022Z 2017-08-04T17:04:28.022Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:04:28.024Z,
  from: 2017-08-04T16:59:28.022Z,
  to: 2017-08-04T17:04:28.022Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T16:59:33.026Z 2017-08-04T17:04:33.026Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:04:33.028Z,
  from: 2017-08-04T16:59:33.026Z,
  to: 2017-08-04T17:04:33.026Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ten, tena], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 337161 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ten, tena], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-04T17:04:33.566Z,
  endTime: 2017-08-04T17:04:33.569Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, ten, tena], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Fri Aug 04 2017 13:04:33 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:04:33.569Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: auth filter, data: { participants: [],
  _id: 5984a9213fdd10ba54f6f856,
  timestamp: 2017-08-04T17:04:33.577Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:09:28.344Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjU2OCwiZXhwIjoxNTg4MjY2NTY4LCJpc3MiOiJmZWF0aGVycyJ9.EmlKV0iTC9inUnFM1M_hDr-xMz_0-x_mJD3OfUjNPos
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:09:28.344Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjU2OCwiZXhwIjoxNTg4MjY2NTY4LCJpc3MiOiJmZWF0aGVycyJ9.EmlKV0iTC9inUnFM1M_hDr-xMz_0-x_mJD3OfUjNPos' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:04:33.569Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:09:28.365Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:04:28.382Z 2017-08-04T17:09:28.382Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aa483fdd10ba54f6f858,
  timestamp: 2017-08-04T17:09:28.382Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:09:28.391Z,
  from: 2017-08-04T17:04:28.382Z,
  to: 2017-08-04T17:09:28.382Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:09:31.654Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjU3MSwiZXhwIjoxNTg4MjY2NTcxLCJpc3MiOiJmZWF0aGVycyJ9.yZV1roKlwLfHKzWjNlRnM4LFfTbguVFaJhxLxZFol2E
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:09:31.654Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjU3MSwiZXhwIjoxNTg4MjY2NTcxLCJpc3MiOiJmZWF0aGVycyJ9.yZV1roKlwLfHKzWjNlRnM4LFfTbguVFaJhxLxZFol2E' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:09:31.682Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aa4b3fdd10ba54f6f859,
  timestamp: 2017-08-04T17:09:31.692Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:04:33.384Z 2017-08-04T17:09:33.384Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:09:33.386Z,
  from: 2017-08-04T17:04:33.384Z,
  to: 2017-08-04T17:09:33.384Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 637189 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-04T17:09:33.595Z,
  endTime: 2017-08-04T17:09:33.597Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Fri Aug 04 2017 13:09:33 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:09:33.597Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: auth filter, data: { participants: [],
  _id: 5984aa4d3fdd10ba54f6f85b,
  timestamp: 2017-08-04T17:09:33.624Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:09:38.522Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjU3OCwiZXhwIjoxNTg4MjY2NTc4LCJpc3MiOiJmZWF0aGVycyJ9.6wbeitBuz2wPFj7XbHqAM6pzboGiq3rkCnKYApUUkPY
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:09:38.522Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjU3OCwiZXhwIjoxNTg4MjY2NTc4LCJpc3MiOiJmZWF0aGVycyJ9.6wbeitBuz2wPFj7XbHqAM6pzboGiq3rkCnKYApUUkPY' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:09:33.597Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:09:38.542Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:04:38.554Z 2017-08-04T17:09:38.554Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aa523fdd10ba54f6f85d,
  timestamp: 2017-08-04T17:09:38.554Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:09:38.560Z,
  from: 2017-08-04T17:04:38.554Z,
  to: 2017-08-04T17:09:38.554Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:04:43.559Z 2017-08-04T17:09:43.559Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:09:43.561Z,
  from: 2017-08-04T17:04:43.559Z,
  to: 2017-08-04T17:09:43.559Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:04:48.562Z 2017-08-04T17:09:48.562Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:09:48.564Z,
  from: 2017-08-04T17:04:48.562Z,
  to: 2017-08-04T17:09:48.562Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:04:53.566Z 2017-08-04T17:09:53.566Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:09:53.567Z,
  from: 2017-08-04T17:04:53.566Z,
  to: 2017-08-04T17:09:53.566Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:04:58.566Z 2017-08-04T17:09:58.566Z
info: updated turns for meeting: no
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:09:59.741Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjU5OSwiZXhwIjoxNTg4MjY2NTk5LCJpc3MiOiJmZWF0aGVycyJ9.Rw1L5gYxbcbxn1rx2skm2G2lO5RynjrV2ej0MQni0jQ
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:09:59.741Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjU5OSwiZXhwIjoxNTg4MjY2NTk5LCJpc3MiOiJmZWF0aGVycyJ9.Rw1L5gYxbcbxn1rx2skm2G2lO5RynjrV2ej0MQni0jQ' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:09:59.762Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aa673fdd10ba54f6f85e,
  timestamp: 2017-08-04T17:09:59.782Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:03.571Z 2017-08-04T17:10:03.571Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:03.572Z,
  from: 2017-08-04T17:05:03.571Z,
  to: 2017-08-04T17:10:03.571Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:10:07.735Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjYwNywiZXhwIjoxNTg4MjY2NjA3LCJpc3MiOiJmZWF0aGVycyJ9.7DumAZKpalsxCb8U3-dXO-7wD2k5rsLXVea5VfK5aq8
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:10:07.735Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjYwNywiZXhwIjoxNTg4MjY2NjA3LCJpc3MiOiJmZWF0aGVycyJ9.7DumAZKpalsxCb8U3-dXO-7wD2k5rsLXVea5VfK5aq8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:10:07.750Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aa6f3fdd10ba54f6f85f,
  timestamp: 2017-08-04T17:10:07.755Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:08.572Z 2017-08-04T17:10:08.572Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:08.574Z,
  from: 2017-08-04T17:05:08.572Z,
  to: 2017-08-04T17:10:08.572Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:13.576Z 2017-08-04T17:10:13.576Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:13.578Z,
  from: 2017-08-04T17:05:13.576Z,
  to: 2017-08-04T17:10:13.576Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:18.581Z 2017-08-04T17:10:18.581Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:18.583Z,
  from: 2017-08-04T17:05:18.581Z,
  to: 2017-08-04T17:10:18.581Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:23.584Z 2017-08-04T17:10:23.584Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:23.585Z,
  from: 2017-08-04T17:05:23.584Z,
  to: 2017-08-04T17:10:23.584Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:28.587Z 2017-08-04T17:10:28.587Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:28.588Z,
  from: 2017-08-04T17:05:28.587Z,
  to: 2017-08-04T17:10:28.587Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:33.590Z 2017-08-04T17:10:33.590Z
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 697192 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:33.591Z,
  from: 2017-08-04T17:05:33.590Z,
  to: 2017-08-04T17:10:33.590Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-04T17:10:33.597Z,
  endTime: 2017-08-04T17:10:33.606Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Fri Aug 04 2017 13:10:33 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:10:33.606Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: auth filter, data: { participants: [],
  _id: 5984aa893fdd10ba54f6f861,
  timestamp: 2017-08-04T17:10:33.619Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:10:36.258Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjYzNiwiZXhwIjoxNTg4MjY2NjM2LCJpc3MiOiJmZWF0aGVycyJ9.YJfdfDZvbcrdqy21pQ8LYMJmn2pIMTD5Xk4doWGL1YM
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:10:36.258Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjYzNiwiZXhwIjoxNTg4MjY2NjM2LCJpc3MiOiJmZWF0aGVycyJ9.YJfdfDZvbcrdqy21pQ8LYMJmn2pIMTD5Xk4doWGL1YM' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:10:33.606Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:10:36.274Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:05:36.282Z 2017-08-04T17:10:36.282Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aa8c3fdd10ba54f6f863,
  timestamp: 2017-08-04T17:10:36.283Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:36.286Z,
  from: 2017-08-04T17:05:36.282Z,
  to: 2017-08-04T17:10:36.282Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:41.287Z 2017-08-04T17:10:41.287Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:41.318Z,
  from: 2017-08-04T17:05:41.287Z,
  to: 2017-08-04T17:10:41.287Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:46.290Z 2017-08-04T17:10:46.290Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:46.292Z,
  from: 2017-08-04T17:05:46.290Z,
  to: 2017-08-04T17:10:46.290Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:51.293Z 2017-08-04T17:10:51.293Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:51.299Z,
  from: 2017-08-04T17:05:51.293Z,
  to: 2017-08-04T17:10:51.293Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:05:56.297Z 2017-08-04T17:10:56.297Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:10:56.299Z,
  from: 2017-08-04T17:05:56.297Z,
  to: 2017-08-04T17:10:56.297Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:06:01.299Z 2017-08-04T17:11:01.299Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:01.301Z,
  from: 2017-08-04T17:06:01.299Z,
  to: 2017-08-04T17:11:01.299Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:06:06.302Z 2017-08-04T17:11:06.302Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:06.354Z,
  from: 2017-08-04T17:06:06.302Z,
  to: 2017-08-04T17:11:06.302Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:11:09.840Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjY2OSwiZXhwIjoxNTg4MjY2NjY5LCJpc3MiOiJmZWF0aGVycyJ9.Logc08j5UQ8yF1JMb8bO5U8FHWY0DF2AUanvxKmyYKc
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:11:09.840Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjY2OSwiZXhwIjoxNTg4MjY2NjY5LCJpc3MiOiJmZWF0aGVycyJ9.Logc08j5UQ8yF1JMb8bO5U8FHWY0DF2AUanvxKmyYKc' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:11:09.860Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aaad3fdd10ba54f6f864,
  timestamp: 2017-08-04T17:11:09.871Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:06:11.303Z 2017-08-04T17:11:11.303Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:11.305Z,
  from: 2017-08-04T17:06:11.303Z,
  to: 2017-08-04T17:11:11.303Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:06:16.305Z 2017-08-04T17:11:16.305Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:16.350Z,
  from: 2017-08-04T17:06:16.305Z,
  to: 2017-08-04T17:11:16.305Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:06:21.309Z 2017-08-04T17:11:21.309Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:21.310Z,
  from: 2017-08-04T17:06:21.309Z,
  to: 2017-08-04T17:11:21.309Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:06:26.312Z 2017-08-04T17:11:26.312Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:26.314Z,
  from: 2017-08-04T17:06:26.312Z,
  to: 2017-08-04T17:11:26.312Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:06:31.316Z 2017-08-04T17:11:31.316Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:31.318Z,
  from: 2017-08-04T17:06:31.316Z,
  to: 2017-08-04T17:11:31.316Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 757192 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-04T17:11:33.599Z,
  endTime: 2017-08-04T17:11:33.601Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Fri Aug 04 2017 13:11:33 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:11:33.601Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: auth filter, data: { participants: [],
  _id: 5984aac53fdd10ba54f6f866,
  timestamp: 2017-08-04T17:11:33.630Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:11:42.528Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjcwMiwiZXhwIjoxNTg4MjY2NzAyLCJpc3MiOiJmZWF0aGVycyJ9.fLHoWYkxPNzfRuGIpwfhbGRhO8TStZQ01jB_g2LrcDE
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:11:42.528Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjcwMiwiZXhwIjoxNTg4MjY2NzAyLCJpc3MiOiJmZWF0aGVycyJ9.fLHoWYkxPNzfRuGIpwfhbGRhO8TStZQ01jB_g2LrcDE' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:11:33.601Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:11:42.544Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:06:42.553Z 2017-08-04T17:11:42.553Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aace3fdd10ba54f6f868,
  timestamp: 2017-08-04T17:11:42.553Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:42.564Z,
  from: 2017-08-04T17:06:42.553Z,
  to: 2017-08-04T17:11:42.553Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:06:47.553Z 2017-08-04T17:11:47.553Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:47.556Z,
  from: 2017-08-04T17:06:47.553Z,
  to: 2017-08-04T17:11:47.553Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:06:52.556Z 2017-08-04T17:11:52.556Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:52.558Z,
  from: 2017-08-04T17:06:52.556Z,
  to: 2017-08-04T17:11:52.556Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T17:06:57.561Z 2017-08-04T17:11:57.561Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:11:57.563Z,
  from: 2017-08-04T17:06:57.561Z,
  to: 2017-08-04T17:11:57.561Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:11:57.745Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjcxNywiZXhwIjoxNTg4MjY2NzE3LCJpc3MiOiJmZWF0aGVycyJ9.hoKyAlgwBPiMbHjv9UvPwV6wCbx0zpOjyT7iayhnf-k
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:11:57.745Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjcxNywiZXhwIjoxNTg4MjY2NzE3LCJpc3MiOiJmZWF0aGVycyJ9.hoKyAlgwBPiMbHjv9UvPwV6wCbx0zpOjyT7iayhnf-k' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:11:57.767Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aadd3fdd10ba54f6f869,
  timestamp: 2017-08-04T17:11:57.772Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:12:02.293Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjcyMiwiZXhwIjoxNTg4MjY2NzIyLCJpc3MiOiJmZWF0aGVycyJ9.x2nv2RjuzS7q5nLA8srkeyyJ2Vxs8cHRFUt_cRv-_Vw
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:12:02.293Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjcyMiwiZXhwIjoxNTg4MjY2NzIyLCJpc3MiOiJmZWF0aGVycyJ9.x2nv2RjuzS7q5nLA8srkeyyJ2Vxs8cHRFUt_cRv-_Vw' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:12:02.312Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aae23fdd10ba54f6f86a,
  timestamp: 2017-08-04T17:12:02.317Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:02.565Z 2017-08-04T17:12:02.565Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:02.568Z,
  from: 2017-08-04T17:07:02.565Z,
  to: 2017-08-04T17:12:02.565Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:12:06.381Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjcyNiwiZXhwIjoxNTg4MjY2NzI2LCJpc3MiOiJmZWF0aGVycyJ9.RFISZT8f8AN4yizYaNMvDPdD_9i0c2Bv5HRE21CZb9Y
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:12:06.381Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjcyNiwiZXhwIjoxNTg4MjY2NzI2LCJpc3MiOiJmZWF0aGVycyJ9.RFISZT8f8AN4yizYaNMvDPdD_9i0c2Bv5HRE21CZb9Y' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:12:06.437Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aae63fdd10ba54f6f86b,
  timestamp: 2017-08-04T17:12:06.450Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:07.568Z 2017-08-04T17:12:07.568Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:07.569Z,
  from: 2017-08-04T17:07:07.568Z,
  to: 2017-08-04T17:12:07.568Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:12:12.368Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjczMiwiZXhwIjoxNTg4MjY2NzMyLCJpc3MiOiJmZWF0aGVycyJ9.PVonKMlTOAKe_kgqySljIOcTV5Gx6Z0GFzyjXiVjGpQ
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:12:12.368Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjczMiwiZXhwIjoxNTg4MjY2NzMyLCJpc3MiOiJmZWF0aGVycyJ9.PVonKMlTOAKe_kgqySljIOcTV5Gx6Z0GFzyjXiVjGpQ' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:12:12.381Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aaec3fdd10ba54f6f86c,
  timestamp: 2017-08-04T17:12:12.391Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:12.571Z 2017-08-04T17:12:12.571Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:12.573Z,
  from: 2017-08-04T17:07:12.571Z,
  to: 2017-08-04T17:12:12.571Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 26
4159303
2017-08-04T16:02:53.992Z
2017-08-04T17:12:13.295Z
2017-08-04T16:02:55.016Z
4085083
2017-08-04T16:04:08.212Z
2017-08-04T17:12:13.295Z
2017-08-04T16:04:09.113Z
4073359
2017-08-04T16:04:19.936Z
2017-08-04T17:12:13.295Z
2017-08-04T16:04:19.936Z
4051762
2017-08-04T16:04:41.533Z
2017-08-04T17:12:13.295Z
2017-08-04T16:04:41.533Z
4022058
2017-08-04T16:05:11.237Z
2017-08-04T17:12:13.295Z
2017-08-04T16:05:11.842Z
2457543
2017-08-04T16:31:15.752Z
2017-08-04T17:12:13.295Z
2017-08-04T16:31:16.861Z
2183736
2017-08-04T16:35:49.559Z
2017-08-04T17:12:13.295Z
2017-08-04T16:35:49.559Z
1824372
2017-08-04T16:41:48.923Z
2017-08-04T17:12:13.295Z
2017-08-04T16:41:48.923Z
1813887
2017-08-04T16:41:59.408Z
2017-08-04T17:12:13.295Z
2017-08-04T16:41:59.408Z
1797107
2017-08-04T16:42:16.188Z
2017-08-04T17:12:13.295Z
2017-08-04T16:42:16.657Z
1595525
2017-08-04T16:45:37.770Z
2017-08-04T17:12:13.295Z
2017-08-04T16:45:37.983Z
1592112
2017-08-04T16:45:41.183Z
2017-08-04T17:12:13.295Z
2017-08-04T16:45:41.268Z
1590448
2017-08-04T16:45:42.847Z
2017-08-04T17:12:13.295Z
2017-08-04T16:45:42.847Z
1588698
2017-08-04T16:45:44.597Z
2017-08-04T17:12:13.295Z
2017-08-04T16:45:44.597Z
1564126
2017-08-04T16:46:09.169Z
2017-08-04T17:12:13.295Z
2017-08-04T16:46:09.169Z
1495074
2017-08-04T16:47:18.221Z
2017-08-04T17:12:13.295Z
2017-08-04T16:47:19.117Z
1479303
2017-08-04T16:47:33.992Z
2017-08-04T17:12:13.295Z
2017-08-04T16:47:33.992Z
1478492
2017-08-04T16:47:34.803Z
2017-08-04T17:12:13.295Z
2017-08-04T16:47:35.368Z
1475324
2017-08-04T16:47:37.971Z
2017-08-04T17:12:13.295Z
2017-08-04T16:47:38.227Z
1465505
2017-08-04T16:47:47.790Z
2017-08-04T17:12:13.295Z
2017-08-04T16:47:49.155Z
1461281
2017-08-04T16:47:52.014Z
2017-08-04T17:12:13.295Z
2017-08-04T16:47:56.195Z
1456203
2017-08-04T16:47:57.092Z
2017-08-04T17:12:13.295Z
2017-08-04T16:47:57.219Z
981685
2017-08-04T16:55:51.610Z
2017-08-04T17:12:13.295Z
2017-08-04T16:55:52.122Z
830516
2017-08-04T16:58:22.779Z
2017-08-04T17:12:13.295Z
2017-08-04T16:58:22.779Z
796890
2017-08-04T16:58:56.405Z
2017-08-04T17:12:13.295Z
2017-08-04T16:58:56.405Z
0
2017-08-04T17:12:13.295Z
2017-08-04T17:12:13.295Z
2017-08-04T17:12:13.295Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:07:17.576Z 2017-08-04T17:12:17.576Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aaf13fdd10ba54f6f86e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:17.578Z,
  from: 2017-08-04T17:07:17.576Z,
  to: 2017-08-04T17:12:17.576Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:22.580Z 2017-08-04T17:12:22.580Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aaf63fdd10ba54f6f86f,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:22.582Z,
  from: 2017-08-04T17:07:22.580Z,
  to: 2017-08-04T17:12:22.580Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:27.585Z 2017-08-04T17:12:27.585Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aafb3fdd10ba54f6f870,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:27.587Z,
  from: 2017-08-04T17:07:27.585Z,
  to: 2017-08-04T17:12:27.585Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:32.587Z 2017-08-04T17:12:32.587Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab003fdd10ba54f6f871,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:32.589Z,
  from: 2017-08-04T17:07:32.587Z,
  to: 2017-08-04T17:12:32.587Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 20308 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:07:37.588Z 2017-08-04T17:12:37.588Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab053fdd10ba54f6f872,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:37.600Z,
  from: 2017-08-04T17:07:37.588Z,
  to: 2017-08-04T17:12:37.588Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:42.591Z 2017-08-04T17:12:42.591Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab0a3fdd10ba54f6f873,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:42.592Z,
  from: 2017-08-04T17:07:42.591Z,
  to: 2017-08-04T17:12:42.591Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:47.593Z 2017-08-04T17:12:47.593Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab0f3fdd10ba54f6f874,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:47.596Z,
  from: 2017-08-04T17:07:47.593Z,
  to: 2017-08-04T17:12:47.593Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:52.597Z 2017-08-04T17:12:52.597Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab143fdd10ba54f6f875,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:52.600Z,
  from: 2017-08-04T17:07:52.597Z,
  to: 2017-08-04T17:12:52.597Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:07:57.604Z 2017-08-04T17:12:57.604Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab193fdd10ba54f6f876,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:12:57.606Z,
  from: 2017-08-04T17:07:57.604Z,
  to: 2017-08-04T17:12:57.604Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:02.607Z 2017-08-04T17:13:02.607Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab1e3fdd10ba54f6f877,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:02.609Z,
  from: 2017-08-04T17:08:02.607Z,
  to: 2017-08-04T17:13:02.607Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:07.612Z 2017-08-04T17:13:07.612Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab233fdd10ba54f6f878,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:07.614Z,
  from: 2017-08-04T17:08:07.612Z,
  to: 2017-08-04T17:13:07.612Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:12.617Z 2017-08-04T17:13:12.617Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab283fdd10ba54f6f879,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:12.619Z,
  from: 2017-08-04T17:08:12.617Z,
  to: 2017-08-04T17:13:12.617Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:17.618Z 2017-08-04T17:13:17.618Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab2d3fdd10ba54f6f87a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:17.620Z,
  from: 2017-08-04T17:08:17.618Z,
  to: 2017-08-04T17:13:17.618Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:22.623Z 2017-08-04T17:13:22.623Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab323fdd10ba54f6f87b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:22.625Z,
  from: 2017-08-04T17:08:22.623Z,
  to: 2017-08-04T17:13:22.623Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:27.628Z 2017-08-04T17:13:27.628Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab373fdd10ba54f6f87c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:27.630Z,
  from: 2017-08-04T17:08:27.628Z,
  to: 2017-08-04T17:13:27.628Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:32.629Z 2017-08-04T17:13:32.629Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab3c3fdd10ba54f6f87d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:32.631Z,
  from: 2017-08-04T17:08:32.629Z,
  to: 2017-08-04T17:13:32.629Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 80309 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:13:35.908Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjgxNSwiZXhwIjoxNTg4MjY2ODE1LCJpc3MiOiJmZWF0aGVycyJ9.PitL-GFbiYlrCnXQKeMke6SjWC78afkQRWWER2bY7Ow
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:13:35.908Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjgxNSwiZXhwIjoxNTg4MjY2ODE1LCJpc3MiOiJmZWF0aGVycyJ9.PitL-GFbiYlrCnXQKeMke6SjWC78afkQRWWER2bY7Ow' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:13:35.921Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ab3f3fdd10ba54f6f87e,
  timestamp: 2017-08-04T17:13:35.926Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:37.633Z 2017-08-04T17:13:37.633Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab413fdd10ba54f6f87f,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:37.635Z,
  from: 2017-08-04T17:08:37.633Z,
  to: 2017-08-04T17:13:37.633Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-04T17:13:40.364Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjgyMCwiZXhwIjoxNTg4MjY2ODIwLCJpc3MiOiJmZWF0aGVycyJ9.10HiN0zX0xSVnNuCNn6dymy-x8-imgTm6CsAr9sfYGU
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-04T17:13:40.364Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjgyMCwiZXhwIjoxNTg4MjY2ODIwLCJpc3MiOiJmZWF0aGVycyJ9.10HiN0zX0xSVnNuCNn6dymy-x8-imgTm6CsAr9sfYGU' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:13:40.388Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ab443fdd10ba54f6f880,
  timestamp: 2017-08-04T17:13:40.393Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:42.637Z 2017-08-04T17:13:42.637Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab463fdd10ba54f6f881,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:42.640Z,
  from: 2017-08-04T17:08:42.637Z,
  to: 2017-08-04T17:13:42.637Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:13:45.895Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjgyNSwiZXhwIjoxNTg4MjY2ODI1LCJpc3MiOiJmZWF0aGVycyJ9.xJ3aqSyjy9oN4M5VJKPqpmxEec7DDhetDUavc4zDCZA
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:13:45.895Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjgyNSwiZXhwIjoxNTg4MjY2ODI1LCJpc3MiOiJmZWF0aGVycyJ9.xJ3aqSyjy9oN4M5VJKPqpmxEec7DDhetDUavc4zDCZA' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:13:45.925Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ab493fdd10ba54f6f882,
  timestamp: 2017-08-04T17:13:45.933Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:47.643Z 2017-08-04T17:13:47.643Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab4b3fdd10ba54f6f883,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:47.644Z,
  from: 2017-08-04T17:08:47.643Z,
  to: 2017-08-04T17:13:47.643Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:13:50.500Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjgzMCwiZXhwIjoxNTg4MjY2ODMwLCJpc3MiOiJmZWF0aGVycyJ9.ryxfwgtC0rntYICh3ZmmLrW8mX-iZbaH4cuhaFF7_Xo
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:13:50.500Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NjgzMCwiZXhwIjoxNTg4MjY2ODMwLCJpc3MiOiJmZWF0aGVycyJ9.ryxfwgtC0rntYICh3ZmmLrW8mX-iZbaH4cuhaFF7_Xo' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:13:50.511Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ab4e3fdd10ba54f6f884,
  timestamp: 2017-08-04T17:13:50.516Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:52.647Z 2017-08-04T17:13:52.647Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab503fdd10ba54f6f885,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:52.649Z,
  from: 2017-08-04T17:08:52.647Z,
  to: 2017-08-04T17:13:52.647Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:08:57.649Z 2017-08-04T17:13:57.649Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab553fdd10ba54f6f886,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:13:57.651Z,
  from: 2017-08-04T17:08:57.649Z,
  to: 2017-08-04T17:13:57.649Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:02.650Z 2017-08-04T17:14:02.650Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab5a3fdd10ba54f6f887,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:02.651Z,
  from: 2017-08-04T17:09:02.650Z,
  to: 2017-08-04T17:14:02.650Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:07.670Z 2017-08-04T17:14:07.670Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab5f3fdd10ba54f6f888,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:07.672Z,
  from: 2017-08-04T17:09:07.670Z,
  to: 2017-08-04T17:14:07.670Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:12.672Z 2017-08-04T17:14:12.672Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab643fdd10ba54f6f889,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:12.674Z,
  from: 2017-08-04T17:09:12.672Z,
  to: 2017-08-04T17:14:12.672Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:17.674Z 2017-08-04T17:14:17.674Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab693fdd10ba54f6f88a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:17.676Z,
  from: 2017-08-04T17:09:17.674Z,
  to: 2017-08-04T17:14:17.674Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:22.677Z 2017-08-04T17:14:22.677Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab6e3fdd10ba54f6f88b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:22.679Z,
  from: 2017-08-04T17:09:22.677Z,
  to: 2017-08-04T17:14:22.677Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:27.682Z 2017-08-04T17:14:27.682Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab733fdd10ba54f6f88c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:27.684Z,
  from: 2017-08-04T17:09:27.682Z,
  to: 2017-08-04T17:14:27.682Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:32.684Z 2017-08-04T17:14:32.684Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab783fdd10ba54f6f88d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:32.686Z,
  from: 2017-08-04T17:09:32.684Z,
  to: 2017-08-04T17:14:32.684Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 140314 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T17:09:37.684Z 2017-08-04T17:14:37.684Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab7d3fdd10ba54f6f88e,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:37.686Z,
  from: 2017-08-04T17:09:37.684Z,
  to: 2017-08-04T17:14:37.684Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:14:38.169Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2Njg3OCwiZXhwIjoxNTg4MjY2ODc4LCJpc3MiOiJmZWF0aGVycyJ9.Dwx_UyEbsb5HWN409dXpmOi48zXQWJDJRx0_xtG7uTE
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:14:38.169Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2Njg3OCwiZXhwIjoxNTg4MjY2ODc4LCJpc3MiOiJmZWF0aGVycyJ9.Dwx_UyEbsb5HWN409dXpmOi48zXQWJDJRx0_xtG7uTE' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:14:38.182Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ab7e3fdd10ba54f6f88f,
  timestamp: 2017-08-04T17:14:38.192Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:14:40.109Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2Njg4MCwiZXhwIjoxNTg4MjY2ODgwLCJpc3MiOiJmZWF0aGVycyJ9.JBFmsFKMydVlQ155lTwnTCtfQi6uAHoV_akgEB-1F48
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:14:40.109Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2Njg4MCwiZXhwIjoxNTg4MjY2ODgwLCJpc3MiOiJmZWF0aGVycyJ9.JBFmsFKMydVlQ155lTwnTCtfQi6uAHoV_akgEB-1F48' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:14:40.121Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ab803fdd10ba54f6f890,
  timestamp: 2017-08-04T17:14:40.126Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:42.689Z 2017-08-04T17:14:42.689Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab823fdd10ba54f6f891,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:42.691Z,
  from: 2017-08-04T17:09:42.689Z,
  to: 2017-08-04T17:14:42.689Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:14:46.685Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2Njg4NiwiZXhwIjoxNTg4MjY2ODg2LCJpc3MiOiJmZWF0aGVycyJ9.-4zK_C6XIWBrs_izop4aeVuUDbhUsKbi4y9PPd74Ex0
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:14:46.685Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2Njg4NiwiZXhwIjoxNTg4MjY2ODg2LCJpc3MiOiJmZWF0aGVycyJ9.-4zK_C6XIWBrs_izop4aeVuUDbhUsKbi4y9PPd74Ex0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:14:46.703Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ab863fdd10ba54f6f892,
  timestamp: 2017-08-04T17:14:46.707Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:47.694Z 2017-08-04T17:14:47.694Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab873fdd10ba54f6f893,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:47.696Z,
  from: 2017-08-04T17:09:47.694Z,
  to: 2017-08-04T17:14:47.694Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:52.696Z 2017-08-04T17:14:52.696Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab8c3fdd10ba54f6f894,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:52.698Z,
  from: 2017-08-04T17:09:52.696Z,
  to: 2017-08-04T17:14:52.696Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:09:57.700Z 2017-08-04T17:14:57.700Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab913fdd10ba54f6f895,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:14:57.707Z,
  from: 2017-08-04T17:09:57.700Z,
  to: 2017-08-04T17:14:57.700Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:02.706Z 2017-08-04T17:15:02.706Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab963fdd10ba54f6f896,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:02.747Z,
  from: 2017-08-04T17:10:02.706Z,
  to: 2017-08-04T17:15:02.706Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:07.716Z 2017-08-04T17:15:07.716Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ab9b3fdd10ba54f6f897,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:07.719Z,
  from: 2017-08-04T17:10:07.716Z,
  to: 2017-08-04T17:15:07.716Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:12.721Z 2017-08-04T17:15:12.721Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aba03fdd10ba54f6f898,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:12.736Z,
  from: 2017-08-04T17:10:12.721Z,
  to: 2017-08-04T17:15:12.721Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:17.734Z 2017-08-04T17:15:17.734Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aba53fdd10ba54f6f899,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:17.735Z,
  from: 2017-08-04T17:10:17.734Z,
  to: 2017-08-04T17:15:17.734Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:22.734Z 2017-08-04T17:15:22.734Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abaa3fdd10ba54f6f89a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:22.737Z,
  from: 2017-08-04T17:10:22.734Z,
  to: 2017-08-04T17:15:22.734Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:27.737Z 2017-08-04T17:15:27.737Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abaf3fdd10ba54f6f89b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:27.739Z,
  from: 2017-08-04T17:10:27.737Z,
  to: 2017-08-04T17:15:27.737Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:32.741Z 2017-08-04T17:15:32.741Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abb43fdd10ba54f6f89c,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:32.742Z,
  from: 2017-08-04T17:10:32.741Z,
  to: 2017-08-04T17:15:32.741Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 200331 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:10:37.747Z 2017-08-04T17:15:37.747Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abb93fdd10ba54f6f89d,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:37.749Z,
  from: 2017-08-04T17:10:37.747Z,
  to: 2017-08-04T17:15:37.747Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 27
4367344
2017-08-04T16:02:53.992Z
2017-08-04T17:15:41.336Z
2017-08-04T16:02:55.016Z
4293124
2017-08-04T16:04:08.212Z
2017-08-04T17:15:41.336Z
2017-08-04T16:04:09.113Z
4281400
2017-08-04T16:04:19.936Z
2017-08-04T17:15:41.336Z
2017-08-04T16:04:19.936Z
4259803
2017-08-04T16:04:41.533Z
2017-08-04T17:15:41.336Z
2017-08-04T16:04:41.533Z
4230099
2017-08-04T16:05:11.237Z
2017-08-04T17:15:41.336Z
2017-08-04T16:05:11.842Z
2665584
2017-08-04T16:31:15.752Z
2017-08-04T17:15:41.336Z
2017-08-04T16:31:16.861Z
2391777
2017-08-04T16:35:49.559Z
2017-08-04T17:15:41.336Z
2017-08-04T16:35:49.559Z
2032413
2017-08-04T16:41:48.923Z
2017-08-04T17:15:41.336Z
2017-08-04T16:41:48.923Z
2021928
2017-08-04T16:41:59.408Z
2017-08-04T17:15:41.336Z
2017-08-04T16:41:59.408Z
2005148
2017-08-04T16:42:16.188Z
2017-08-04T17:15:41.336Z
2017-08-04T16:42:16.657Z
1803566
2017-08-04T16:45:37.770Z
2017-08-04T17:15:41.336Z
2017-08-04T16:45:37.983Z
1800153
2017-08-04T16:45:41.183Z
2017-08-04T17:15:41.336Z
2017-08-04T16:45:41.268Z
1798489
2017-08-04T16:45:42.847Z
2017-08-04T17:15:41.336Z
2017-08-04T16:45:42.847Z
1796739
2017-08-04T16:45:44.597Z
2017-08-04T17:15:41.336Z
2017-08-04T16:45:44.597Z
1772167
2017-08-04T16:46:09.169Z
2017-08-04T17:15:41.336Z
2017-08-04T16:46:09.169Z
1703115
2017-08-04T16:47:18.221Z
2017-08-04T17:15:41.336Z
2017-08-04T16:47:19.117Z
1687344
2017-08-04T16:47:33.992Z
2017-08-04T17:15:41.336Z
2017-08-04T16:47:33.992Z
1686533
2017-08-04T16:47:34.803Z
2017-08-04T17:15:41.336Z
2017-08-04T16:47:35.368Z
1683365
2017-08-04T16:47:37.971Z
2017-08-04T17:15:41.336Z
2017-08-04T16:47:38.227Z
1673546
2017-08-04T16:47:47.790Z
2017-08-04T17:15:41.336Z
2017-08-04T16:47:49.155Z
1669322
2017-08-04T16:47:52.014Z
2017-08-04T17:15:41.336Z
2017-08-04T16:47:56.195Z
1664244
2017-08-04T16:47:57.092Z
2017-08-04T17:15:41.336Z
2017-08-04T16:47:57.219Z
1189726
2017-08-04T16:55:51.610Z
2017-08-04T17:15:41.336Z
2017-08-04T16:55:52.122Z
1038557
2017-08-04T16:58:22.779Z
2017-08-04T17:15:41.336Z
2017-08-04T16:58:22.779Z
1004931
2017-08-04T16:58:56.405Z
2017-08-04T17:15:41.336Z
2017-08-04T16:58:56.405Z
208041
2017-08-04T17:12:13.295Z
2017-08-04T17:15:41.336Z
2017-08-04T17:12:13.295Z
0
2017-08-04T17:15:41.336Z
2017-08-04T17:15:41.336Z
2017-08-04T17:15:41.336Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:10:42.751Z 2017-08-04T17:15:42.751Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abbe3fdd10ba54f6f89f,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:42.753Z,
  from: 2017-08-04T17:10:42.751Z,
  to: 2017-08-04T17:15:42.751Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:47.752Z 2017-08-04T17:15:47.752Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abc33fdd10ba54f6f8a0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:47.754Z,
  from: 2017-08-04T17:10:47.752Z,
  to: 2017-08-04T17:15:47.752Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:52.755Z 2017-08-04T17:15:52.755Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abc83fdd10ba54f6f8a1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:52.756Z,
  from: 2017-08-04T17:10:52.755Z,
  to: 2017-08-04T17:15:52.755Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:10:57.759Z 2017-08-04T17:15:57.759Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abcd3fdd10ba54f6f8a2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:15:57.761Z,
  from: 2017-08-04T17:10:57.759Z,
  to: 2017-08-04T17:15:57.759Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:02.763Z 2017-08-04T17:16:02.763Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abd23fdd10ba54f6f8a3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:02.765Z,
  from: 2017-08-04T17:11:02.763Z,
  to: 2017-08-04T17:16:02.763Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:07.772Z 2017-08-04T17:16:07.772Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abd73fdd10ba54f6f8a4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:07.784Z,
  from: 2017-08-04T17:11:07.772Z,
  to: 2017-08-04T17:16:07.772Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:12.774Z 2017-08-04T17:16:12.774Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abdc3fdd10ba54f6f8a5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:12.776Z,
  from: 2017-08-04T17:11:12.774Z,
  to: 2017-08-04T17:16:12.774Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:17.778Z 2017-08-04T17:16:17.778Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abe13fdd10ba54f6f8a6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:17.780Z,
  from: 2017-08-04T17:11:17.778Z,
  to: 2017-08-04T17:16:17.778Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:22.780Z 2017-08-04T17:16:22.780Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abe63fdd10ba54f6f8a7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:22.781Z,
  from: 2017-08-04T17:11:22.780Z,
  to: 2017-08-04T17:16:22.780Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:27.781Z 2017-08-04T17:16:27.781Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abeb3fdd10ba54f6f8a8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:27.784Z,
  from: 2017-08-04T17:11:27.781Z,
  to: 2017-08-04T17:16:27.781Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:32.781Z 2017-08-04T17:16:32.781Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abf03fdd10ba54f6f8a9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:32.784Z,
  from: 2017-08-04T17:11:32.781Z,
  to: 2017-08-04T17:16:32.781Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 52289 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:11:37.783Z 2017-08-04T17:16:37.783Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abf53fdd10ba54f6f8aa,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:37.785Z,
  from: 2017-08-04T17:11:37.783Z,
  to: 2017-08-04T17:16:37.783Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:42.786Z 2017-08-04T17:16:42.786Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abfa3fdd10ba54f6f8ab,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:42.789Z,
  from: 2017-08-04T17:11:42.786Z,
  to: 2017-08-04T17:16:42.786Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:47.792Z 2017-08-04T17:16:47.792Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984abff3fdd10ba54f6f8ac,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:47.795Z,
  from: 2017-08-04T17:11:47.792Z,
  to: 2017-08-04T17:16:47.792Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:52.794Z 2017-08-04T17:16:52.794Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac043fdd10ba54f6f8ad,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:52.795Z,
  from: 2017-08-04T17:11:52.794Z,
  to: 2017-08-04T17:16:52.794Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:11:57.799Z 2017-08-04T17:16:57.799Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac093fdd10ba54f6f8ae,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:16:57.801Z,
  from: 2017-08-04T17:11:57.799Z,
  to: 2017-08-04T17:16:57.799Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:02.803Z 2017-08-04T17:17:02.803Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac0e3fdd10ba54f6f8af,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:02.805Z,
  from: 2017-08-04T17:12:02.803Z,
  to: 2017-08-04T17:17:02.803Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:07.809Z 2017-08-04T17:17:07.809Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac133fdd10ba54f6f8b0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:07.812Z,
  from: 2017-08-04T17:12:07.809Z,
  to: 2017-08-04T17:17:07.809Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:12.812Z 2017-08-04T17:17:12.812Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac183fdd10ba54f6f8b1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:12.815Z,
  from: 2017-08-04T17:12:12.812Z,
  to: 2017-08-04T17:17:12.812Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:17.818Z 2017-08-04T17:17:17.818Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac1d3fdd10ba54f6f8b2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:17.820Z,
  from: 2017-08-04T17:12:17.818Z,
  to: 2017-08-04T17:17:17.818Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:22.823Z 2017-08-04T17:17:22.823Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac223fdd10ba54f6f8b3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:22.825Z,
  from: 2017-08-04T17:12:22.823Z,
  to: 2017-08-04T17:17:22.823Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:27.824Z 2017-08-04T17:17:27.824Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac273fdd10ba54f6f8b4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:27.826Z,
  from: 2017-08-04T17:12:27.824Z,
  to: 2017-08-04T17:17:27.824Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:32.826Z 2017-08-04T17:17:32.826Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac2c3fdd10ba54f6f8b5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:32.828Z,
  from: 2017-08-04T17:12:32.826Z,
  to: 2017-08-04T17:17:32.826Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 112286 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:12:37.832Z 2017-08-04T17:17:37.832Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac313fdd10ba54f6f8b6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:37.833Z,
  from: 2017-08-04T17:12:37.832Z,
  to: 2017-08-04T17:17:37.832Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:42.834Z 2017-08-04T17:17:42.834Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac363fdd10ba54f6f8b7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:42.836Z,
  from: 2017-08-04T17:12:42.834Z,
  to: 2017-08-04T17:17:42.834Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:47.836Z 2017-08-04T17:17:47.836Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac3b3fdd10ba54f6f8b8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:47.838Z,
  from: 2017-08-04T17:12:47.836Z,
  to: 2017-08-04T17:17:47.836Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:52.840Z 2017-08-04T17:17:52.840Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac403fdd10ba54f6f8b9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:52.844Z,
  from: 2017-08-04T17:12:52.840Z,
  to: 2017-08-04T17:17:52.840Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:12:57.844Z 2017-08-04T17:17:57.844Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac453fdd10ba54f6f8ba,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:17:57.845Z,
  from: 2017-08-04T17:12:57.844Z,
  to: 2017-08-04T17:17:57.844Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:02.849Z 2017-08-04T17:18:02.849Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac4a3fdd10ba54f6f8bb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:02.851Z,
  from: 2017-08-04T17:13:02.849Z,
  to: 2017-08-04T17:18:02.849Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:07.852Z 2017-08-04T17:18:07.852Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac4f3fdd10ba54f6f8bc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:07.854Z,
  from: 2017-08-04T17:13:07.852Z,
  to: 2017-08-04T17:18:07.852Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:12.854Z 2017-08-04T17:18:12.854Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac543fdd10ba54f6f8bd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:12.856Z,
  from: 2017-08-04T17:13:12.854Z,
  to: 2017-08-04T17:18:12.854Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:17.857Z 2017-08-04T17:18:17.857Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac593fdd10ba54f6f8be,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:17.863Z,
  from: 2017-08-04T17:13:17.857Z,
  to: 2017-08-04T17:18:17.857Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:22.864Z 2017-08-04T17:18:22.864Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac5e3fdd10ba54f6f8bf,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:22.865Z,
  from: 2017-08-04T17:13:22.864Z,
  to: 2017-08-04T17:18:22.864Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:27.865Z 2017-08-04T17:18:27.866Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac633fdd10ba54f6f8c0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:27.867Z,
  from: 2017-08-04T17:13:27.865Z,
  to: 2017-08-04T17:18:27.866Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:32.869Z 2017-08-04T17:18:32.869Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac683fdd10ba54f6f8c1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:32.871Z,
  from: 2017-08-04T17:13:32.869Z,
  to: 2017-08-04T17:18:32.869Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 172295 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: utterances found: 28
4539867
2017-08-04T16:02:53.992Z
2017-08-04T17:18:33.859Z
2017-08-04T16:02:55.016Z
4465647
2017-08-04T16:04:08.212Z
2017-08-04T17:18:33.859Z
2017-08-04T16:04:09.113Z
4453923
2017-08-04T16:04:19.936Z
2017-08-04T17:18:33.859Z
2017-08-04T16:04:19.936Z
4432326
2017-08-04T16:04:41.533Z
2017-08-04T17:18:33.859Z
2017-08-04T16:04:41.533Z
4402622
2017-08-04T16:05:11.237Z
2017-08-04T17:18:33.859Z
2017-08-04T16:05:11.842Z
2838107
2017-08-04T16:31:15.752Z
2017-08-04T17:18:33.859Z
2017-08-04T16:31:16.861Z
2564300
2017-08-04T16:35:49.559Z
2017-08-04T17:18:33.859Z
2017-08-04T16:35:49.559Z
2204936
2017-08-04T16:41:48.923Z
2017-08-04T17:18:33.859Z
2017-08-04T16:41:48.923Z
2194451
2017-08-04T16:41:59.408Z
2017-08-04T17:18:33.859Z
2017-08-04T16:41:59.408Z
2177671
2017-08-04T16:42:16.188Z
2017-08-04T17:18:33.859Z
2017-08-04T16:42:16.657Z
1976089
2017-08-04T16:45:37.770Z
2017-08-04T17:18:33.859Z
2017-08-04T16:45:37.983Z
1972676
2017-08-04T16:45:41.183Z
2017-08-04T17:18:33.859Z
2017-08-04T16:45:41.268Z
1971012
2017-08-04T16:45:42.847Z
2017-08-04T17:18:33.859Z
2017-08-04T16:45:42.847Z
1969262
2017-08-04T16:45:44.597Z
2017-08-04T17:18:33.859Z
2017-08-04T16:45:44.597Z
1944690
2017-08-04T16:46:09.169Z
2017-08-04T17:18:33.859Z
2017-08-04T16:46:09.169Z
1875638
2017-08-04T16:47:18.221Z
2017-08-04T17:18:33.859Z
2017-08-04T16:47:19.117Z
1859867
2017-08-04T16:47:33.992Z
2017-08-04T17:18:33.859Z
2017-08-04T16:47:33.992Z
1859056
2017-08-04T16:47:34.803Z
2017-08-04T17:18:33.859Z
2017-08-04T16:47:35.368Z
1855888
2017-08-04T16:47:37.971Z
2017-08-04T17:18:33.859Z
2017-08-04T16:47:38.227Z
1846069
2017-08-04T16:47:47.790Z
2017-08-04T17:18:33.859Z
2017-08-04T16:47:49.155Z
1841845
2017-08-04T16:47:52.014Z
2017-08-04T17:18:33.859Z
2017-08-04T16:47:56.195Z
1836767
2017-08-04T16:47:57.092Z
2017-08-04T17:18:33.859Z
2017-08-04T16:47:57.219Z
1362249
2017-08-04T16:55:51.610Z
2017-08-04T17:18:33.859Z
2017-08-04T16:55:52.122Z
1211080
2017-08-04T16:58:22.779Z
2017-08-04T17:18:33.859Z
2017-08-04T16:58:22.779Z
1177454
2017-08-04T16:58:56.405Z
2017-08-04T17:18:33.859Z
2017-08-04T16:58:56.405Z
380564
2017-08-04T17:12:13.295Z
2017-08-04T17:18:33.859Z
2017-08-04T17:12:13.295Z
172523
2017-08-04T17:15:41.336Z
2017-08-04T17:18:33.859Z
2017-08-04T17:15:41.336Z
0
2017-08-04T17:18:33.859Z
2017-08-04T17:18:33.859Z
2017-08-04T17:18:33.859Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:13:37.873Z 2017-08-04T17:18:37.873Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac6d3fdd10ba54f6f8c3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:37.876Z,
  from: 2017-08-04T17:13:37.873Z,
  to: 2017-08-04T17:18:37.873Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:42.875Z 2017-08-04T17:18:42.875Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac723fdd10ba54f6f8c4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:42.877Z,
  from: 2017-08-04T17:13:42.875Z,
  to: 2017-08-04T17:18:42.875Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:47.878Z 2017-08-04T17:18:47.878Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac773fdd10ba54f6f8c5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:47.881Z,
  from: 2017-08-04T17:13:47.878Z,
  to: 2017-08-04T17:18:47.878Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:52.880Z 2017-08-04T17:18:52.880Z
info: updated turns for meeting: no
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:18:54.123Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzEzNCwiZXhwIjoxNTg4MjY3MTM0LCJpc3MiOiJmZWF0aGVycyJ9.aWdKt0Am6qmNzdyyo2hfTDsjUkILT6X9Ae0grFEmBk0
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:18:54.123Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzEzNCwiZXhwIjoxNTg4MjY3MTM0LCJpc3MiOiJmZWF0aGVycyJ9.aWdKt0Am6qmNzdyyo2hfTDsjUkILT6X9Ae0grFEmBk0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:18:54.145Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ac7e3fdd10ba54f6f8c7,
  timestamp: 2017-08-04T17:18:54.149Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:13:57.884Z 2017-08-04T17:18:57.884Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac813fdd10ba54f6f8c8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:18:57.886Z,
  from: 2017-08-04T17:13:57.884Z,
  to: 2017-08-04T17:18:57.884Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:02.887Z 2017-08-04T17:19:02.887Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac863fdd10ba54f6f8c9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:02.888Z,
  from: 2017-08-04T17:14:02.887Z,
  to: 2017-08-04T17:19:02.887Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:07.891Z 2017-08-04T17:19:07.891Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac8b3fdd10ba54f6f8ca,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:07.893Z,
  from: 2017-08-04T17:14:07.891Z,
  to: 2017-08-04T17:19:07.891Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:19:12.254Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE1MiwiZXhwIjoxNTg4MjY3MTUyLCJpc3MiOiJmZWF0aGVycyJ9.C1h8lNq1FKPjg0eIflIsUOKk5WvRSnxEI14_rQKQsnE
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:19:12.254Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE1MiwiZXhwIjoxNTg4MjY3MTUyLCJpc3MiOiJmZWF0aGVycyJ9.C1h8lNq1FKPjg0eIflIsUOKk5WvRSnxEI14_rQKQsnE' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:19:12.270Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ac903fdd10ba54f6f8cb,
  timestamp: 2017-08-04T17:19:12.274Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:12.896Z 2017-08-04T17:19:12.896Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac903fdd10ba54f6f8cc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:12.898Z,
  from: 2017-08-04T17:14:12.896Z,
  to: 2017-08-04T17:19:12.896Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:17.898Z 2017-08-04T17:19:17.898Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac953fdd10ba54f6f8cd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:17.900Z,
  from: 2017-08-04T17:14:17.898Z,
  to: 2017-08-04T17:19:17.898Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:22.902Z 2017-08-04T17:19:22.902Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac9a3fdd10ba54f6f8ce,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:22.903Z,
  from: 2017-08-04T17:14:22.902Z,
  to: 2017-08-04T17:19:22.902Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:19:26.184Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE2NiwiZXhwIjoxNTg4MjY3MTY2LCJpc3MiOiJmZWF0aGVycyJ9.kp4LMm8AhEBaFi5liQ6yn4fKFHvh9CEdHsgF42CCeL8
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:19:26.184Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE2NiwiZXhwIjoxNTg4MjY3MTY2LCJpc3MiOiJmZWF0aGVycyJ9.kp4LMm8AhEBaFi5liQ6yn4fKFHvh9CEdHsgF42CCeL8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:19:26.203Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ac9e3fdd10ba54f6f8cf,
  timestamp: 2017-08-04T17:19:26.208Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:27.904Z 2017-08-04T17:19:27.904Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ac9f3fdd10ba54f6f8d0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:27.907Z,
  from: 2017-08-04T17:14:27.904Z,
  to: 2017-08-04T17:19:27.904Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:32.904Z 2017-08-04T17:19:32.904Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aca43fdd10ba54f6f8d1,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:32.906Z,
  from: 2017-08-04T17:14:32.904Z,
  to: 2017-08-04T17:19:32.904Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 59774 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:19:35.676Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE3NSwiZXhwIjoxNTg4MjY3MTc1LCJpc3MiOiJmZWF0aGVycyJ9.0HXqLT8XjoJLFVD3ZWg5drseaPzQqWOtmTcGBHE9nYg
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:19:35.676Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE3NSwiZXhwIjoxNTg4MjY3MTc1LCJpc3MiOiJmZWF0aGVycyJ9.0HXqLT8XjoJLFVD3ZWg5drseaPzQqWOtmTcGBHE9nYg' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:19:35.689Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984aca73fdd10ba54f6f8d2,
  timestamp: 2017-08-04T17:19:35.693Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:37.909Z 2017-08-04T17:19:37.909Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aca93fdd10ba54f6f8d3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:37.911Z,
  from: 2017-08-04T17:14:37.909Z,
  to: 2017-08-04T17:19:37.909Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:42.914Z 2017-08-04T17:19:42.914Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acae3fdd10ba54f6f8d4,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:42.916Z,
  from: 2017-08-04T17:14:42.914Z,
  to: 2017-08-04T17:19:42.914Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:19:47.176Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE4NywiZXhwIjoxNTg4MjY3MTg3LCJpc3MiOiJmZWF0aGVycyJ9.2r-hTepq5ReDDJx3HPlMuQTCZ8f5MWwK_hEXwTKhDig
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:19:47.176Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE4NywiZXhwIjoxNTg4MjY3MTg3LCJpc3MiOiJmZWF0aGVycyJ9.2r-hTepq5ReDDJx3HPlMuQTCZ8f5MWwK_hEXwTKhDig' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:19:47.189Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984acb33fdd10ba54f6f8d5,
  timestamp: 2017-08-04T17:19:47.193Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:47.918Z 2017-08-04T17:19:47.918Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acb33fdd10ba54f6f8d6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:47.920Z,
  from: 2017-08-04T17:14:47.918Z,
  to: 2017-08-04T17:19:47.918Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:52.920Z 2017-08-04T17:19:52.920Z
info: updated turns for meeting: no
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:19:53.751Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE5MywiZXhwIjoxNTg4MjY3MTkzLCJpc3MiOiJmZWF0aGVycyJ9.LOXr3bEaLL4WYPLm1qsosbf4iVafYMACJmhAlH5dXp4
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:19:53.751Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzE5MywiZXhwIjoxNTg4MjY3MTkzLCJpc3MiOiJmZWF0aGVycyJ9.LOXr3bEaLL4WYPLm1qsosbf4iVafYMACJmhAlH5dXp4' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:19:53.759Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984acb93fdd10ba54f6f8d8,
  timestamp: 2017-08-04T17:19:53.763Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:14:57.924Z 2017-08-04T17:19:57.924Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acbd3fdd10ba54f6f8d9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:19:57.926Z,
  from: 2017-08-04T17:14:57.924Z,
  to: 2017-08-04T17:19:57.924Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:15:02.927Z 2017-08-04T17:20:02.927Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acc23fdd10ba54f6f8da,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:02.934Z,
  from: 2017-08-04T17:15:02.927Z,
  to: 2017-08-04T17:20:02.927Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:15:07.931Z 2017-08-04T17:20:07.931Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acc73fdd10ba54f6f8db,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:07.933Z,
  from: 2017-08-04T17:15:07.931Z,
  to: 2017-08-04T17:20:07.931Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:15:12.932Z 2017-08-04T17:20:12.932Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984accc3fdd10ba54f6f8dc,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:12.934Z,
  from: 2017-08-04T17:15:12.932Z,
  to: 2017-08-04T17:20:12.932Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:15:17.935Z 2017-08-04T17:20:17.935Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acd13fdd10ba54f6f8dd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:17.937Z,
  from: 2017-08-04T17:15:17.935Z,
  to: 2017-08-04T17:20:17.935Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 29
4646167
2017-08-04T16:02:53.992Z
2017-08-04T17:20:20.159Z
2017-08-04T16:02:55.016Z
4571947
2017-08-04T16:04:08.212Z
2017-08-04T17:20:20.159Z
2017-08-04T16:04:09.113Z
4560223
2017-08-04T16:04:19.936Z
2017-08-04T17:20:20.159Z
2017-08-04T16:04:19.936Z
4538626
2017-08-04T16:04:41.533Z
2017-08-04T17:20:20.159Z
2017-08-04T16:04:41.533Z
4508922
2017-08-04T16:05:11.237Z
2017-08-04T17:20:20.159Z
2017-08-04T16:05:11.842Z
2944407
2017-08-04T16:31:15.752Z
2017-08-04T17:20:20.159Z
2017-08-04T16:31:16.861Z
2670600
2017-08-04T16:35:49.559Z
2017-08-04T17:20:20.159Z
2017-08-04T16:35:49.559Z
2311236
2017-08-04T16:41:48.923Z
2017-08-04T17:20:20.159Z
2017-08-04T16:41:48.923Z
2300751
2017-08-04T16:41:59.408Z
2017-08-04T17:20:20.159Z
2017-08-04T16:41:59.408Z
2283971
2017-08-04T16:42:16.188Z
2017-08-04T17:20:20.159Z
2017-08-04T16:42:16.657Z
2082389
2017-08-04T16:45:37.770Z
2017-08-04T17:20:20.159Z
2017-08-04T16:45:37.983Z
2078976
2017-08-04T16:45:41.183Z
2017-08-04T17:20:20.159Z
2017-08-04T16:45:41.268Z
2077312
2017-08-04T16:45:42.847Z
2017-08-04T17:20:20.159Z
2017-08-04T16:45:42.847Z
2075562
2017-08-04T16:45:44.597Z
2017-08-04T17:20:20.159Z
2017-08-04T16:45:44.597Z
2050990
2017-08-04T16:46:09.169Z
2017-08-04T17:20:20.159Z
2017-08-04T16:46:09.169Z
1981938
2017-08-04T16:47:18.221Z
2017-08-04T17:20:20.159Z
2017-08-04T16:47:19.117Z
1966167
2017-08-04T16:47:33.992Z
2017-08-04T17:20:20.159Z
2017-08-04T16:47:33.992Z
1965356
2017-08-04T16:47:34.803Z
2017-08-04T17:20:20.159Z
2017-08-04T16:47:35.368Z
1962188
2017-08-04T16:47:37.971Z
2017-08-04T17:20:20.159Z
2017-08-04T16:47:38.227Z
1952369
2017-08-04T16:47:47.790Z
2017-08-04T17:20:20.159Z
2017-08-04T16:47:49.155Z
1948145
2017-08-04T16:47:52.014Z
2017-08-04T17:20:20.159Z
2017-08-04T16:47:56.195Z
1943067
2017-08-04T16:47:57.092Z
2017-08-04T17:20:20.159Z
2017-08-04T16:47:57.219Z
1468549
2017-08-04T16:55:51.610Z
2017-08-04T17:20:20.159Z
2017-08-04T16:55:52.122Z
1317380
2017-08-04T16:58:22.779Z
2017-08-04T17:20:20.159Z
2017-08-04T16:58:22.779Z
1283754
2017-08-04T16:58:56.405Z
2017-08-04T17:20:20.159Z
2017-08-04T16:58:56.405Z
486864
2017-08-04T17:12:13.295Z
2017-08-04T17:20:20.159Z
2017-08-04T17:12:13.295Z
278823
2017-08-04T17:15:41.336Z
2017-08-04T17:20:20.159Z
2017-08-04T17:15:41.336Z
106300
2017-08-04T17:18:33.859Z
2017-08-04T17:20:20.159Z
2017-08-04T17:18:33.859Z
0
2017-08-04T17:20:20.159Z
2017-08-04T17:20:20.159Z
2017-08-04T17:20:20.202Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 30
4647282
2017-08-04T16:02:53.992Z
2017-08-04T17:20:21.274Z
2017-08-04T16:02:55.016Z
4573062
2017-08-04T16:04:08.212Z
2017-08-04T17:20:21.274Z
2017-08-04T16:04:09.113Z
4561338
2017-08-04T16:04:19.936Z
2017-08-04T17:20:21.274Z
2017-08-04T16:04:19.936Z
4539741
2017-08-04T16:04:41.533Z
2017-08-04T17:20:21.274Z
2017-08-04T16:04:41.533Z
4510037
2017-08-04T16:05:11.237Z
2017-08-04T17:20:21.274Z
2017-08-04T16:05:11.842Z
2945522
2017-08-04T16:31:15.752Z
2017-08-04T17:20:21.274Z
2017-08-04T16:31:16.861Z
2671715
2017-08-04T16:35:49.559Z
2017-08-04T17:20:21.274Z
2017-08-04T16:35:49.559Z
2312351
2017-08-04T16:41:48.923Z
2017-08-04T17:20:21.274Z
2017-08-04T16:41:48.923Z
2301866
2017-08-04T16:41:59.408Z
2017-08-04T17:20:21.274Z
2017-08-04T16:41:59.408Z
2285086
2017-08-04T16:42:16.188Z
2017-08-04T17:20:21.274Z
2017-08-04T16:42:16.657Z
2083504
2017-08-04T16:45:37.770Z
2017-08-04T17:20:21.274Z
2017-08-04T16:45:37.983Z
2080091
2017-08-04T16:45:41.183Z
2017-08-04T17:20:21.274Z
2017-08-04T16:45:41.268Z
2078427
2017-08-04T16:45:42.847Z
2017-08-04T17:20:21.274Z
2017-08-04T16:45:42.847Z
2076677
2017-08-04T16:45:44.597Z
2017-08-04T17:20:21.274Z
2017-08-04T16:45:44.597Z
2052105
2017-08-04T16:46:09.169Z
2017-08-04T17:20:21.274Z
2017-08-04T16:46:09.169Z
1983053
2017-08-04T16:47:18.221Z
2017-08-04T17:20:21.274Z
2017-08-04T16:47:19.117Z
1967282
2017-08-04T16:47:33.992Z
2017-08-04T17:20:21.274Z
2017-08-04T16:47:33.992Z
1966471
2017-08-04T16:47:34.803Z
2017-08-04T17:20:21.274Z
2017-08-04T16:47:35.368Z
1963303
2017-08-04T16:47:37.971Z
2017-08-04T17:20:21.274Z
2017-08-04T16:47:38.227Z
1953484
2017-08-04T16:47:47.790Z
2017-08-04T17:20:21.274Z
2017-08-04T16:47:49.155Z
1949260
2017-08-04T16:47:52.014Z
2017-08-04T17:20:21.274Z
2017-08-04T16:47:56.195Z
1944182
2017-08-04T16:47:57.092Z
2017-08-04T17:20:21.274Z
2017-08-04T16:47:57.219Z
1469664
2017-08-04T16:55:51.610Z
2017-08-04T17:20:21.274Z
2017-08-04T16:55:52.122Z
1318495
2017-08-04T16:58:22.779Z
2017-08-04T17:20:21.274Z
2017-08-04T16:58:22.779Z
1284869
2017-08-04T16:58:56.405Z
2017-08-04T17:20:21.274Z
2017-08-04T16:58:56.405Z
487979
2017-08-04T17:12:13.295Z
2017-08-04T17:20:21.274Z
2017-08-04T17:12:13.295Z
279938
2017-08-04T17:15:41.336Z
2017-08-04T17:20:21.274Z
2017-08-04T17:15:41.336Z
107415
2017-08-04T17:18:33.859Z
2017-08-04T17:20:21.274Z
2017-08-04T17:18:33.859Z
1115
2017-08-04T17:20:20.159Z
2017-08-04T17:20:21.274Z
2017-08-04T17:20:20.202Z
0
2017-08-04T17:20:21.274Z
2017-08-04T17:20:21.274Z
2017-08-04T17:20:21.578Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:15:22.938Z 2017-08-04T17:20:22.938Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acd63fdd10ba54f6f8e0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:22.940Z,
  from: 2017-08-04T17:15:22.938Z,
  to: 2017-08-04T17:20:22.938Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 31
4649165
2017-08-04T16:02:53.992Z
2017-08-04T17:20:23.157Z
2017-08-04T16:02:55.016Z
4574945
2017-08-04T16:04:08.212Z
2017-08-04T17:20:23.157Z
2017-08-04T16:04:09.113Z
4563221
2017-08-04T16:04:19.936Z
2017-08-04T17:20:23.157Z
2017-08-04T16:04:19.936Z
4541624
2017-08-04T16:04:41.533Z
2017-08-04T17:20:23.157Z
2017-08-04T16:04:41.533Z
4511920
2017-08-04T16:05:11.237Z
2017-08-04T17:20:23.157Z
2017-08-04T16:05:11.842Z
2947405
2017-08-04T16:31:15.752Z
2017-08-04T17:20:23.157Z
2017-08-04T16:31:16.861Z
2673598
2017-08-04T16:35:49.559Z
2017-08-04T17:20:23.157Z
2017-08-04T16:35:49.559Z
2314234
2017-08-04T16:41:48.923Z
2017-08-04T17:20:23.157Z
2017-08-04T16:41:48.923Z
2303749
2017-08-04T16:41:59.408Z
2017-08-04T17:20:23.157Z
2017-08-04T16:41:59.408Z
2286969
2017-08-04T16:42:16.188Z
2017-08-04T17:20:23.157Z
2017-08-04T16:42:16.657Z
2085387
2017-08-04T16:45:37.770Z
2017-08-04T17:20:23.157Z
2017-08-04T16:45:37.983Z
2081974
2017-08-04T16:45:41.183Z
2017-08-04T17:20:23.157Z
2017-08-04T16:45:41.268Z
2080310
2017-08-04T16:45:42.847Z
2017-08-04T17:20:23.157Z
2017-08-04T16:45:42.847Z
2078560
2017-08-04T16:45:44.597Z
2017-08-04T17:20:23.157Z
2017-08-04T16:45:44.597Z
2053988
2017-08-04T16:46:09.169Z
2017-08-04T17:20:23.157Z
2017-08-04T16:46:09.169Z
1984936
2017-08-04T16:47:18.221Z
2017-08-04T17:20:23.157Z
2017-08-04T16:47:19.117Z
1969165
2017-08-04T16:47:33.992Z
2017-08-04T17:20:23.157Z
2017-08-04T16:47:33.992Z
1968354
2017-08-04T16:47:34.803Z
2017-08-04T17:20:23.157Z
2017-08-04T16:47:35.368Z
1965186
2017-08-04T16:47:37.971Z
2017-08-04T17:20:23.157Z
2017-08-04T16:47:38.227Z
1955367
2017-08-04T16:47:47.790Z
2017-08-04T17:20:23.157Z
2017-08-04T16:47:49.155Z
1951143
2017-08-04T16:47:52.014Z
2017-08-04T17:20:23.157Z
2017-08-04T16:47:56.195Z
1946065
2017-08-04T16:47:57.092Z
2017-08-04T17:20:23.157Z
2017-08-04T16:47:57.219Z
1471547
2017-08-04T16:55:51.610Z
2017-08-04T17:20:23.157Z
2017-08-04T16:55:52.122Z
1320378
2017-08-04T16:58:22.779Z
2017-08-04T17:20:23.157Z
2017-08-04T16:58:22.779Z
1286752
2017-08-04T16:58:56.405Z
2017-08-04T17:20:23.157Z
2017-08-04T16:58:56.405Z
489862
2017-08-04T17:12:13.295Z
2017-08-04T17:20:23.157Z
2017-08-04T17:12:13.295Z
281821
2017-08-04T17:15:41.336Z
2017-08-04T17:20:23.157Z
2017-08-04T17:15:41.336Z
109298
2017-08-04T17:18:33.859Z
2017-08-04T17:20:23.157Z
2017-08-04T17:18:33.859Z
2998
2017-08-04T17:20:20.159Z
2017-08-04T17:20:23.157Z
2017-08-04T17:20:20.202Z
1883
2017-08-04T17:20:21.274Z
2017-08-04T17:20:23.157Z
2017-08-04T17:20:21.578Z
0
2017-08-04T17:20:23.157Z
2017-08-04T17:20:23.157Z
2017-08-04T17:20:23.200Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 32
4649890
2017-08-04T16:02:53.992Z
2017-08-04T17:20:23.882Z
2017-08-04T16:02:55.016Z
4575670
2017-08-04T16:04:08.212Z
2017-08-04T17:20:23.882Z
2017-08-04T16:04:09.113Z
4563946
2017-08-04T16:04:19.936Z
2017-08-04T17:20:23.882Z
2017-08-04T16:04:19.936Z
4542349
2017-08-04T16:04:41.533Z
2017-08-04T17:20:23.882Z
2017-08-04T16:04:41.533Z
4512645
2017-08-04T16:05:11.237Z
2017-08-04T17:20:23.882Z
2017-08-04T16:05:11.842Z
2948130
2017-08-04T16:31:15.752Z
2017-08-04T17:20:23.882Z
2017-08-04T16:31:16.861Z
2674323
2017-08-04T16:35:49.559Z
2017-08-04T17:20:23.882Z
2017-08-04T16:35:49.559Z
2314959
2017-08-04T16:41:48.923Z
2017-08-04T17:20:23.882Z
2017-08-04T16:41:48.923Z
2304474
2017-08-04T16:41:59.408Z
2017-08-04T17:20:23.882Z
2017-08-04T16:41:59.408Z
2287694
2017-08-04T16:42:16.188Z
2017-08-04T17:20:23.882Z
2017-08-04T16:42:16.657Z
2086112
2017-08-04T16:45:37.770Z
2017-08-04T17:20:23.882Z
2017-08-04T16:45:37.983Z
2082699
2017-08-04T16:45:41.183Z
2017-08-04T17:20:23.882Z
2017-08-04T16:45:41.268Z
2081035
2017-08-04T16:45:42.847Z
2017-08-04T17:20:23.882Z
2017-08-04T16:45:42.847Z
2079285
2017-08-04T16:45:44.597Z
2017-08-04T17:20:23.882Z
2017-08-04T16:45:44.597Z
2054713
2017-08-04T16:46:09.169Z
2017-08-04T17:20:23.882Z
2017-08-04T16:46:09.169Z
1985661
2017-08-04T16:47:18.221Z
2017-08-04T17:20:23.882Z
2017-08-04T16:47:19.117Z
1969890
2017-08-04T16:47:33.992Z
2017-08-04T17:20:23.882Z
2017-08-04T16:47:33.992Z
1969079
2017-08-04T16:47:34.803Z
2017-08-04T17:20:23.882Z
2017-08-04T16:47:35.368Z
1965911
2017-08-04T16:47:37.971Z
2017-08-04T17:20:23.882Z
2017-08-04T16:47:38.227Z
1956092
2017-08-04T16:47:47.790Z
2017-08-04T17:20:23.882Z
2017-08-04T16:47:49.155Z
1951868
2017-08-04T16:47:52.014Z
2017-08-04T17:20:23.882Z
2017-08-04T16:47:56.195Z
1946790
2017-08-04T16:47:57.092Z
2017-08-04T17:20:23.882Z
2017-08-04T16:47:57.219Z
1472272
2017-08-04T16:55:51.610Z
2017-08-04T17:20:23.882Z
2017-08-04T16:55:52.122Z
1321103
2017-08-04T16:58:22.779Z
2017-08-04T17:20:23.882Z
2017-08-04T16:58:22.779Z
1287477
2017-08-04T16:58:56.405Z
2017-08-04T17:20:23.882Z
2017-08-04T16:58:56.405Z
490587
2017-08-04T17:12:13.295Z
2017-08-04T17:20:23.882Z
2017-08-04T17:12:13.295Z
282546
2017-08-04T17:15:41.336Z
2017-08-04T17:20:23.882Z
2017-08-04T17:15:41.336Z
110023
2017-08-04T17:18:33.859Z
2017-08-04T17:20:23.882Z
2017-08-04T17:18:33.859Z
3723
2017-08-04T17:20:20.159Z
2017-08-04T17:20:23.882Z
2017-08-04T17:20:20.202Z
2608
2017-08-04T17:20:21.274Z
2017-08-04T17:20:23.882Z
2017-08-04T17:20:21.578Z
725
2017-08-04T17:20:23.157Z
2017-08-04T17:20:23.882Z
2017-08-04T17:20:23.200Z
0
2017-08-04T17:20:23.882Z
2017-08-04T17:20:23.882Z
2017-08-04T17:20:25.930Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:15:27.941Z 2017-08-04T17:20:27.941Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acdb3fdd10ba54f6f8e3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:27.943Z,
  from: 2017-08-04T17:15:27.941Z,
  to: 2017-08-04T17:20:27.941Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 33
4653090
2017-08-04T16:02:53.992Z
2017-08-04T17:20:27.082Z
2017-08-04T16:02:55.016Z
4578870
2017-08-04T16:04:08.212Z
2017-08-04T17:20:27.082Z
2017-08-04T16:04:09.113Z
4567146
2017-08-04T16:04:19.936Z
2017-08-04T17:20:27.082Z
2017-08-04T16:04:19.936Z
4545549
2017-08-04T16:04:41.533Z
2017-08-04T17:20:27.082Z
2017-08-04T16:04:41.533Z
4515845
2017-08-04T16:05:11.237Z
2017-08-04T17:20:27.082Z
2017-08-04T16:05:11.842Z
2951330
2017-08-04T16:31:15.752Z
2017-08-04T17:20:27.082Z
2017-08-04T16:31:16.861Z
2677523
2017-08-04T16:35:49.559Z
2017-08-04T17:20:27.082Z
2017-08-04T16:35:49.559Z
2318159
2017-08-04T16:41:48.923Z
2017-08-04T17:20:27.082Z
2017-08-04T16:41:48.923Z
2307674
2017-08-04T16:41:59.408Z
2017-08-04T17:20:27.082Z
2017-08-04T16:41:59.408Z
2290894
2017-08-04T16:42:16.188Z
2017-08-04T17:20:27.082Z
2017-08-04T16:42:16.657Z
2089312
2017-08-04T16:45:37.770Z
2017-08-04T17:20:27.082Z
2017-08-04T16:45:37.983Z
2085899
2017-08-04T16:45:41.183Z
2017-08-04T17:20:27.082Z
2017-08-04T16:45:41.268Z
2084235
2017-08-04T16:45:42.847Z
2017-08-04T17:20:27.082Z
2017-08-04T16:45:42.847Z
2082485
2017-08-04T16:45:44.597Z
2017-08-04T17:20:27.082Z
2017-08-04T16:45:44.597Z
2057913
2017-08-04T16:46:09.169Z
2017-08-04T17:20:27.082Z
2017-08-04T16:46:09.169Z
1988861
2017-08-04T16:47:18.221Z
2017-08-04T17:20:27.082Z
2017-08-04T16:47:19.117Z
1973090
2017-08-04T16:47:33.992Z
2017-08-04T17:20:27.082Z
2017-08-04T16:47:33.992Z
1972279
2017-08-04T16:47:34.803Z
2017-08-04T17:20:27.082Z
2017-08-04T16:47:35.368Z
1969111
2017-08-04T16:47:37.971Z
2017-08-04T17:20:27.082Z
2017-08-04T16:47:38.227Z
1959292
2017-08-04T16:47:47.790Z
2017-08-04T17:20:27.082Z
2017-08-04T16:47:49.155Z
1955068
2017-08-04T16:47:52.014Z
2017-08-04T17:20:27.082Z
2017-08-04T16:47:56.195Z
1949990
2017-08-04T16:47:57.092Z
2017-08-04T17:20:27.082Z
2017-08-04T16:47:57.219Z
1475472
2017-08-04T16:55:51.610Z
2017-08-04T17:20:27.082Z
2017-08-04T16:55:52.122Z
1324303
2017-08-04T16:58:22.779Z
2017-08-04T17:20:27.082Z
2017-08-04T16:58:22.779Z
1290677
2017-08-04T16:58:56.405Z
2017-08-04T17:20:27.082Z
2017-08-04T16:58:56.405Z
493787
2017-08-04T17:12:13.295Z
2017-08-04T17:20:27.082Z
2017-08-04T17:12:13.295Z
285746
2017-08-04T17:15:41.336Z
2017-08-04T17:20:27.082Z
2017-08-04T17:15:41.336Z
113223
2017-08-04T17:18:33.859Z
2017-08-04T17:20:27.082Z
2017-08-04T17:18:33.859Z
6923
2017-08-04T17:20:20.159Z
2017-08-04T17:20:27.082Z
2017-08-04T17:20:20.202Z
5808
2017-08-04T17:20:21.274Z
2017-08-04T17:20:27.082Z
2017-08-04T17:20:21.578Z
3925
2017-08-04T17:20:23.157Z
2017-08-04T17:20:27.082Z
2017-08-04T17:20:23.200Z
3200
2017-08-04T17:20:23.882Z
2017-08-04T17:20:27.082Z
2017-08-04T17:20:25.930Z
0
2017-08-04T17:20:27.082Z
2017-08-04T17:20:27.082Z
2017-08-04T17:20:29.472Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:15:32.946Z 2017-08-04T17:20:32.946Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ace03fdd10ba54f6f8e5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:32.948Z,
  from: 2017-08-04T17:15:32.946Z,
  to: 2017-08-04T17:20:32.946Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 4165 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: utterances found: 34
4656888
2017-08-04T16:02:53.992Z
2017-08-04T17:20:30.880Z
2017-08-04T16:02:55.016Z
4582668
2017-08-04T16:04:08.212Z
2017-08-04T17:20:30.880Z
2017-08-04T16:04:09.113Z
4570944
2017-08-04T16:04:19.936Z
2017-08-04T17:20:30.880Z
2017-08-04T16:04:19.936Z
4549347
2017-08-04T16:04:41.533Z
2017-08-04T17:20:30.880Z
2017-08-04T16:04:41.533Z
4519643
2017-08-04T16:05:11.237Z
2017-08-04T17:20:30.880Z
2017-08-04T16:05:11.842Z
2955128
2017-08-04T16:31:15.752Z
2017-08-04T17:20:30.880Z
2017-08-04T16:31:16.861Z
2681321
2017-08-04T16:35:49.559Z
2017-08-04T17:20:30.880Z
2017-08-04T16:35:49.559Z
2321957
2017-08-04T16:41:48.923Z
2017-08-04T17:20:30.880Z
2017-08-04T16:41:48.923Z
2311472
2017-08-04T16:41:59.408Z
2017-08-04T17:20:30.880Z
2017-08-04T16:41:59.408Z
2294692
2017-08-04T16:42:16.188Z
2017-08-04T17:20:30.880Z
2017-08-04T16:42:16.657Z
2093110
2017-08-04T16:45:37.770Z
2017-08-04T17:20:30.880Z
2017-08-04T16:45:37.983Z
2089697
2017-08-04T16:45:41.183Z
2017-08-04T17:20:30.880Z
2017-08-04T16:45:41.268Z
2088033
2017-08-04T16:45:42.847Z
2017-08-04T17:20:30.880Z
2017-08-04T16:45:42.847Z
2086283
2017-08-04T16:45:44.597Z
2017-08-04T17:20:30.880Z
2017-08-04T16:45:44.597Z
2061711
2017-08-04T16:46:09.169Z
2017-08-04T17:20:30.880Z
2017-08-04T16:46:09.169Z
1992659
2017-08-04T16:47:18.221Z
2017-08-04T17:20:30.880Z
2017-08-04T16:47:19.117Z
1976888
2017-08-04T16:47:33.992Z
2017-08-04T17:20:30.880Z
2017-08-04T16:47:33.992Z
1976077
2017-08-04T16:47:34.803Z
2017-08-04T17:20:30.880Z
2017-08-04T16:47:35.368Z
1972909
2017-08-04T16:47:37.971Z
2017-08-04T17:20:30.880Z
2017-08-04T16:47:38.227Z
1963090
2017-08-04T16:47:47.790Z
2017-08-04T17:20:30.880Z
2017-08-04T16:47:49.155Z
1958866
2017-08-04T16:47:52.014Z
2017-08-04T17:20:30.880Z
2017-08-04T16:47:56.195Z
1953788
2017-08-04T16:47:57.092Z
2017-08-04T17:20:30.880Z
2017-08-04T16:47:57.219Z
1479270
2017-08-04T16:55:51.610Z
2017-08-04T17:20:30.880Z
2017-08-04T16:55:52.122Z
1328101
2017-08-04T16:58:22.779Z
2017-08-04T17:20:30.880Z
2017-08-04T16:58:22.779Z
1294475
2017-08-04T16:58:56.405Z
2017-08-04T17:20:30.880Z
2017-08-04T16:58:56.405Z
497585
2017-08-04T17:12:13.295Z
2017-08-04T17:20:30.880Z
2017-08-04T17:12:13.295Z
289544
2017-08-04T17:15:41.336Z
2017-08-04T17:20:30.880Z
2017-08-04T17:15:41.336Z
117021
2017-08-04T17:18:33.859Z
2017-08-04T17:20:30.880Z
2017-08-04T17:18:33.859Z
10721
2017-08-04T17:20:20.159Z
2017-08-04T17:20:30.880Z
2017-08-04T17:20:20.202Z
9606
2017-08-04T17:20:21.274Z
2017-08-04T17:20:30.880Z
2017-08-04T17:20:21.578Z
7723
2017-08-04T17:20:23.157Z
2017-08-04T17:20:30.880Z
2017-08-04T17:20:23.200Z
6998
2017-08-04T17:20:23.882Z
2017-08-04T17:20:30.880Z
2017-08-04T17:20:25.930Z
3798
2017-08-04T17:20:27.082Z
2017-08-04T17:20:30.880Z
2017-08-04T17:20:29.472Z
0
2017-08-04T17:20:30.880Z
2017-08-04T17:20:30.880Z
2017-08-04T17:20:34.170Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 35
4661162
2017-08-04T16:02:53.992Z
2017-08-04T17:20:35.154Z
2017-08-04T16:02:55.016Z
4586942
2017-08-04T16:04:08.212Z
2017-08-04T17:20:35.154Z
2017-08-04T16:04:09.113Z
4575218
2017-08-04T16:04:19.936Z
2017-08-04T17:20:35.154Z
2017-08-04T16:04:19.936Z
4553621
2017-08-04T16:04:41.533Z
2017-08-04T17:20:35.154Z
2017-08-04T16:04:41.533Z
4523917
2017-08-04T16:05:11.237Z
2017-08-04T17:20:35.154Z
2017-08-04T16:05:11.842Z
2959402
2017-08-04T16:31:15.752Z
2017-08-04T17:20:35.154Z
2017-08-04T16:31:16.861Z
2685595
2017-08-04T16:35:49.559Z
2017-08-04T17:20:35.154Z
2017-08-04T16:35:49.559Z
2326231
2017-08-04T16:41:48.923Z
2017-08-04T17:20:35.154Z
2017-08-04T16:41:48.923Z
2315746
2017-08-04T16:41:59.408Z
2017-08-04T17:20:35.154Z
2017-08-04T16:41:59.408Z
2298966
2017-08-04T16:42:16.188Z
2017-08-04T17:20:35.154Z
2017-08-04T16:42:16.657Z
2097384
2017-08-04T16:45:37.770Z
2017-08-04T17:20:35.154Z
2017-08-04T16:45:37.983Z
2093971
2017-08-04T16:45:41.183Z
2017-08-04T17:20:35.154Z
2017-08-04T16:45:41.268Z
2092307
2017-08-04T16:45:42.847Z
2017-08-04T17:20:35.154Z
2017-08-04T16:45:42.847Z
2090557
2017-08-04T16:45:44.597Z
2017-08-04T17:20:35.154Z
2017-08-04T16:45:44.597Z
2065985
2017-08-04T16:46:09.169Z
2017-08-04T17:20:35.154Z
2017-08-04T16:46:09.169Z
1996933
2017-08-04T16:47:18.221Z
2017-08-04T17:20:35.154Z
2017-08-04T16:47:19.117Z
1981162
2017-08-04T16:47:33.992Z
2017-08-04T17:20:35.154Z
2017-08-04T16:47:33.992Z
1980351
2017-08-04T16:47:34.803Z
2017-08-04T17:20:35.154Z
2017-08-04T16:47:35.368Z
1977183
2017-08-04T16:47:37.971Z
2017-08-04T17:20:35.154Z
2017-08-04T16:47:38.227Z
1967364
2017-08-04T16:47:47.790Z
2017-08-04T17:20:35.154Z
2017-08-04T16:47:49.155Z
1963140
2017-08-04T16:47:52.014Z
2017-08-04T17:20:35.154Z
2017-08-04T16:47:56.195Z
1958062
2017-08-04T16:47:57.092Z
2017-08-04T17:20:35.154Z
2017-08-04T16:47:57.219Z
1483544
2017-08-04T16:55:51.610Z
2017-08-04T17:20:35.154Z
2017-08-04T16:55:52.122Z
1332375
2017-08-04T16:58:22.779Z
2017-08-04T17:20:35.154Z
2017-08-04T16:58:22.779Z
1298749
2017-08-04T16:58:56.405Z
2017-08-04T17:20:35.154Z
2017-08-04T16:58:56.405Z
501859
2017-08-04T17:12:13.295Z
2017-08-04T17:20:35.154Z
2017-08-04T17:12:13.295Z
293818
2017-08-04T17:15:41.336Z
2017-08-04T17:20:35.154Z
2017-08-04T17:15:41.336Z
121295
2017-08-04T17:18:33.859Z
2017-08-04T17:20:35.154Z
2017-08-04T17:18:33.859Z
14995
2017-08-04T17:20:20.159Z
2017-08-04T17:20:35.154Z
2017-08-04T17:20:20.202Z
13880
2017-08-04T17:20:21.274Z
2017-08-04T17:20:35.154Z
2017-08-04T17:20:21.578Z
11997
2017-08-04T17:20:23.157Z
2017-08-04T17:20:35.154Z
2017-08-04T17:20:23.200Z
11272
2017-08-04T17:20:23.882Z
2017-08-04T17:20:35.154Z
2017-08-04T17:20:25.930Z
8072
2017-08-04T17:20:27.082Z
2017-08-04T17:20:35.154Z
2017-08-04T17:20:29.472Z
4274
2017-08-04T17:20:30.880Z
2017-08-04T17:20:35.154Z
2017-08-04T17:20:34.170Z
0
2017-08-04T17:20:35.154Z
2017-08-04T17:20:35.154Z
2017-08-04T17:20:35.154Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:15:37.948Z 2017-08-04T17:20:37.948Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ace53fdd10ba54f6f8e8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:37.951Z,
  from: 2017-08-04T17:15:37.948Z,
  to: 2017-08-04T17:20:37.948Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 36
4664573
2017-08-04T16:02:53.992Z
2017-08-04T17:20:38.565Z
2017-08-04T16:02:55.016Z
4590353
2017-08-04T16:04:08.212Z
2017-08-04T17:20:38.565Z
2017-08-04T16:04:09.113Z
4578629
2017-08-04T16:04:19.936Z
2017-08-04T17:20:38.565Z
2017-08-04T16:04:19.936Z
4557032
2017-08-04T16:04:41.533Z
2017-08-04T17:20:38.565Z
2017-08-04T16:04:41.533Z
4527328
2017-08-04T16:05:11.237Z
2017-08-04T17:20:38.565Z
2017-08-04T16:05:11.842Z
2962813
2017-08-04T16:31:15.752Z
2017-08-04T17:20:38.565Z
2017-08-04T16:31:16.861Z
2689006
2017-08-04T16:35:49.559Z
2017-08-04T17:20:38.565Z
2017-08-04T16:35:49.559Z
2329642
2017-08-04T16:41:48.923Z
2017-08-04T17:20:38.565Z
2017-08-04T16:41:48.923Z
2319157
2017-08-04T16:41:59.408Z
2017-08-04T17:20:38.565Z
2017-08-04T16:41:59.408Z
2302377
2017-08-04T16:42:16.188Z
2017-08-04T17:20:38.565Z
2017-08-04T16:42:16.657Z
2100795
2017-08-04T16:45:37.770Z
2017-08-04T17:20:38.565Z
2017-08-04T16:45:37.983Z
2097382
2017-08-04T16:45:41.183Z
2017-08-04T17:20:38.565Z
2017-08-04T16:45:41.268Z
2095718
2017-08-04T16:45:42.847Z
2017-08-04T17:20:38.565Z
2017-08-04T16:45:42.847Z
2093968
2017-08-04T16:45:44.597Z
2017-08-04T17:20:38.565Z
2017-08-04T16:45:44.597Z
2069396
2017-08-04T16:46:09.169Z
2017-08-04T17:20:38.565Z
2017-08-04T16:46:09.169Z
2000344
2017-08-04T16:47:18.221Z
2017-08-04T17:20:38.565Z
2017-08-04T16:47:19.117Z
1984573
2017-08-04T16:47:33.992Z
2017-08-04T17:20:38.565Z
2017-08-04T16:47:33.992Z
1983762
2017-08-04T16:47:34.803Z
2017-08-04T17:20:38.565Z
2017-08-04T16:47:35.368Z
1980594
2017-08-04T16:47:37.971Z
2017-08-04T17:20:38.565Z
2017-08-04T16:47:38.227Z
1970775
2017-08-04T16:47:47.790Z
2017-08-04T17:20:38.565Z
2017-08-04T16:47:49.155Z
1966551
2017-08-04T16:47:52.014Z
2017-08-04T17:20:38.565Z
2017-08-04T16:47:56.195Z
1961473
2017-08-04T16:47:57.092Z
2017-08-04T17:20:38.565Z
2017-08-04T16:47:57.219Z
1486955
2017-08-04T16:55:51.610Z
2017-08-04T17:20:38.565Z
2017-08-04T16:55:52.122Z
1335786
2017-08-04T16:58:22.779Z
2017-08-04T17:20:38.565Z
2017-08-04T16:58:22.779Z
1302160
2017-08-04T16:58:56.405Z
2017-08-04T17:20:38.565Z
2017-08-04T16:58:56.405Z
505270
2017-08-04T17:12:13.295Z
2017-08-04T17:20:38.565Z
2017-08-04T17:12:13.295Z
297229
2017-08-04T17:15:41.336Z
2017-08-04T17:20:38.565Z
2017-08-04T17:15:41.336Z
124706
2017-08-04T17:18:33.859Z
2017-08-04T17:20:38.565Z
2017-08-04T17:18:33.859Z
18406
2017-08-04T17:20:20.159Z
2017-08-04T17:20:38.565Z
2017-08-04T17:20:20.202Z
17291
2017-08-04T17:20:21.274Z
2017-08-04T17:20:38.565Z
2017-08-04T17:20:21.578Z
15408
2017-08-04T17:20:23.157Z
2017-08-04T17:20:38.565Z
2017-08-04T17:20:23.200Z
14683
2017-08-04T17:20:23.882Z
2017-08-04T17:20:38.565Z
2017-08-04T17:20:25.930Z
11483
2017-08-04T17:20:27.082Z
2017-08-04T17:20:38.565Z
2017-08-04T17:20:29.472Z
7685
2017-08-04T17:20:30.880Z
2017-08-04T17:20:38.565Z
2017-08-04T17:20:34.170Z
3411
2017-08-04T17:20:35.154Z
2017-08-04T17:20:38.565Z
2017-08-04T17:20:35.154Z
0
2017-08-04T17:20:38.565Z
2017-08-04T17:20:38.565Z
2017-08-04T17:20:38.651Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:15:42.954Z 2017-08-04T17:20:42.954Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acea3fdd10ba54f6f8ea,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:42.961Z,
  from: 2017-08-04T17:15:42.954Z,
  to: 2017-08-04T17:20:42.954Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 37
4668920
2017-08-04T16:02:53.992Z
2017-08-04T17:20:42.912Z
2017-08-04T16:02:55.016Z
4594700
2017-08-04T16:04:08.212Z
2017-08-04T17:20:42.912Z
2017-08-04T16:04:09.113Z
4582976
2017-08-04T16:04:19.936Z
2017-08-04T17:20:42.912Z
2017-08-04T16:04:19.936Z
4561379
2017-08-04T16:04:41.533Z
2017-08-04T17:20:42.912Z
2017-08-04T16:04:41.533Z
4531675
2017-08-04T16:05:11.237Z
2017-08-04T17:20:42.912Z
2017-08-04T16:05:11.842Z
2967160
2017-08-04T16:31:15.752Z
2017-08-04T17:20:42.912Z
2017-08-04T16:31:16.861Z
2693353
2017-08-04T16:35:49.559Z
2017-08-04T17:20:42.912Z
2017-08-04T16:35:49.559Z
2333989
2017-08-04T16:41:48.923Z
2017-08-04T17:20:42.912Z
2017-08-04T16:41:48.923Z
2323504
2017-08-04T16:41:59.408Z
2017-08-04T17:20:42.912Z
2017-08-04T16:41:59.408Z
2306724
2017-08-04T16:42:16.188Z
2017-08-04T17:20:42.912Z
2017-08-04T16:42:16.657Z
2105142
2017-08-04T16:45:37.770Z
2017-08-04T17:20:42.912Z
2017-08-04T16:45:37.983Z
2101729
2017-08-04T16:45:41.183Z
2017-08-04T17:20:42.912Z
2017-08-04T16:45:41.268Z
2100065
2017-08-04T16:45:42.847Z
2017-08-04T17:20:42.912Z
2017-08-04T16:45:42.847Z
2098315
2017-08-04T16:45:44.597Z
2017-08-04T17:20:42.912Z
2017-08-04T16:45:44.597Z
2073743
2017-08-04T16:46:09.169Z
2017-08-04T17:20:42.912Z
2017-08-04T16:46:09.169Z
2004691
2017-08-04T16:47:18.221Z
2017-08-04T17:20:42.912Z
2017-08-04T16:47:19.117Z
1988920
2017-08-04T16:47:33.992Z
2017-08-04T17:20:42.912Z
2017-08-04T16:47:33.992Z
1988109
2017-08-04T16:47:34.803Z
2017-08-04T17:20:42.912Z
2017-08-04T16:47:35.368Z
1984941
2017-08-04T16:47:37.971Z
2017-08-04T17:20:42.912Z
2017-08-04T16:47:38.227Z
1975122
2017-08-04T16:47:47.790Z
2017-08-04T17:20:42.912Z
2017-08-04T16:47:49.155Z
1970898
2017-08-04T16:47:52.014Z
2017-08-04T17:20:42.912Z
2017-08-04T16:47:56.195Z
1965820
2017-08-04T16:47:57.092Z
2017-08-04T17:20:42.912Z
2017-08-04T16:47:57.219Z
1491302
2017-08-04T16:55:51.610Z
2017-08-04T17:20:42.912Z
2017-08-04T16:55:52.122Z
1340133
2017-08-04T16:58:22.779Z
2017-08-04T17:20:42.912Z
2017-08-04T16:58:22.779Z
1306507
2017-08-04T16:58:56.405Z
2017-08-04T17:20:42.912Z
2017-08-04T16:58:56.405Z
509617
2017-08-04T17:12:13.295Z
2017-08-04T17:20:42.912Z
2017-08-04T17:12:13.295Z
301576
2017-08-04T17:15:41.336Z
2017-08-04T17:20:42.912Z
2017-08-04T17:15:41.336Z
129053
2017-08-04T17:18:33.859Z
2017-08-04T17:20:42.912Z
2017-08-04T17:18:33.859Z
22753
2017-08-04T17:20:20.159Z
2017-08-04T17:20:42.912Z
2017-08-04T17:20:20.202Z
21638
2017-08-04T17:20:21.274Z
2017-08-04T17:20:42.912Z
2017-08-04T17:20:21.578Z
19755
2017-08-04T17:20:23.157Z
2017-08-04T17:20:42.912Z
2017-08-04T17:20:23.200Z
19030
2017-08-04T17:20:23.882Z
2017-08-04T17:20:42.912Z
2017-08-04T17:20:25.930Z
15830
2017-08-04T17:20:27.082Z
2017-08-04T17:20:42.912Z
2017-08-04T17:20:29.472Z
12032
2017-08-04T17:20:30.880Z
2017-08-04T17:20:42.912Z
2017-08-04T17:20:34.170Z
7758
2017-08-04T17:20:35.154Z
2017-08-04T17:20:42.912Z
2017-08-04T17:20:35.154Z
4347
2017-08-04T17:20:38.565Z
2017-08-04T17:20:42.912Z
2017-08-04T17:20:38.651Z
0
2017-08-04T17:20:42.912Z
2017-08-04T17:20:42.912Z
2017-08-04T17:20:43.040Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 38
4672909
2017-08-04T16:02:53.992Z
2017-08-04T17:20:46.901Z
2017-08-04T16:02:55.016Z
4598689
2017-08-04T16:04:08.212Z
2017-08-04T17:20:46.901Z
2017-08-04T16:04:09.113Z
4586965
2017-08-04T16:04:19.936Z
2017-08-04T17:20:46.901Z
2017-08-04T16:04:19.936Z
4565368
2017-08-04T16:04:41.533Z
2017-08-04T17:20:46.901Z
2017-08-04T16:04:41.533Z
4535664
2017-08-04T16:05:11.237Z
2017-08-04T17:20:46.901Z
2017-08-04T16:05:11.842Z
2971149
2017-08-04T16:31:15.752Z
2017-08-04T17:20:46.901Z
2017-08-04T16:31:16.861Z
2697342
2017-08-04T16:35:49.559Z
2017-08-04T17:20:46.901Z
2017-08-04T16:35:49.559Z
2337978
2017-08-04T16:41:48.923Z
2017-08-04T17:20:46.901Z
2017-08-04T16:41:48.923Z
2327493
2017-08-04T16:41:59.408Z
2017-08-04T17:20:46.901Z
2017-08-04T16:41:59.408Z
2310713
2017-08-04T16:42:16.188Z
2017-08-04T17:20:46.901Z
2017-08-04T16:42:16.657Z
2109131
2017-08-04T16:45:37.770Z
2017-08-04T17:20:46.901Z
2017-08-04T16:45:37.983Z
2105718
2017-08-04T16:45:41.183Z
2017-08-04T17:20:46.901Z
2017-08-04T16:45:41.268Z
2104054
2017-08-04T16:45:42.847Z
2017-08-04T17:20:46.901Z
2017-08-04T16:45:42.847Z
2102304
2017-08-04T16:45:44.597Z
2017-08-04T17:20:46.901Z
2017-08-04T16:45:44.597Z
2077732
2017-08-04T16:46:09.169Z
2017-08-04T17:20:46.901Z
2017-08-04T16:46:09.169Z
2008680
2017-08-04T16:47:18.221Z
2017-08-04T17:20:46.901Z
2017-08-04T16:47:19.117Z
1992909
2017-08-04T16:47:33.992Z
2017-08-04T17:20:46.901Z
2017-08-04T16:47:33.992Z
1992098
2017-08-04T16:47:34.803Z
2017-08-04T17:20:46.901Z
2017-08-04T16:47:35.368Z
1988930
2017-08-04T16:47:37.971Z
2017-08-04T17:20:46.901Z
2017-08-04T16:47:38.227Z
1979111
2017-08-04T16:47:47.790Z
2017-08-04T17:20:46.901Z
2017-08-04T16:47:49.155Z
1974887
2017-08-04T16:47:52.014Z
2017-08-04T17:20:46.901Z
2017-08-04T16:47:56.195Z
1969809
2017-08-04T16:47:57.092Z
2017-08-04T17:20:46.901Z
2017-08-04T16:47:57.219Z
1495291
2017-08-04T16:55:51.610Z
2017-08-04T17:20:46.901Z
2017-08-04T16:55:52.122Z
1344122
2017-08-04T16:58:22.779Z
2017-08-04T17:20:46.901Z
2017-08-04T16:58:22.779Z
1310496
2017-08-04T16:58:56.405Z
2017-08-04T17:20:46.901Z
2017-08-04T16:58:56.405Z
513606
2017-08-04T17:12:13.295Z
2017-08-04T17:20:46.901Z
2017-08-04T17:12:13.295Z
305565
2017-08-04T17:15:41.336Z
2017-08-04T17:20:46.901Z
2017-08-04T17:15:41.336Z
133042
2017-08-04T17:18:33.859Z
2017-08-04T17:20:46.901Z
2017-08-04T17:18:33.859Z
26742
2017-08-04T17:20:20.159Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:20.202Z
25627
2017-08-04T17:20:21.274Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:21.578Z
23744
2017-08-04T17:20:23.157Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:23.200Z
23019
2017-08-04T17:20:23.882Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:25.930Z
19819
2017-08-04T17:20:27.082Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:29.472Z
16021
2017-08-04T17:20:30.880Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:34.170Z
11747
2017-08-04T17:20:35.154Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:35.154Z
8336
2017-08-04T17:20:38.565Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:38.651Z
3989
2017-08-04T17:20:42.912Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:43.040Z
0
2017-08-04T17:20:46.901Z
2017-08-04T17:20:46.901Z
2017-08-04T17:20:47.072Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:15:47.957Z 2017-08-04T17:20:47.957Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acef3fdd10ba54f6f8ed,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:47.960Z,
  from: 2017-08-04T17:15:47.957Z,
  to: 2017-08-04T17:20:47.957Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 39
4674445
2017-08-04T16:02:53.992Z
2017-08-04T17:20:48.437Z
2017-08-04T16:02:55.016Z
4600225
2017-08-04T16:04:08.212Z
2017-08-04T17:20:48.437Z
2017-08-04T16:04:09.113Z
4588501
2017-08-04T16:04:19.936Z
2017-08-04T17:20:48.437Z
2017-08-04T16:04:19.936Z
4566904
2017-08-04T16:04:41.533Z
2017-08-04T17:20:48.437Z
2017-08-04T16:04:41.533Z
4537200
2017-08-04T16:05:11.237Z
2017-08-04T17:20:48.437Z
2017-08-04T16:05:11.842Z
2972685
2017-08-04T16:31:15.752Z
2017-08-04T17:20:48.437Z
2017-08-04T16:31:16.861Z
2698878
2017-08-04T16:35:49.559Z
2017-08-04T17:20:48.437Z
2017-08-04T16:35:49.559Z
2339514
2017-08-04T16:41:48.923Z
2017-08-04T17:20:48.437Z
2017-08-04T16:41:48.923Z
2329029
2017-08-04T16:41:59.408Z
2017-08-04T17:20:48.437Z
2017-08-04T16:41:59.408Z
2312249
2017-08-04T16:42:16.188Z
2017-08-04T17:20:48.437Z
2017-08-04T16:42:16.657Z
2110667
2017-08-04T16:45:37.770Z
2017-08-04T17:20:48.437Z
2017-08-04T16:45:37.983Z
2107254
2017-08-04T16:45:41.183Z
2017-08-04T17:20:48.437Z
2017-08-04T16:45:41.268Z
2105590
2017-08-04T16:45:42.847Z
2017-08-04T17:20:48.437Z
2017-08-04T16:45:42.847Z
2103840
2017-08-04T16:45:44.597Z
2017-08-04T17:20:48.437Z
2017-08-04T16:45:44.597Z
2079268
2017-08-04T16:46:09.169Z
2017-08-04T17:20:48.437Z
2017-08-04T16:46:09.169Z
2010216
2017-08-04T16:47:18.221Z
2017-08-04T17:20:48.437Z
2017-08-04T16:47:19.117Z
1994445
2017-08-04T16:47:33.992Z
2017-08-04T17:20:48.437Z
2017-08-04T16:47:33.992Z
1993634
2017-08-04T16:47:34.803Z
2017-08-04T17:20:48.437Z
2017-08-04T16:47:35.368Z
1990466
2017-08-04T16:47:37.971Z
2017-08-04T17:20:48.437Z
2017-08-04T16:47:38.227Z
1980647
2017-08-04T16:47:47.790Z
2017-08-04T17:20:48.437Z
2017-08-04T16:47:49.155Z
1976423
2017-08-04T16:47:52.014Z
2017-08-04T17:20:48.437Z
2017-08-04T16:47:56.195Z
1971345
2017-08-04T16:47:57.092Z
2017-08-04T17:20:48.437Z
2017-08-04T16:47:57.219Z
1496827
2017-08-04T16:55:51.610Z
2017-08-04T17:20:48.437Z
2017-08-04T16:55:52.122Z
1345658
2017-08-04T16:58:22.779Z
2017-08-04T17:20:48.437Z
2017-08-04T16:58:22.779Z
1312032
2017-08-04T16:58:56.405Z
2017-08-04T17:20:48.437Z
2017-08-04T16:58:56.405Z
515142
2017-08-04T17:12:13.295Z
2017-08-04T17:20:48.437Z
2017-08-04T17:12:13.295Z
307101
2017-08-04T17:15:41.336Z
2017-08-04T17:20:48.437Z
2017-08-04T17:15:41.336Z
134578
2017-08-04T17:18:33.859Z
2017-08-04T17:20:48.437Z
2017-08-04T17:18:33.859Z
28278
2017-08-04T17:20:20.159Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:20.202Z
27163
2017-08-04T17:20:21.274Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:21.578Z
25280
2017-08-04T17:20:23.157Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:23.200Z
24555
2017-08-04T17:20:23.882Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:25.930Z
21355
2017-08-04T17:20:27.082Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:29.472Z
17557
2017-08-04T17:20:30.880Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:34.170Z
13283
2017-08-04T17:20:35.154Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:35.154Z
9872
2017-08-04T17:20:38.565Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:38.651Z
5525
2017-08-04T17:20:42.912Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:43.040Z
1536
2017-08-04T17:20:46.901Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:47.072Z
0
2017-08-04T17:20:48.437Z
2017-08-04T17:20:48.437Z
2017-08-04T17:20:48.522Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:15:52.962Z 2017-08-04T17:20:52.962Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acf43fdd10ba54f6f8ef,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:52.964Z,
  from: 2017-08-04T17:15:52.962Z,
  to: 2017-08-04T17:20:52.962Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:15:57.963Z 2017-08-04T17:20:57.963Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acf93fdd10ba54f6f8f0,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:20:57.966Z,
  from: 2017-08-04T17:15:57.963Z,
  to: 2017-08-04T17:20:57.963Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 40
4686270
2017-08-04T16:02:53.992Z
2017-08-04T17:21:00.262Z
2017-08-04T16:02:55.016Z
4612050
2017-08-04T16:04:08.212Z
2017-08-04T17:21:00.262Z
2017-08-04T16:04:09.113Z
4600326
2017-08-04T16:04:19.936Z
2017-08-04T17:21:00.262Z
2017-08-04T16:04:19.936Z
4578729
2017-08-04T16:04:41.533Z
2017-08-04T17:21:00.262Z
2017-08-04T16:04:41.533Z
4549025
2017-08-04T16:05:11.237Z
2017-08-04T17:21:00.262Z
2017-08-04T16:05:11.842Z
2984510
2017-08-04T16:31:15.752Z
2017-08-04T17:21:00.262Z
2017-08-04T16:31:16.861Z
2710703
2017-08-04T16:35:49.559Z
2017-08-04T17:21:00.262Z
2017-08-04T16:35:49.559Z
2351339
2017-08-04T16:41:48.923Z
2017-08-04T17:21:00.262Z
2017-08-04T16:41:48.923Z
2340854
2017-08-04T16:41:59.408Z
2017-08-04T17:21:00.262Z
2017-08-04T16:41:59.408Z
2324074
2017-08-04T16:42:16.188Z
2017-08-04T17:21:00.262Z
2017-08-04T16:42:16.657Z
2122492
2017-08-04T16:45:37.770Z
2017-08-04T17:21:00.262Z
2017-08-04T16:45:37.983Z
2119079
2017-08-04T16:45:41.183Z
2017-08-04T17:21:00.262Z
2017-08-04T16:45:41.268Z
2117415
2017-08-04T16:45:42.847Z
2017-08-04T17:21:00.262Z
2017-08-04T16:45:42.847Z
2115665
2017-08-04T16:45:44.597Z
2017-08-04T17:21:00.262Z
2017-08-04T16:45:44.597Z
2091093
2017-08-04T16:46:09.169Z
2017-08-04T17:21:00.262Z
2017-08-04T16:46:09.169Z
2022041
2017-08-04T16:47:18.221Z
2017-08-04T17:21:00.262Z
2017-08-04T16:47:19.117Z
2006270
2017-08-04T16:47:33.992Z
2017-08-04T17:21:00.262Z
2017-08-04T16:47:33.992Z
2005459
2017-08-04T16:47:34.803Z
2017-08-04T17:21:00.262Z
2017-08-04T16:47:35.368Z
2002291
2017-08-04T16:47:37.971Z
2017-08-04T17:21:00.262Z
2017-08-04T16:47:38.227Z
1992472
2017-08-04T16:47:47.790Z
2017-08-04T17:21:00.262Z
2017-08-04T16:47:49.155Z
1988248
2017-08-04T16:47:52.014Z
2017-08-04T17:21:00.262Z
2017-08-04T16:47:56.195Z
1983170
2017-08-04T16:47:57.092Z
2017-08-04T17:21:00.262Z
2017-08-04T16:47:57.219Z
1508652
2017-08-04T16:55:51.610Z
2017-08-04T17:21:00.262Z
2017-08-04T16:55:52.122Z
1357483
2017-08-04T16:58:22.779Z
2017-08-04T17:21:00.262Z
2017-08-04T16:58:22.779Z
1323857
2017-08-04T16:58:56.405Z
2017-08-04T17:21:00.262Z
2017-08-04T16:58:56.405Z
526967
2017-08-04T17:12:13.295Z
2017-08-04T17:21:00.262Z
2017-08-04T17:12:13.295Z
318926
2017-08-04T17:15:41.336Z
2017-08-04T17:21:00.262Z
2017-08-04T17:15:41.336Z
146403
2017-08-04T17:18:33.859Z
2017-08-04T17:21:00.262Z
2017-08-04T17:18:33.859Z
40103
2017-08-04T17:20:20.159Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:20.202Z
38988
2017-08-04T17:20:21.274Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:21.578Z
37105
2017-08-04T17:20:23.157Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:23.200Z
36380
2017-08-04T17:20:23.882Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:25.930Z
33180
2017-08-04T17:20:27.082Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:29.472Z
29382
2017-08-04T17:20:30.880Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:34.170Z
25108
2017-08-04T17:20:35.154Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:35.154Z
21697
2017-08-04T17:20:38.565Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:38.651Z
17350
2017-08-04T17:20:42.912Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:43.040Z
13361
2017-08-04T17:20:46.901Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:47.072Z
11825
2017-08-04T17:20:48.437Z
2017-08-04T17:21:00.262Z
2017-08-04T17:20:48.522Z
0
2017-08-04T17:21:00.262Z
2017-08-04T17:21:00.262Z
2017-08-04T17:21:00.646Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:16:02.965Z 2017-08-04T17:21:02.965Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984acff3fdd10ba54f6f8f2,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:03.014Z,
  from: 2017-08-04T17:16:02.965Z,
  to: 2017-08-04T17:21:02.965Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:16:07.968Z 2017-08-04T17:21:07.968Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad033fdd10ba54f6f8f3,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:07.971Z,
  from: 2017-08-04T17:16:07.968Z,
  to: 2017-08-04T17:21:07.968Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 41
4694270
2017-08-04T16:02:53.992Z
2017-08-04T17:21:08.262Z
2017-08-04T16:02:55.016Z
4620050
2017-08-04T16:04:08.212Z
2017-08-04T17:21:08.262Z
2017-08-04T16:04:09.113Z
4608326
2017-08-04T16:04:19.936Z
2017-08-04T17:21:08.262Z
2017-08-04T16:04:19.936Z
4586729
2017-08-04T16:04:41.533Z
2017-08-04T17:21:08.262Z
2017-08-04T16:04:41.533Z
4557025
2017-08-04T16:05:11.237Z
2017-08-04T17:21:08.262Z
2017-08-04T16:05:11.842Z
2992510
2017-08-04T16:31:15.752Z
2017-08-04T17:21:08.262Z
2017-08-04T16:31:16.861Z
2718703
2017-08-04T16:35:49.559Z
2017-08-04T17:21:08.262Z
2017-08-04T16:35:49.559Z
2359339
2017-08-04T16:41:48.923Z
2017-08-04T17:21:08.262Z
2017-08-04T16:41:48.923Z
2348854
2017-08-04T16:41:59.408Z
2017-08-04T17:21:08.262Z
2017-08-04T16:41:59.408Z
2332074
2017-08-04T16:42:16.188Z
2017-08-04T17:21:08.262Z
2017-08-04T16:42:16.657Z
2130492
2017-08-04T16:45:37.770Z
2017-08-04T17:21:08.262Z
2017-08-04T16:45:37.983Z
2127079
2017-08-04T16:45:41.183Z
2017-08-04T17:21:08.262Z
2017-08-04T16:45:41.268Z
2125415
2017-08-04T16:45:42.847Z
2017-08-04T17:21:08.262Z
2017-08-04T16:45:42.847Z
2123665
2017-08-04T16:45:44.597Z
2017-08-04T17:21:08.262Z
2017-08-04T16:45:44.597Z
2099093
2017-08-04T16:46:09.169Z
2017-08-04T17:21:08.262Z
2017-08-04T16:46:09.169Z
2030041
2017-08-04T16:47:18.221Z
2017-08-04T17:21:08.262Z
2017-08-04T16:47:19.117Z
2014270
2017-08-04T16:47:33.992Z
2017-08-04T17:21:08.262Z
2017-08-04T16:47:33.992Z
2013459
2017-08-04T16:47:34.803Z
2017-08-04T17:21:08.262Z
2017-08-04T16:47:35.368Z
2010291
2017-08-04T16:47:37.971Z
2017-08-04T17:21:08.262Z
2017-08-04T16:47:38.227Z
2000472
2017-08-04T16:47:47.790Z
2017-08-04T17:21:08.262Z
2017-08-04T16:47:49.155Z
1996248
2017-08-04T16:47:52.014Z
2017-08-04T17:21:08.262Z
2017-08-04T16:47:56.195Z
1991170
2017-08-04T16:47:57.092Z
2017-08-04T17:21:08.262Z
2017-08-04T16:47:57.219Z
1516652
2017-08-04T16:55:51.610Z
2017-08-04T17:21:08.262Z
2017-08-04T16:55:52.122Z
1365483
2017-08-04T16:58:22.779Z
2017-08-04T17:21:08.262Z
2017-08-04T16:58:22.779Z
1331857
2017-08-04T16:58:56.405Z
2017-08-04T17:21:08.262Z
2017-08-04T16:58:56.405Z
534967
2017-08-04T17:12:13.295Z
2017-08-04T17:21:08.262Z
2017-08-04T17:12:13.295Z
326926
2017-08-04T17:15:41.336Z
2017-08-04T17:21:08.262Z
2017-08-04T17:15:41.336Z
154403
2017-08-04T17:18:33.859Z
2017-08-04T17:21:08.262Z
2017-08-04T17:18:33.859Z
48103
2017-08-04T17:20:20.159Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:20.202Z
46988
2017-08-04T17:20:21.274Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:21.578Z
45105
2017-08-04T17:20:23.157Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:23.200Z
44380
2017-08-04T17:20:23.882Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:25.930Z
41180
2017-08-04T17:20:27.082Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:29.472Z
37382
2017-08-04T17:20:30.880Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:34.170Z
33108
2017-08-04T17:20:35.154Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:35.154Z
29697
2017-08-04T17:20:38.565Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:38.651Z
25350
2017-08-04T17:20:42.912Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:43.040Z
21361
2017-08-04T17:20:46.901Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:47.072Z
19825
2017-08-04T17:20:48.437Z
2017-08-04T17:21:08.262Z
2017-08-04T17:20:48.522Z
8000
2017-08-04T17:21:00.262Z
2017-08-04T17:21:08.262Z
2017-08-04T17:21:00.646Z
0
2017-08-04T17:21:08.262Z
2017-08-04T17:21:08.262Z
2017-08-04T17:21:08.304Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:16:12.976Z 2017-08-04T17:21:12.976Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad083fdd10ba54f6f8f5,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:12.981Z,
  from: 2017-08-04T17:16:12.976Z,
  to: 2017-08-04T17:21:12.976Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:16:17.979Z 2017-08-04T17:21:17.979Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad0e3fdd10ba54f6f8f6,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:18.021Z,
  from: 2017-08-04T17:16:17.979Z,
  to: 2017-08-04T17:21:17.979Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:16:22.982Z 2017-08-04T17:21:22.982Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad123fdd10ba54f6f8f7,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:22.985Z,
  from: 2017-08-04T17:16:22.982Z,
  to: 2017-08-04T17:21:22.982Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:16:27.984Z 2017-08-04T17:21:27.984Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad173fdd10ba54f6f8f8,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:27.987Z,
  from: 2017-08-04T17:16:27.984Z,
  to: 2017-08-04T17:21:27.984Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:16:32.987Z 2017-08-04T17:21:32.987Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad1c3fdd10ba54f6f8f9,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:32.990Z,
  from: 2017-08-04T17:16:32.987Z,
  to: 2017-08-04T17:21:32.987Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 25345 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:16:37.992Z 2017-08-04T17:21:37.992Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad213fdd10ba54f6f8fa,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:37.995Z,
  from: 2017-08-04T17:16:37.992Z,
  to: 2017-08-04T17:21:37.992Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:16:42.996Z 2017-08-04T17:21:42.996Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad273fdd10ba54f6f8fb,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:43.000Z,
  from: 2017-08-04T17:16:42.996Z,
  to: 2017-08-04T17:21:42.996Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:21:45.338Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMwNSwiZXhwIjoxNTg4MjY3MzA1LCJpc3MiOiJmZWF0aGVycyJ9.scnHcwIRPB_X_z7fef2LhfTRR5VIRyir8ii3AHHk8NY
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:21:45.338Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMwNSwiZXhwIjoxNTg4MjY3MzA1LCJpc3MiOiJmZWF0aGVycyJ9.scnHcwIRPB_X_z7fef2LhfTRR5VIRyir8ii3AHHk8NY' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:21:45.359Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ad293fdd10ba54f6f8fc,
  timestamp: 2017-08-04T17:21:45.365Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:16:47.998Z 2017-08-04T17:21:47.998Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad2c3fdd10ba54f6f8fd,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:48.001Z,
  from: 2017-08-04T17:16:47.998Z,
  to: 2017-08-04T17:21:47.998Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:16:52.999Z 2017-08-04T17:21:52.999Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad313fdd10ba54f6f8fe,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:53.002Z,
  from: 2017-08-04T17:16:52.999Z,
  to: 2017-08-04T17:21:52.999Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:21:54.796Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMxNCwiZXhwIjoxNTg4MjY3MzE0LCJpc3MiOiJmZWF0aGVycyJ9.MK8Cis20VVskSksBqAAPkLibNEtoDM3a-4MLrzDJzl0
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:21:54.796Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMxNCwiZXhwIjoxNTg4MjY3MzE0LCJpc3MiOiJmZWF0aGVycyJ9.MK8Cis20VVskSksBqAAPkLibNEtoDM3a-4MLrzDJzl0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:21:54.808Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ad323fdd10ba54f6f8ff,
  timestamp: 2017-08-04T17:21:54.812Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:16:58.003Z 2017-08-04T17:21:58.003Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad363fdd10ba54f6f900,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:21:58.009Z,
  from: 2017-08-04T17:16:58.003Z,
  to: 2017-08-04T17:21:58.003Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:22:02.663Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMyMiwiZXhwIjoxNTg4MjY3MzIyLCJpc3MiOiJmZWF0aGVycyJ9.Gw4VOEpfIYxzG7TFf74GTYk2NT1j828zT7PuXFOthos
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:22:02.663Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMyMiwiZXhwIjoxNTg4MjY3MzIyLCJpc3MiOiJmZWF0aGVycyJ9.Gw4VOEpfIYxzG7TFf74GTYk2NT1j828zT7PuXFOthos' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-04T17:22:02.678Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5984ad3a3fdd10ba54f6f901,
  timestamp: 2017-08-04T17:22:02.683Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:03.007Z 2017-08-04T17:22:03.007Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad3b3fdd10ba54f6f902,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:03.010Z,
  from: 2017-08-04T17:17:03.007Z,
  to: 2017-08-04T17:22:03.007Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=dog, name=dog, participants=[participant=jordan, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:22:04.849Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMyNCwiZXhwIjoxNTg4MjY3MzI0LCJpc3MiOiJmZWF0aGVycyJ9.7HT4Fyttx-SgAYgrgx62P4XFKrLs1xWn_95wFkttjf8
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:22:04.849Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMyNCwiZXhwIjoxNTg4MjY3MzI0LCJpc3MiOiJmZWF0aGVycyJ9.7HT4Fyttx-SgAYgrgx62P4XFKrLs1xWn_95wFkttjf8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog' ]
info: not adding participant: { participants: [ 'jordan', 'dog' ],
  lastUpdated: 2017-08-04T17:22:04.912Z } no
updated meeting with participants { participants: [ 'jordan', 'dog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog' ],
  _id: 5984ad3c3fdd10ba54f6f903,
  timestamp: 2017-08-04T17:22:04.923Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog' ],
  _id: 5984ad3c3fdd10ba54f6f903,
  timestamp: 2017-08-04T17:22:04.923Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:08.009Z 2017-08-04T17:22:08.009Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad403fdd10ba54f6f904,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:08.013Z,
  from: 2017-08-04T17:17:08.009Z,
  to: 2017-08-04T17:22:08.009Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad403fdd10ba54f6f904,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:08.013Z,
  from: 2017-08-04T17:17:08.009Z,
  to: 2017-08-04T17:22:08.009Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=bop, name=bop, participants=[participant=jordan, participant=dog, participant=bop], meeting=no, meetingUrl=http://localhost:3001/?user=bop&room=no, consent=true, consentDate=2017-08-04T17:22:11.770Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMzMSwiZXhwIjoxNTg4MjY3MzMxLCJpc3MiOiJmZWF0aGVycyJ9.xczXoaZmizbvwU_HKvdayP00r1X_LSFyKZQEFQj1ZY4
info: creating a new participant... NotFound: No record found for id 'bop'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Fri Aug 04 2017 13:22:11 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 13:22:11 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 13:22:11 GMT-0400 (EDT), consent=true, name=bop, _id=bop, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'bop',
     name: 'bop',
     participants: [ [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=bop&room=no',
     consent: true,
     consentDate: '2017-08-04T17:22:11.770Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzMzMSwiZXhwIjoxNTg4MjY3MzMxLCJpc3MiOiJmZWF0aGVycyJ9.xczXoaZmizbvwU_HKvdayP00r1X_LSFyKZQEFQj1ZY4' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog', 'bop' ]
patching meeting { participants: [ 'jordan', 'dog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog', 'bop' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop' ],
  lastUpdated: 2017-08-04T17:22:11.931Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop' ],
  _id: 5984ad433fdd10ba54f6f905,
  timestamp: 2017-08-04T17:22:11.967Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop' ],
  _id: 5984ad433fdd10ba54f6f905,
  timestamp: 2017-08-04T17:22:11.967Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop' ],
  _id: 5984ad433fdd10ba54f6f905,
  timestamp: 2017-08-04T17:22:11.967Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:13.013Z 2017-08-04T17:22:13.013Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad453fdd10ba54f6f906,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:13.019Z,
  from: 2017-08-04T17:17:13.013Z,
  to: 2017-08-04T17:22:13.013Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad453fdd10ba54f6f906,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:13.019Z,
  from: 2017-08-04T17:17:13.013Z,
  to: 2017-08-04T17:22:13.013Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad453fdd10ba54f6f906,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:13.019Z,
  from: 2017-08-04T17:17:13.013Z,
  to: 2017-08-04T17:22:13.013Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:18.018Z 2017-08-04T17:22:18.018Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad4a3fdd10ba54f6f907,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:18.022Z,
  from: 2017-08-04T17:17:18.018Z,
  to: 2017-08-04T17:22:18.018Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad4a3fdd10ba54f6f907,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:18.022Z,
  from: 2017-08-04T17:17:18.018Z,
  to: 2017-08-04T17:22:18.018Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad4a3fdd10ba54f6f907,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:18.022Z,
  from: 2017-08-04T17:17:18.018Z,
  to: 2017-08-04T17:22:18.018Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T17:17:23.023Z 2017-08-04T17:22:23.023Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad4f3fdd10ba54f6f908,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:23.027Z,
  from: 2017-08-04T17:17:23.023Z,
  to: 2017-08-04T17:22:23.023Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad4f3fdd10ba54f6f908,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:23.027Z,
  from: 2017-08-04T17:17:23.023Z,
  to: 2017-08-04T17:22:23.023Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad4f3fdd10ba54f6f908,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:23.027Z,
  from: 2017-08-04T17:17:23.023Z,
  to: 2017-08-04T17:22:23.023Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad4f3fdd10ba54f6f908,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:23.027Z,
  from: 2017-08-04T17:17:23.023Z,
  to: 2017-08-04T17:22:23.023Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=mog, name=mog, participants=[participant=jordan, participant=dog, participant=bop, participant=mog], meeting=no, meetingUrl=http://localhost:3001/?user=mog&room=no, consent=true, consentDate=2017-08-04T17:22:24.490Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzM0NCwiZXhwIjoxNTg4MjY3MzQ0LCJpc3MiOiJmZWF0aGVycyJ9.uS5ciVGnEx15Y0IrVIz_-2jlIxZaFoSgJfPjn8A2v3o
info: creating a new participant... NotFound: No record found for id 'mog'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Fri Aug 04 2017 13:22:24 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 13:22:24 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 13:22:24 GMT-0400 (EDT), consent=true, name=mog, _id=mog, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'mog',
     name: 'mog',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=mog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:22:24.490Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzM0NCwiZXhwIjoxNTg4MjY3MzQ0LCJpc3MiOiJmZWF0aGVycyJ9.uS5ciVGnEx15Y0IrVIz_-2jlIxZaFoSgJfPjn8A2v3o' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog', 'bop', 'mog' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog', 'bop', 'mog' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:22:24.912Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad513fdd10ba54f6f909,
  timestamp: 2017-08-04T17:22:25.001Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad513fdd10ba54f6f909,
  timestamp: 2017-08-04T17:22:25.001Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad513fdd10ba54f6f909,
  timestamp: 2017-08-04T17:22:25.001Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad513fdd10ba54f6f909,
  timestamp: 2017-08-04T17:22:25.001Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:28.025Z 2017-08-04T17:22:28.025Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad543fdd10ba54f6f90a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:28.028Z,
  from: 2017-08-04T17:17:28.025Z,
  to: 2017-08-04T17:22:28.025Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad543fdd10ba54f6f90a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:28.028Z,
  from: 2017-08-04T17:17:28.025Z,
  to: 2017-08-04T17:22:28.025Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad543fdd10ba54f6f90a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:28.028Z,
  from: 2017-08-04T17:17:28.025Z,
  to: 2017-08-04T17:22:28.025Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad543fdd10ba54f6f90a,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:28.028Z,
  from: 2017-08-04T17:17:28.025Z,
  to: 2017-08-04T17:22:28.025Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:33.036Z 2017-08-04T17:22:33.036Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad593fdd10ba54f6f90b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:33.039Z,
  from: 2017-08-04T17:17:33.036Z,
  to: 2017-08-04T17:22:33.036Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad593fdd10ba54f6f90b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:33.039Z,
  from: 2017-08-04T17:17:33.036Z,
  to: 2017-08-04T17:22:33.036Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad593fdd10ba54f6f90b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:33.039Z,
  from: 2017-08-04T17:17:33.036Z,
  to: 2017-08-04T17:22:33.036Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad593fdd10ba54f6f90b,
       participant: 'jordan',
       turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:22:33.039Z,
  from: 2017-08-04T17:17:33.036Z,
  to: 2017-08-04T17:22:33.036Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, bop, mog], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 85348 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: utterances found: 1
0
2017-08-04T17:22:33.419Z
2017-08-04T17:22:33.419Z
2017-08-04T17:22:33.419Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:17:38.039Z 2017-08-04T17:22:38.039Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad5e3fdd10ba54f6f90e,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad5e3fdd10ba54f6f90d,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:38.042Z,
  from: 2017-08-04T17:17:38.039Z,
  to: 2017-08-04T17:22:38.039Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad5e3fdd10ba54f6f90e,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad5e3fdd10ba54f6f90d,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:38.042Z,
  from: 2017-08-04T17:17:38.039Z,
  to: 2017-08-04T17:22:38.039Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad5e3fdd10ba54f6f90e,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad5e3fdd10ba54f6f90d,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:38.042Z,
  from: 2017-08-04T17:17:38.039Z,
  to: 2017-08-04T17:22:38.039Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad5e3fdd10ba54f6f90e,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad5e3fdd10ba54f6f90d,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:38.042Z,
  from: 2017-08-04T17:17:38.039Z,
  to: 2017-08-04T17:22:38.039Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:43.044Z 2017-08-04T17:22:43.044Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad633fdd10ba54f6f910,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad633fdd10ba54f6f90f,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:43.047Z,
  from: 2017-08-04T17:17:43.044Z,
  to: 2017-08-04T17:22:43.044Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad633fdd10ba54f6f910,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad633fdd10ba54f6f90f,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:43.047Z,
  from: 2017-08-04T17:17:43.044Z,
  to: 2017-08-04T17:22:43.044Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad633fdd10ba54f6f910,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad633fdd10ba54f6f90f,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:43.047Z,
  from: 2017-08-04T17:17:43.044Z,
  to: 2017-08-04T17:22:43.044Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad633fdd10ba54f6f910,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad633fdd10ba54f6f90f,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:43.047Z,
  from: 2017-08-04T17:17:43.044Z,
  to: 2017-08-04T17:22:43.044Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:48.050Z 2017-08-04T17:22:48.050Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad683fdd10ba54f6f912,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad683fdd10ba54f6f911,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:48.054Z,
  from: 2017-08-04T17:17:48.050Z,
  to: 2017-08-04T17:22:48.050Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad683fdd10ba54f6f912,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad683fdd10ba54f6f911,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:48.054Z,
  from: 2017-08-04T17:17:48.050Z,
  to: 2017-08-04T17:22:48.050Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad683fdd10ba54f6f912,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad683fdd10ba54f6f911,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:48.054Z,
  from: 2017-08-04T17:17:48.050Z,
  to: 2017-08-04T17:22:48.050Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad683fdd10ba54f6f912,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad683fdd10ba54f6f911,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:48.054Z,
  from: 2017-08-04T17:17:48.050Z,
  to: 2017-08-04T17:22:48.050Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:53.057Z 2017-08-04T17:22:53.057Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad6d3fdd10ba54f6f914,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad6d3fdd10ba54f6f913,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:53.061Z,
  from: 2017-08-04T17:17:53.057Z,
  to: 2017-08-04T17:22:53.057Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad6d3fdd10ba54f6f914,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad6d3fdd10ba54f6f913,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:53.061Z,
  from: 2017-08-04T17:17:53.057Z,
  to: 2017-08-04T17:22:53.057Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad6d3fdd10ba54f6f914,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad6d3fdd10ba54f6f913,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:53.061Z,
  from: 2017-08-04T17:17:53.057Z,
  to: 2017-08-04T17:22:53.057Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad6d3fdd10ba54f6f914,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad6d3fdd10ba54f6f913,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:53.061Z,
  from: 2017-08-04T17:17:53.057Z,
  to: 2017-08-04T17:22:53.057Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:17:58.062Z 2017-08-04T17:22:58.062Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad723fdd10ba54f6f916,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad723fdd10ba54f6f915,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:58.066Z,
  from: 2017-08-04T17:17:58.062Z,
  to: 2017-08-04T17:22:58.062Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad723fdd10ba54f6f916,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad723fdd10ba54f6f915,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:58.066Z,
  from: 2017-08-04T17:17:58.062Z,
  to: 2017-08-04T17:22:58.062Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad723fdd10ba54f6f916,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad723fdd10ba54f6f915,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:58.066Z,
  from: 2017-08-04T17:17:58.062Z,
  to: 2017-08-04T17:22:58.062Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad723fdd10ba54f6f916,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad723fdd10ba54f6f915,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:22:58.066Z,
  from: 2017-08-04T17:17:58.062Z,
  to: 2017-08-04T17:22:58.062Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:03.066Z 2017-08-04T17:23:03.066Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad773fdd10ba54f6f918,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad773fdd10ba54f6f917,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:03.069Z,
  from: 2017-08-04T17:18:03.066Z,
  to: 2017-08-04T17:23:03.066Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad773fdd10ba54f6f918,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad773fdd10ba54f6f917,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:03.069Z,
  from: 2017-08-04T17:18:03.066Z,
  to: 2017-08-04T17:23:03.066Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad773fdd10ba54f6f918,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad773fdd10ba54f6f917,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:03.069Z,
  from: 2017-08-04T17:18:03.066Z,
  to: 2017-08-04T17:23:03.066Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad773fdd10ba54f6f918,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad773fdd10ba54f6f917,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:03.069Z,
  from: 2017-08-04T17:18:03.066Z,
  to: 2017-08-04T17:23:03.066Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:08.070Z 2017-08-04T17:23:08.070Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad7c3fdd10ba54f6f91a,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad7c3fdd10ba54f6f919,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:08.072Z,
  from: 2017-08-04T17:18:08.070Z,
  to: 2017-08-04T17:23:08.070Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad7c3fdd10ba54f6f91a,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad7c3fdd10ba54f6f919,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:08.072Z,
  from: 2017-08-04T17:18:08.070Z,
  to: 2017-08-04T17:23:08.070Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad7c3fdd10ba54f6f91a,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad7c3fdd10ba54f6f919,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:08.072Z,
  from: 2017-08-04T17:18:08.070Z,
  to: 2017-08-04T17:23:08.070Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad7c3fdd10ba54f6f91a,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad7c3fdd10ba54f6f919,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:08.072Z,
  from: 2017-08-04T17:18:08.070Z,
  to: 2017-08-04T17:23:08.070Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:13.075Z 2017-08-04T17:23:13.075Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad813fdd10ba54f6f91c,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad813fdd10ba54f6f91b,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:13.079Z,
  from: 2017-08-04T17:18:13.075Z,
  to: 2017-08-04T17:23:13.075Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad813fdd10ba54f6f91c,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad813fdd10ba54f6f91b,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:13.079Z,
  from: 2017-08-04T17:18:13.075Z,
  to: 2017-08-04T17:23:13.075Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad813fdd10ba54f6f91c,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad813fdd10ba54f6f91b,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:13.079Z,
  from: 2017-08-04T17:18:13.075Z,
  to: 2017-08-04T17:23:13.075Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad813fdd10ba54f6f91c,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad813fdd10ba54f6f91b,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:13.079Z,
  from: 2017-08-04T17:18:13.075Z,
  to: 2017-08-04T17:23:13.075Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:18.080Z 2017-08-04T17:23:18.080Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad863fdd10ba54f6f91e,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad863fdd10ba54f6f91d,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:18.083Z,
  from: 2017-08-04T17:18:18.080Z,
  to: 2017-08-04T17:23:18.080Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad863fdd10ba54f6f91e,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad863fdd10ba54f6f91d,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:18.083Z,
  from: 2017-08-04T17:18:18.080Z,
  to: 2017-08-04T17:23:18.080Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad863fdd10ba54f6f91e,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad863fdd10ba54f6f91d,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:18.083Z,
  from: 2017-08-04T17:18:18.080Z,
  to: 2017-08-04T17:23:18.080Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad863fdd10ba54f6f91e,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad863fdd10ba54f6f91d,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:18.083Z,
  from: 2017-08-04T17:18:18.080Z,
  to: 2017-08-04T17:23:18.080Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:23.086Z 2017-08-04T17:23:23.086Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad8b3fdd10ba54f6f920,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad8b3fdd10ba54f6f91f,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:23.089Z,
  from: 2017-08-04T17:18:23.086Z,
  to: 2017-08-04T17:23:23.086Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad8b3fdd10ba54f6f920,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad8b3fdd10ba54f6f91f,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:23.089Z,
  from: 2017-08-04T17:18:23.086Z,
  to: 2017-08-04T17:23:23.086Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad8b3fdd10ba54f6f920,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad8b3fdd10ba54f6f91f,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:23.089Z,
  from: 2017-08-04T17:18:23.086Z,
  to: 2017-08-04T17:23:23.086Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad8b3fdd10ba54f6f920,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad8b3fdd10ba54f6f91f,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:23.089Z,
  from: 2017-08-04T17:18:23.086Z,
  to: 2017-08-04T17:23:23.086Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T17:18:28.483Z 2017-08-04T17:23:28.483Z
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=mog, participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:23:26.887Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQwNiwiZXhwIjoxNTg4MjY3NDA2LCJpc3MiOiJmZWF0aGVycyJ9.ddIxq3M5gXvaXs0x3yGiA_Vjv_ZaOeJAu3xURACgsIw
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad913fdd10ba54f6f922,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad913fdd10ba54f6f921,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:29.138Z,
  from: 2017-08-04T17:18:28.483Z,
  to: 2017-08-04T17:23:28.483Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad913fdd10ba54f6f922,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad913fdd10ba54f6f921,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:29.138Z,
  from: 2017-08-04T17:18:28.483Z,
  to: 2017-08-04T17:23:28.483Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: auth filter, data: { turns: 
   [ { _id: 5984ad913fdd10ba54f6f922,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad913fdd10ba54f6f921,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:29.138Z,
  from: 2017-08-04T17:18:28.483Z,
  to: 2017-08-04T17:23:28.483Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: auth filter, data: { turns: 
   [ { _id: 5984ad913fdd10ba54f6f922,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad913fdd10ba54f6f921,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:29.138Z,
  from: 2017-08-04T17:18:28.483Z,
  to: 2017-08-04T17:23:28.483Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:23:26.887Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQwNiwiZXhwIjoxNTg4MjY3NDA2LCJpc3MiOiJmZWF0aGVycyJ9.ddIxq3M5gXvaXs0x3yGiA_Vjv_ZaOeJAu3xURACgsIw' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'mog', 'dog', 'jordan' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'mog', 'dog', 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:23:31.270Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=mog, name=mog, participants=[participant=dog, participant=jordan, participant=bop, participant=mog], meeting=no, meetingUrl=http://localhost:3001/?user=mog&room=no, consent=true, consentDate=2017-08-04T17:23:31.631Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQxMSwiZXhwIjoxNTg4MjY3NDExLCJpc3MiOiJmZWF0aGVycyJ9.z-ObP-3GDNmWkB7KC8bjO-c0VS0MeACK2X-xsJgogdY
info: meeting joined event: participant=dog, name=dog, participants=[participant=mog, participant=jordan, participant=bop, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:23:31.800Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQxMSwiZXhwIjoxNTg4MjY3NDExLCJpc3MiOiJmZWF0aGVycyJ9.z-ObP-3GDNmWkB7KC8bjO-c0VS0MeACK2X-xsJgogdY
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad943fdd10ba54f6f923,
  timestamp: 2017-08-04T17:23:32.266Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad943fdd10ba54f6f923,
  timestamp: 2017-08-04T17:23:32.266Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad943fdd10ba54f6f923,
  timestamp: 2017-08-04T17:23:32.266Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad943fdd10ba54f6f923,
  timestamp: 2017-08-04T17:23:32.266Z,
  meeting: 'no',
  __v: 0 } undefined
info: User not authenticated. undefined
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'mog',
     name: 'mog',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=mog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:23:31.631Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQxMSwiZXhwIjoxNTg4MjY3NDExLCJpc3MiOiJmZWF0aGVycyJ9.z-ObP-3GDNmWkB7KC8bjO-c0VS0MeACK2X-xsJgogdY' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan', 'bop', 'mog' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan', 'bop', 'mog' ]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:23:31.800Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQxMSwiZXhwIjoxNTg4MjY3NDExLCJpc3MiOiJmZWF0aGVycyJ9.z-ObP-3GDNmWkB7KC8bjO-c0VS0MeACK2X-xsJgogdY' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'mog', 'jordan', 'bop', 'dog' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'mog', 'jordan', 'bop', 'dog' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:23:32.690Z } no
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:23:32.749Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: meeting joined event: participant=bop, name=bop, participants=[participant=mog, participant=jordan, participant=dog, participant=bop], meeting=no, meetingUrl=http://localhost:3001/?user=bop&room=no, consent=true, consentDate=2017-08-04T17:23:32.792Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQxMiwiZXhwIjoxNTg4MjY3NDEyLCJpc3MiOiJmZWF0aGVycyJ9.ZiFM0Qno6FxKt14NHegC6NRupFI9GPb7YhnB3v3LZk8
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad943fdd10ba54f6f924,
  timestamp: 2017-08-04T17:23:32.970Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad943fdd10ba54f6f924,
  timestamp: 2017-08-04T17:23:32.970Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad943fdd10ba54f6f924,
  timestamp: 2017-08-04T17:23:32.970Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad943fdd10ba54f6f924,
  timestamp: 2017-08-04T17:23:32.970Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad953fdd10ba54f6f925,
  timestamp: 2017-08-04T17:23:33.103Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad953fdd10ba54f6f925,
  timestamp: 2017-08-04T17:23:33.103Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad953fdd10ba54f6f925,
  timestamp: 2017-08-04T17:23:33.103Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad953fdd10ba54f6f925,
  timestamp: 2017-08-04T17:23:33.103Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'bop',
     name: 'bop',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=bop&room=no',
     consent: true,
     consentDate: '2017-08-04T17:23:32.792Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQxMiwiZXhwIjoxNTg4MjY3NDEyLCJpc3MiOiJmZWF0aGVycyJ9.ZiFM0Qno6FxKt14NHegC6NRupFI9GPb7YhnB3v3LZk8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'mog', 'jordan', 'dog', 'bop' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'mog', 'jordan', 'dog', 'bop' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:23:33.355Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad953fdd10ba54f6f926,
  timestamp: 2017-08-04T17:23:33.358Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad953fdd10ba54f6f926,
  timestamp: 2017-08-04T17:23:33.358Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad953fdd10ba54f6f926,
  timestamp: 2017-08-04T17:23:33.358Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad953fdd10ba54f6f926,
  timestamp: 2017-08-04T17:23:33.358Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:33.515Z 2017-08-04T17:23:33.515Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad953fdd10ba54f6f928,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad953fdd10ba54f6f927,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:33.518Z,
  from: 2017-08-04T17:18:33.515Z,
  to: 2017-08-04T17:23:33.515Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad953fdd10ba54f6f928,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad953fdd10ba54f6f927,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:33.518Z,
  from: 2017-08-04T17:18:33.515Z,
  to: 2017-08-04T17:23:33.515Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad953fdd10ba54f6f928,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad953fdd10ba54f6f927,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:33.518Z,
  from: 2017-08-04T17:18:33.515Z,
  to: 2017-08-04T17:23:33.515Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad953fdd10ba54f6f928,
       participant: 'jordan',
       turns: 0.9333333333333333 },
     { _id: 5984ad953fdd10ba54f6f927,
       participant: 'mog',
       turns: 0.06666666666666667 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:33.518Z,
  from: 2017-08-04T17:18:33.515Z,
  to: 2017-08-04T17:23:33.515Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, bop, mog], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 60301 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T17:18:38.920Z 2017-08-04T17:23:38.920Z
info: meeting joined event: participant=dog, name=dog, participants=[participant=mog, participant=jordan, participant=bop, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:23:37.653Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQxNywiZXhwIjoxNTg4MjY3NDE3LCJpc3MiOiJmZWF0aGVycyJ9.Sivw_RT7-sBd4N8HqJB7CrqSh5S6SSw7aA5WfOQ6XQs
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:23:37.653Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQxNywiZXhwIjoxNTg4MjY3NDE3LCJpc3MiOiJmZWF0aGVycyJ9.Sivw_RT7-sBd4N8HqJB7CrqSh5S6SSw7aA5WfOQ6XQs' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'mog', 'jordan', 'bop', 'dog' ]
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad9c3fdd10ba54f6f92a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ad9c3fdd10ba54f6f929,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:39.433Z,
  from: 2017-08-04T17:18:38.920Z,
  to: 2017-08-04T17:23:38.920Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad9c3fdd10ba54f6f92a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ad9c3fdd10ba54f6f929,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:39.433Z,
  from: 2017-08-04T17:18:38.920Z,
  to: 2017-08-04T17:23:38.920Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: auth filter, data: { turns: 
   [ { _id: 5984ad9c3fdd10ba54f6f92a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ad9c3fdd10ba54f6f929,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:39.433Z,
  from: 2017-08-04T17:18:38.920Z,
  to: 2017-08-04T17:23:38.920Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: auth filter, data: { turns: 
   [ { _id: 5984ad9c3fdd10ba54f6f92a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ad9c3fdd10ba54f6f929,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:39.433Z,
  from: 2017-08-04T17:18:38.920Z,
  to: 2017-08-04T17:23:38.920Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'mog', 'jordan', 'bop', 'dog' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:23:41.283Z } no
info: meeting joined event: participant=mog, name=mog, participants=[participant=dog, participant=jordan, participant=bop, participant=mog], meeting=no, meetingUrl=http://localhost:3001/?user=mog&room=no, consent=true, consentDate=2017-08-04T17:23:41.650Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQyMCwiZXhwIjoxNTg4MjY3NDIwLCJpc3MiOiJmZWF0aGVycyJ9.aRLC5njEc_SPpd7bDI1eN3qAAvGheZuFGJLrLlvqbCs
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9e3fdd10ba54f6f92b,
  timestamp: 2017-08-04T17:23:42.676Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9e3fdd10ba54f6f92b,
  timestamp: 2017-08-04T17:23:42.676Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9e3fdd10ba54f6f92b,
  timestamp: 2017-08-04T17:23:42.676Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9e3fdd10ba54f6f92b,
  timestamp: 2017-08-04T17:23:42.676Z,
  meeting: 'no',
  __v: 0 } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=bop, participant=mog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:23:42.611Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQyMiwiZXhwIjoxNTg4MjY3NDIyLCJpc3MiOiJmZWF0aGVycyJ9.aH2EfJcwbm_AOwI7KnFNplryUDdry-ZYaaLfLX8belU
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'mog',
     name: 'mog',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=mog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:23:41.650Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQyMCwiZXhwIjoxNTg4MjY3NDIwLCJpc3MiOiJmZWF0aGVycyJ9.aRLC5njEc_SPpd7bDI1eN3qAAvGheZuFGJLrLlvqbCs' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan', 'bop', 'mog' ]
info: meeting joined event: participant=bop, name=bop, participants=[participant=dog, participant=mog, participant=jordan, participant=bop], meeting=no, meetingUrl=http://localhost:3001/?user=bop&room=no, consent=true, consentDate=2017-08-04T17:23:42.728Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQyMiwiZXhwIjoxNTg4MjY3NDIyLCJpc3MiOiJmZWF0aGVycyJ9.aH2EfJcwbm_AOwI7KnFNplryUDdry-ZYaaLfLX8belU
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan', 'bop', 'mog' ]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:23:42.611Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQyMiwiZXhwIjoxNTg4MjY3NDIyLCJpc3MiOiJmZWF0aGVycyJ9.aH2EfJcwbm_AOwI7KnFNplryUDdry-ZYaaLfLX8belU' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'bop', 'mog', 'jordan' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'bop', 'mog', 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:23:42.981Z } no
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'bop',
     name: 'bop',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=bop&room=no',
     consent: true,
     consentDate: '2017-08-04T17:23:42.728Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzQyMiwiZXhwIjoxNTg4MjY3NDIyLCJpc3MiOiJmZWF0aGVycyJ9.aH2EfJcwbm_AOwI7KnFNplryUDdry-ZYaaLfLX8belU' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'mog', 'jordan', 'bop' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'mog', 'jordan', 'bop' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:23:43.089Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92c,
  timestamp: 2017-08-04T17:23:43.177Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92c,
  timestamp: 2017-08-04T17:23:43.177Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92c,
  timestamp: 2017-08-04T17:23:43.177Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92c,
  timestamp: 2017-08-04T17:23:43.177Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:23:43.173Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92d,
  timestamp: 2017-08-04T17:23:43.200Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92d,
  timestamp: 2017-08-04T17:23:43.200Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92d,
  timestamp: 2017-08-04T17:23:43.200Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92d,
  timestamp: 2017-08-04T17:23:43.200Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92e,
  timestamp: 2017-08-04T17:23:43.585Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92e,
  timestamp: 2017-08-04T17:23:43.585Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92e,
  timestamp: 2017-08-04T17:23:43.585Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ad9f3fdd10ba54f6f92e,
  timestamp: 2017-08-04T17:23:43.585Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:43.932Z 2017-08-04T17:23:43.932Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ad9f3fdd10ba54f6f930,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ad9f3fdd10ba54f6f92f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:43.945Z,
  from: 2017-08-04T17:18:43.932Z,
  to: 2017-08-04T17:23:43.932Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad9f3fdd10ba54f6f930,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ad9f3fdd10ba54f6f92f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:43.945Z,
  from: 2017-08-04T17:18:43.932Z,
  to: 2017-08-04T17:23:43.932Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad9f3fdd10ba54f6f930,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ad9f3fdd10ba54f6f92f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:43.945Z,
  from: 2017-08-04T17:18:43.932Z,
  to: 2017-08-04T17:23:43.932Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ad9f3fdd10ba54f6f930,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ad9f3fdd10ba54f6f92f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:43.945Z,
  from: 2017-08-04T17:18:43.932Z,
  to: 2017-08-04T17:23:43.932Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:48.943Z 2017-08-04T17:23:48.943Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ada53fdd10ba54f6f932,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ada53fdd10ba54f6f931,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:49.046Z,
  from: 2017-08-04T17:18:48.943Z,
  to: 2017-08-04T17:23:48.943Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ada53fdd10ba54f6f932,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ada53fdd10ba54f6f931,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:49.046Z,
  from: 2017-08-04T17:18:48.943Z,
  to: 2017-08-04T17:23:48.943Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ada53fdd10ba54f6f932,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ada53fdd10ba54f6f931,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:49.046Z,
  from: 2017-08-04T17:18:48.943Z,
  to: 2017-08-04T17:23:48.943Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ada53fdd10ba54f6f932,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ada53fdd10ba54f6f931,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:49.046Z,
  from: 2017-08-04T17:18:48.943Z,
  to: 2017-08-04T17:23:48.943Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:53.947Z 2017-08-04T17:23:53.947Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ada93fdd10ba54f6f934,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ada93fdd10ba54f6f933,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:53.951Z,
  from: 2017-08-04T17:18:53.947Z,
  to: 2017-08-04T17:23:53.947Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ada93fdd10ba54f6f934,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ada93fdd10ba54f6f933,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:53.951Z,
  from: 2017-08-04T17:18:53.947Z,
  to: 2017-08-04T17:23:53.947Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ada93fdd10ba54f6f934,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ada93fdd10ba54f6f933,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:53.951Z,
  from: 2017-08-04T17:18:53.947Z,
  to: 2017-08-04T17:23:53.947Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ada93fdd10ba54f6f934,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ada93fdd10ba54f6f933,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:53.951Z,
  from: 2017-08-04T17:18:53.947Z,
  to: 2017-08-04T17:23:53.947Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:18:58.953Z 2017-08-04T17:23:58.953Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adae3fdd10ba54f6f936,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adae3fdd10ba54f6f935,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:58.956Z,
  from: 2017-08-04T17:18:58.953Z,
  to: 2017-08-04T17:23:58.953Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adae3fdd10ba54f6f936,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adae3fdd10ba54f6f935,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:58.956Z,
  from: 2017-08-04T17:18:58.953Z,
  to: 2017-08-04T17:23:58.953Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adae3fdd10ba54f6f936,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adae3fdd10ba54f6f935,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:58.956Z,
  from: 2017-08-04T17:18:58.953Z,
  to: 2017-08-04T17:23:58.953Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adae3fdd10ba54f6f936,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adae3fdd10ba54f6f935,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:23:58.956Z,
  from: 2017-08-04T17:18:58.953Z,
  to: 2017-08-04T17:23:58.953Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:03.958Z 2017-08-04T17:24:03.958Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adb33fdd10ba54f6f938,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adb33fdd10ba54f6f937,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:03.961Z,
  from: 2017-08-04T17:19:03.958Z,
  to: 2017-08-04T17:24:03.958Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adb33fdd10ba54f6f938,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adb33fdd10ba54f6f937,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:03.961Z,
  from: 2017-08-04T17:19:03.958Z,
  to: 2017-08-04T17:24:03.958Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adb33fdd10ba54f6f938,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adb33fdd10ba54f6f937,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:03.961Z,
  from: 2017-08-04T17:19:03.958Z,
  to: 2017-08-04T17:24:03.958Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adb33fdd10ba54f6f938,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adb33fdd10ba54f6f937,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:03.961Z,
  from: 2017-08-04T17:19:03.958Z,
  to: 2017-08-04T17:24:03.958Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:08.964Z 2017-08-04T17:24:08.964Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adb93fdd10ba54f6f93a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adb93fdd10ba54f6f939,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:09.221Z,
  from: 2017-08-04T17:19:08.964Z,
  to: 2017-08-04T17:24:08.964Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adb93fdd10ba54f6f93a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adb93fdd10ba54f6f939,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:09.221Z,
  from: 2017-08-04T17:19:08.964Z,
  to: 2017-08-04T17:24:08.964Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adb93fdd10ba54f6f93a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adb93fdd10ba54f6f939,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:09.221Z,
  from: 2017-08-04T17:19:08.964Z,
  to: 2017-08-04T17:24:08.964Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adb93fdd10ba54f6f93a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adb93fdd10ba54f6f939,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:09.221Z,
  from: 2017-08-04T17:19:08.964Z,
  to: 2017-08-04T17:24:08.964Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:13.969Z 2017-08-04T17:24:13.969Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adbd3fdd10ba54f6f93c,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adbd3fdd10ba54f6f93b,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:13.972Z,
  from: 2017-08-04T17:19:13.969Z,
  to: 2017-08-04T17:24:13.969Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adbd3fdd10ba54f6f93c,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adbd3fdd10ba54f6f93b,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:13.972Z,
  from: 2017-08-04T17:19:13.969Z,
  to: 2017-08-04T17:24:13.969Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adbd3fdd10ba54f6f93c,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adbd3fdd10ba54f6f93b,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:13.972Z,
  from: 2017-08-04T17:19:13.969Z,
  to: 2017-08-04T17:24:13.969Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adbd3fdd10ba54f6f93c,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adbd3fdd10ba54f6f93b,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:13.972Z,
  from: 2017-08-04T17:19:13.969Z,
  to: 2017-08-04T17:24:13.969Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:18.972Z 2017-08-04T17:24:18.972Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adc33fdd10ba54f6f93e,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adc33fdd10ba54f6f93d,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:19.135Z,
  from: 2017-08-04T17:19:18.972Z,
  to: 2017-08-04T17:24:18.972Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adc33fdd10ba54f6f93e,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adc33fdd10ba54f6f93d,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:19.135Z,
  from: 2017-08-04T17:19:18.972Z,
  to: 2017-08-04T17:24:18.972Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adc33fdd10ba54f6f93e,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adc33fdd10ba54f6f93d,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:19.135Z,
  from: 2017-08-04T17:19:18.972Z,
  to: 2017-08-04T17:24:18.972Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adc33fdd10ba54f6f93e,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adc33fdd10ba54f6f93d,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:19.135Z,
  from: 2017-08-04T17:19:18.972Z,
  to: 2017-08-04T17:24:18.972Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:23.978Z 2017-08-04T17:24:23.978Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adc73fdd10ba54f6f940,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adc73fdd10ba54f6f93f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:23.981Z,
  from: 2017-08-04T17:19:23.978Z,
  to: 2017-08-04T17:24:23.978Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adc73fdd10ba54f6f940,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adc73fdd10ba54f6f93f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:23.981Z,
  from: 2017-08-04T17:19:23.978Z,
  to: 2017-08-04T17:24:23.978Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adc73fdd10ba54f6f940,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adc73fdd10ba54f6f93f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:23.981Z,
  from: 2017-08-04T17:19:23.978Z,
  to: 2017-08-04T17:24:23.978Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adc73fdd10ba54f6f940,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adc73fdd10ba54f6f93f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:23.981Z,
  from: 2017-08-04T17:19:23.978Z,
  to: 2017-08-04T17:24:23.978Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:28.983Z 2017-08-04T17:24:28.983Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adcc3fdd10ba54f6f942,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adcc3fdd10ba54f6f941,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:28.992Z,
  from: 2017-08-04T17:19:28.983Z,
  to: 2017-08-04T17:24:28.983Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adcc3fdd10ba54f6f942,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adcc3fdd10ba54f6f941,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:28.992Z,
  from: 2017-08-04T17:19:28.983Z,
  to: 2017-08-04T17:24:28.983Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adcc3fdd10ba54f6f942,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adcc3fdd10ba54f6f941,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:28.992Z,
  from: 2017-08-04T17:19:28.983Z,
  to: 2017-08-04T17:24:28.983Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adcc3fdd10ba54f6f942,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adcc3fdd10ba54f6f941,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:28.992Z,
  from: 2017-08-04T17:19:28.983Z,
  to: 2017-08-04T17:24:28.983Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, bop, mog], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 120290 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:19:33.990Z 2017-08-04T17:24:33.990Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984add23fdd10ba54f6f944,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984add23fdd10ba54f6f943,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:33.999Z,
  from: 2017-08-04T17:19:33.990Z,
  to: 2017-08-04T17:24:33.990Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984add23fdd10ba54f6f944,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984add23fdd10ba54f6f943,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:33.999Z,
  from: 2017-08-04T17:19:33.990Z,
  to: 2017-08-04T17:24:33.990Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984add23fdd10ba54f6f944,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984add23fdd10ba54f6f943,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:33.999Z,
  from: 2017-08-04T17:19:33.990Z,
  to: 2017-08-04T17:24:33.990Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984add23fdd10ba54f6f944,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984add23fdd10ba54f6f943,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:33.999Z,
  from: 2017-08-04T17:19:33.990Z,
  to: 2017-08-04T17:24:33.990Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:38.994Z 2017-08-04T17:24:38.994Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984add73fdd10ba54f6f946,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984add73fdd10ba54f6f945,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:38.998Z,
  from: 2017-08-04T17:19:38.994Z,
  to: 2017-08-04T17:24:38.994Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984add73fdd10ba54f6f946,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984add73fdd10ba54f6f945,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:38.998Z,
  from: 2017-08-04T17:19:38.994Z,
  to: 2017-08-04T17:24:38.994Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984add73fdd10ba54f6f946,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984add73fdd10ba54f6f945,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:38.998Z,
  from: 2017-08-04T17:19:38.994Z,
  to: 2017-08-04T17:24:38.994Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984add73fdd10ba54f6f946,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984add73fdd10ba54f6f945,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:38.998Z,
  from: 2017-08-04T17:19:38.994Z,
  to: 2017-08-04T17:24:38.994Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:44.000Z 2017-08-04T17:24:44.000Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984addc3fdd10ba54f6f948,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984addc3fdd10ba54f6f947,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:44.004Z,
  from: 2017-08-04T17:19:44.000Z,
  to: 2017-08-04T17:24:44.000Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984addc3fdd10ba54f6f948,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984addc3fdd10ba54f6f947,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:44.004Z,
  from: 2017-08-04T17:19:44.000Z,
  to: 2017-08-04T17:24:44.000Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984addc3fdd10ba54f6f948,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984addc3fdd10ba54f6f947,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:44.004Z,
  from: 2017-08-04T17:19:44.000Z,
  to: 2017-08-04T17:24:44.000Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984addc3fdd10ba54f6f948,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984addc3fdd10ba54f6f947,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:44.004Z,
  from: 2017-08-04T17:19:44.000Z,
  to: 2017-08-04T17:24:44.000Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:49.005Z 2017-08-04T17:24:49.005Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ade13fdd10ba54f6f94a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ade13fdd10ba54f6f949,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:49.020Z,
  from: 2017-08-04T17:19:49.005Z,
  to: 2017-08-04T17:24:49.005Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ade13fdd10ba54f6f94a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ade13fdd10ba54f6f949,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:49.020Z,
  from: 2017-08-04T17:19:49.005Z,
  to: 2017-08-04T17:24:49.005Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ade13fdd10ba54f6f94a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ade13fdd10ba54f6f949,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:49.020Z,
  from: 2017-08-04T17:19:49.005Z,
  to: 2017-08-04T17:24:49.005Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ade13fdd10ba54f6f94a,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ade13fdd10ba54f6f949,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:49.020Z,
  from: 2017-08-04T17:19:49.005Z,
  to: 2017-08-04T17:24:49.005Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:54.005Z 2017-08-04T17:24:54.005Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ade63fdd10ba54f6f94c,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ade63fdd10ba54f6f94b,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:54.009Z,
  from: 2017-08-04T17:19:54.005Z,
  to: 2017-08-04T17:24:54.005Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ade63fdd10ba54f6f94c,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ade63fdd10ba54f6f94b,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:54.009Z,
  from: 2017-08-04T17:19:54.005Z,
  to: 2017-08-04T17:24:54.005Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ade63fdd10ba54f6f94c,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ade63fdd10ba54f6f94b,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:54.009Z,
  from: 2017-08-04T17:19:54.005Z,
  to: 2017-08-04T17:24:54.005Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ade63fdd10ba54f6f94c,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984ade63fdd10ba54f6f94b,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:54.009Z,
  from: 2017-08-04T17:19:54.005Z,
  to: 2017-08-04T17:24:54.005Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:19:59.012Z 2017-08-04T17:24:59.012Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adeb3fdd10ba54f6f94e,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adeb3fdd10ba54f6f94d,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:59.014Z,
  from: 2017-08-04T17:19:59.012Z,
  to: 2017-08-04T17:24:59.012Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adeb3fdd10ba54f6f94e,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adeb3fdd10ba54f6f94d,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:59.014Z,
  from: 2017-08-04T17:19:59.012Z,
  to: 2017-08-04T17:24:59.012Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adeb3fdd10ba54f6f94e,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adeb3fdd10ba54f6f94d,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:59.014Z,
  from: 2017-08-04T17:19:59.012Z,
  to: 2017-08-04T17:24:59.012Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adeb3fdd10ba54f6f94e,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adeb3fdd10ba54f6f94d,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:24:59.014Z,
  from: 2017-08-04T17:19:59.012Z,
  to: 2017-08-04T17:24:59.012Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:04.018Z 2017-08-04T17:25:04.018Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adf03fdd10ba54f6f950,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adf03fdd10ba54f6f94f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:04.021Z,
  from: 2017-08-04T17:20:04.018Z,
  to: 2017-08-04T17:25:04.018Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adf03fdd10ba54f6f950,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adf03fdd10ba54f6f94f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:04.021Z,
  from: 2017-08-04T17:20:04.018Z,
  to: 2017-08-04T17:25:04.018Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adf03fdd10ba54f6f950,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adf03fdd10ba54f6f94f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:04.021Z,
  from: 2017-08-04T17:20:04.018Z,
  to: 2017-08-04T17:25:04.018Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adf03fdd10ba54f6f950,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adf03fdd10ba54f6f94f,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:04.021Z,
  from: 2017-08-04T17:20:04.018Z,
  to: 2017-08-04T17:25:04.018Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:09.020Z 2017-08-04T17:25:09.020Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adf53fdd10ba54f6f952,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adf53fdd10ba54f6f951,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:09.023Z,
  from: 2017-08-04T17:20:09.020Z,
  to: 2017-08-04T17:25:09.020Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adf53fdd10ba54f6f952,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adf53fdd10ba54f6f951,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:09.023Z,
  from: 2017-08-04T17:20:09.020Z,
  to: 2017-08-04T17:25:09.020Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adf53fdd10ba54f6f952,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adf53fdd10ba54f6f951,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:09.023Z,
  from: 2017-08-04T17:20:09.020Z,
  to: 2017-08-04T17:25:09.020Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adf53fdd10ba54f6f952,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adf53fdd10ba54f6f951,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:09.023Z,
  from: 2017-08-04T17:20:09.020Z,
  to: 2017-08-04T17:25:09.020Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:14.024Z 2017-08-04T17:25:14.024Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adfa3fdd10ba54f6f954,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adfa3fdd10ba54f6f953,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:14.027Z,
  from: 2017-08-04T17:20:14.024Z,
  to: 2017-08-04T17:25:14.024Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adfa3fdd10ba54f6f954,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adfa3fdd10ba54f6f953,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:14.027Z,
  from: 2017-08-04T17:20:14.024Z,
  to: 2017-08-04T17:25:14.024Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adfa3fdd10ba54f6f954,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adfa3fdd10ba54f6f953,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:14.027Z,
  from: 2017-08-04T17:20:14.024Z,
  to: 2017-08-04T17:25:14.024Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adfa3fdd10ba54f6f954,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adfa3fdd10ba54f6f953,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:14.027Z,
  from: 2017-08-04T17:20:14.024Z,
  to: 2017-08-04T17:25:14.024Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:19.031Z 2017-08-04T17:25:19.031Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984adff3fdd10ba54f6f956,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adff3fdd10ba54f6f955,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:19.034Z,
  from: 2017-08-04T17:20:19.031Z,
  to: 2017-08-04T17:25:19.031Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adff3fdd10ba54f6f956,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adff3fdd10ba54f6f955,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:19.034Z,
  from: 2017-08-04T17:20:19.031Z,
  to: 2017-08-04T17:25:19.031Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adff3fdd10ba54f6f956,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adff3fdd10ba54f6f955,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:19.034Z,
  from: 2017-08-04T17:20:19.031Z,
  to: 2017-08-04T17:25:19.031Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984adff3fdd10ba54f6f956,
       participant: 'jordan',
       turns: 0.9285714285714286 },
     { _id: 5984adff3fdd10ba54f6f955,
       participant: 'mog',
       turns: 0.07142857142857142 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:19.034Z,
  from: 2017-08-04T17:20:19.031Z,
  to: 2017-08-04T17:25:19.031Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:24.038Z 2017-08-04T17:25:24.038Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae043fdd10ba54f6f958,
       participant: 'jordan',
       turns: 0.9 },
     { _id: 5984ae043fdd10ba54f6f957, participant: 'mog', turns: 0.1 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:24.042Z,
  from: 2017-08-04T17:20:24.038Z,
  to: 2017-08-04T17:25:24.038Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae043fdd10ba54f6f958,
       participant: 'jordan',
       turns: 0.9 },
     { _id: 5984ae043fdd10ba54f6f957, participant: 'mog', turns: 0.1 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:24.042Z,
  from: 2017-08-04T17:20:24.038Z,
  to: 2017-08-04T17:25:24.038Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae043fdd10ba54f6f958,
       participant: 'jordan',
       turns: 0.9 },
     { _id: 5984ae043fdd10ba54f6f957, participant: 'mog', turns: 0.1 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:24.042Z,
  from: 2017-08-04T17:20:24.038Z,
  to: 2017-08-04T17:25:24.038Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae043fdd10ba54f6f958,
       participant: 'jordan',
       turns: 0.9 },
     { _id: 5984ae043fdd10ba54f6f957, participant: 'mog', turns: 0.1 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:24.042Z,
  from: 2017-08-04T17:20:24.038Z,
  to: 2017-08-04T17:25:24.038Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:29.043Z 2017-08-04T17:25:29.043Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae093fdd10ba54f6f95a,
       participant: 'jordan',
       turns: 0.8888888888888888 },
     { _id: 5984ae093fdd10ba54f6f959,
       participant: 'mog',
       turns: 0.1111111111111111 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:29.045Z,
  from: 2017-08-04T17:20:29.043Z,
  to: 2017-08-04T17:25:29.043Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae093fdd10ba54f6f95a,
       participant: 'jordan',
       turns: 0.8888888888888888 },
     { _id: 5984ae093fdd10ba54f6f959,
       participant: 'mog',
       turns: 0.1111111111111111 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:29.045Z,
  from: 2017-08-04T17:20:29.043Z,
  to: 2017-08-04T17:25:29.043Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae093fdd10ba54f6f95a,
       participant: 'jordan',
       turns: 0.8888888888888888 },
     { _id: 5984ae093fdd10ba54f6f959,
       participant: 'mog',
       turns: 0.1111111111111111 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:29.045Z,
  from: 2017-08-04T17:20:29.043Z,
  to: 2017-08-04T17:25:29.043Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae093fdd10ba54f6f95a,
       participant: 'jordan',
       turns: 0.8888888888888888 },
     { _id: 5984ae093fdd10ba54f6f959,
       participant: 'mog',
       turns: 0.1111111111111111 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:29.045Z,
  from: 2017-08-04T17:20:29.043Z,
  to: 2017-08-04T17:25:29.043Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, bop, mog], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 180294 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:20:34.047Z 2017-08-04T17:25:34.047Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae0e3fdd10ba54f6f95c,
       participant: 'jordan',
       turns: 0.875 },
     { _id: 5984ae0e3fdd10ba54f6f95b,
       participant: 'mog',
       turns: 0.125 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:34.050Z,
  from: 2017-08-04T17:20:34.047Z,
  to: 2017-08-04T17:25:34.047Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae0e3fdd10ba54f6f95c,
       participant: 'jordan',
       turns: 0.875 },
     { _id: 5984ae0e3fdd10ba54f6f95b,
       participant: 'mog',
       turns: 0.125 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:34.050Z,
  from: 2017-08-04T17:20:34.047Z,
  to: 2017-08-04T17:25:34.047Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae0e3fdd10ba54f6f95c,
       participant: 'jordan',
       turns: 0.875 },
     { _id: 5984ae0e3fdd10ba54f6f95b,
       participant: 'mog',
       turns: 0.125 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:34.050Z,
  from: 2017-08-04T17:20:34.047Z,
  to: 2017-08-04T17:25:34.047Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae0e3fdd10ba54f6f95c,
       participant: 'jordan',
       turns: 0.875 },
     { _id: 5984ae0e3fdd10ba54f6f95b,
       participant: 'mog',
       turns: 0.125 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:34.050Z,
  from: 2017-08-04T17:20:34.047Z,
  to: 2017-08-04T17:25:34.047Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:39.052Z 2017-08-04T17:25:39.052Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae133fdd10ba54f6f95e,
       participant: 'jordan',
       turns: 0.8333333333333334 },
     { _id: 5984ae133fdd10ba54f6f95d,
       participant: 'mog',
       turns: 0.16666666666666666 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:39.055Z,
  from: 2017-08-04T17:20:39.052Z,
  to: 2017-08-04T17:25:39.052Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae133fdd10ba54f6f95e,
       participant: 'jordan',
       turns: 0.8333333333333334 },
     { _id: 5984ae133fdd10ba54f6f95d,
       participant: 'mog',
       turns: 0.16666666666666666 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:39.055Z,
  from: 2017-08-04T17:20:39.052Z,
  to: 2017-08-04T17:25:39.052Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T17:20:44.154Z 2017-08-04T17:25:44.154Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae183fdd10ba54f6f960,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 5984ae183fdd10ba54f6f95f, participant: 'mog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:44.257Z,
  from: 2017-08-04T17:20:44.154Z,
  to: 2017-08-04T17:25:44.154Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae183fdd10ba54f6f960,
       participant: 'jordan',
       turns: 0.8 },
     { _id: 5984ae183fdd10ba54f6f95f, participant: 'mog', turns: 0.2 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:44.257Z,
  from: 2017-08-04T17:20:44.154Z,
  to: 2017-08-04T17:25:44.154Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=dog, name=dog, participants=[participant=jordan, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:25:44.388Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU0NCwiZXhwIjoxNTg4MjY3NTQ0LCJpc3MiOiJmZWF0aGVycyJ9.5JSYASYAM6W1HQAMtecwRSanvsT1hE_Y-UTfMHPbXlU
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:25:44.388Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU0NCwiZXhwIjoxNTg4MjY3NTQ0LCJpc3MiOiJmZWF0aGVycyJ9.5JSYASYAM6W1HQAMtecwRSanvsT1hE_Y-UTfMHPbXlU' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:25:44.407Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae183fdd10ba54f6f961,
  timestamp: 2017-08-04T17:25:44.419Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae183fdd10ba54f6f961,
  timestamp: 2017-08-04T17:25:44.419Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:49.159Z 2017-08-04T17:25:49.159Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae1d3fdd10ba54f6f963,
       participant: 'jordan',
       turns: 0.6666666666666666 },
     { _id: 5984ae1d3fdd10ba54f6f962,
       participant: 'mog',
       turns: 0.3333333333333333 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:49.162Z,
  from: 2017-08-04T17:20:49.159Z,
  to: 2017-08-04T17:25:49.159Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae1d3fdd10ba54f6f963,
       participant: 'jordan',
       turns: 0.6666666666666666 },
     { _id: 5984ae1d3fdd10ba54f6f962,
       participant: 'mog',
       turns: 0.3333333333333333 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:49.162Z,
  from: 2017-08-04T17:20:49.159Z,
  to: 2017-08-04T17:25:49.159Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:25:51.221Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU1MSwiZXhwIjoxNTg4MjY3NTUxLCJpc3MiOiJmZWF0aGVycyJ9.yrZzTpNC5KUFfOlMgzodtvLy-CR3sdGgttpB2W7oNX0
info: meeting joined event: participant=dog, name=dog, participants=[participant=jordan, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:25:51.345Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU1MSwiZXhwIjoxNTg4MjY3NTUxLCJpc3MiOiJmZWF0aGVycyJ9.yrZzTpNC5KUFfOlMgzodtvLy-CR3sdGgttpB2W7oNX0
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:25:51.221Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU1MSwiZXhwIjoxNTg4MjY3NTUxLCJpc3MiOiJmZWF0aGVycyJ9.yrZzTpNC5KUFfOlMgzodtvLy-CR3sdGgttpB2W7oNX0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:25:51.345Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU1MSwiZXhwIjoxNTg4MjY3NTUxLCJpc3MiOiJmZWF0aGVycyJ9.yrZzTpNC5KUFfOlMgzodtvLy-CR3sdGgttpB2W7oNX0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:25:51.368Z } no
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:25:51.377Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae1f3fdd10ba54f6f964,
  timestamp: 2017-08-04T17:25:51.386Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae1f3fdd10ba54f6f964,
  timestamp: 2017-08-04T17:25:51.386Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae1f3fdd10ba54f6f965,
  timestamp: 2017-08-04T17:25:51.399Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae1f3fdd10ba54f6f965,
  timestamp: 2017-08-04T17:25:51.399Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:54.160Z 2017-08-04T17:25:54.160Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae223fdd10ba54f6f967,
       participant: 'jordan',
       turns: 0.6666666666666666 },
     { _id: 5984ae223fdd10ba54f6f966,
       participant: 'mog',
       turns: 0.3333333333333333 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:54.163Z,
  from: 2017-08-04T17:20:54.160Z,
  to: 2017-08-04T17:25:54.160Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae223fdd10ba54f6f967,
       participant: 'jordan',
       turns: 0.6666666666666666 },
     { _id: 5984ae223fdd10ba54f6f966,
       participant: 'mog',
       turns: 0.3333333333333333 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:54.163Z,
  from: 2017-08-04T17:20:54.160Z,
  to: 2017-08-04T17:25:54.160Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:20:59.165Z 2017-08-04T17:25:59.165Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae273fdd10ba54f6f969,
       participant: 'jordan',
       turns: 0.6666666666666666 },
     { _id: 5984ae273fdd10ba54f6f968,
       participant: 'mog',
       turns: 0.3333333333333333 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:59.168Z,
  from: 2017-08-04T17:20:59.165Z,
  to: 2017-08-04T17:25:59.165Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae273fdd10ba54f6f969,
       participant: 'jordan',
       turns: 0.6666666666666666 },
     { _id: 5984ae273fdd10ba54f6f968,
       participant: 'mog',
       turns: 0.3333333333333333 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:25:59.168Z,
  from: 2017-08-04T17:20:59.165Z,
  to: 2017-08-04T17:25:59.165Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T17:21:04.168Z 2017-08-04T17:26:04.168Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae2c3fdd10ba54f6f96b,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984ae2c3fdd10ba54f6f96a, participant: 'mog', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:26:04.170Z,
  from: 2017-08-04T17:21:04.168Z,
  to: 2017-08-04T17:26:04.168Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: auth filter, data: { turns: 
   [ { _id: 5984ae2c3fdd10ba54f6f96b,
       participant: 'jordan',
       turns: 0.5 },
     { _id: 5984ae2c3fdd10ba54f6f96a, participant: 'mog', turns: 0.5 } ],
  meeting: 'no',
  transitions: 1,
  timestamp: 2017-08-04T17:26:04.170Z,
  from: 2017-08-04T17:21:04.168Z,
  to: 2017-08-04T17:26:04.168Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:26:04.487Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU2NCwiZXhwIjoxNTg4MjY3NTY0LCJpc3MiOiJmZWF0aGVycyJ9.JB--viv87KMzMI7utBs4cNOKOwtHHGZDQGRrAvu1fR8
info: meeting joined event: participant=dog, name=dog, participants=[participant=jordan, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:26:04.641Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU2NCwiZXhwIjoxNTg4MjY3NTY0LCJpc3MiOiJmZWF0aGVycyJ9.JB--viv87KMzMI7utBs4cNOKOwtHHGZDQGRrAvu1fR8
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:26:04.487Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU2NCwiZXhwIjoxNTg4MjY3NTY0LCJpc3MiOiJmZWF0aGVycyJ9.JB--viv87KMzMI7utBs4cNOKOwtHHGZDQGRrAvu1fR8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:26:04.641Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU2NCwiZXhwIjoxNTg4MjY3NTY0LCJpc3MiOiJmZWF0aGVycyJ9.JB--viv87KMzMI7utBs4cNOKOwtHHGZDQGRrAvu1fR8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:26:04.654Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae2c3fdd10ba54f6f96c,
  timestamp: 2017-08-04T17:26:04.667Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae2c3fdd10ba54f6f96c,
  timestamp: 2017-08-04T17:26:04.667Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:26:04.663Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae2c3fdd10ba54f6f96d,
  timestamp: 2017-08-04T17:26:04.707Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae2c3fdd10ba54f6f96d,
  timestamp: 2017-08-04T17:26:04.707Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=dog, name=dog, participants=[participant=jordan, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:26:07.245Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU2NywiZXhwIjoxNTg4MjY3NTY3LCJpc3MiOiJmZWF0aGVycyJ9.e5vwOv4T18F72t0kUiI86znEekiV0iz_ZIN__BjAGgQ
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:26:07.245Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU2NywiZXhwIjoxNTg4MjY3NTY3LCJpc3MiOiJmZWF0aGVycyJ9.e5vwOv4T18F72t0kUiI86znEekiV0iz_ZIN__BjAGgQ' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog' ]
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:26:07.857Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU2NywiZXhwIjoxNTg4MjY3NTY3LCJpc3MiOiJmZWF0aGVycyJ9.e5vwOv4T18F72t0kUiI86znEekiV0iz_ZIN__BjAGgQ
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:26:07.858Z } no
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:26:07.857Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU2NywiZXhwIjoxNTg4MjY3NTY3LCJpc3MiOiJmZWF0aGVycyJ9.e5vwOv4T18F72t0kUiI86znEekiV0iz_ZIN__BjAGgQ' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae2f3fdd10ba54f6f96e,
  timestamp: 2017-08-04T17:26:07.898Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae2f3fdd10ba54f6f96e,
  timestamp: 2017-08-04T17:26:07.898Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:26:07.927Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae2f3fdd10ba54f6f96f,
  timestamp: 2017-08-04T17:26:07.934Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae2f3fdd10ba54f6f96f,
  timestamp: 2017-08-04T17:26:07.934Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:21:09.175Z 2017-08-04T17:26:09.175Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae313fdd10ba54f6f970, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:09.178Z,
  from: 2017-08-04T17:21:09.175Z,
  to: 2017-08-04T17:26:09.175Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae313fdd10ba54f6f970, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:09.178Z,
  from: 2017-08-04T17:21:09.175Z,
  to: 2017-08-04T17:26:09.175Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T17:21:14.178Z 2017-08-04T17:26:14.178Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae363fdd10ba54f6f971, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:14.182Z,
  from: 2017-08-04T17:21:14.178Z,
  to: 2017-08-04T17:26:14.178Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: auth filter, data: { turns: [ { _id: 5984ae363fdd10ba54f6f971, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:14.182Z,
  from: 2017-08-04T17:21:14.178Z,
  to: 2017-08-04T17:26:14.178Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:26:15.386Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU3NSwiZXhwIjoxNTg4MjY3NTc1LCJpc3MiOiJmZWF0aGVycyJ9.DHJyew8DhpMY-ptiOVLkGb5KW56dNHCowb9z1lwkcNk
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:26:15.386Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU3NSwiZXhwIjoxNTg4MjY3NTc1LCJpc3MiOiJmZWF0aGVycyJ9.DHJyew8DhpMY-ptiOVLkGb5KW56dNHCowb9z1lwkcNk' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
info: meeting joined event: participant=dog, name=dog, participants=[participant=jordan, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:26:15.643Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU3NSwiZXhwIjoxNTg4MjY3NTc1LCJpc3MiOiJmZWF0aGVycyJ9.DHJyew8DhpMY-ptiOVLkGb5KW56dNHCowb9z1lwkcNk
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:26:15.733Z } no
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:26:15.643Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU3NSwiZXhwIjoxNTg4MjY3NTc1LCJpc3MiOiJmZWF0aGVycyJ9.DHJyew8DhpMY-ptiOVLkGb5KW56dNHCowb9z1lwkcNk' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog' ]
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae373fdd10ba54f6f972,
  timestamp: 2017-08-04T17:26:15.906Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae373fdd10ba54f6f972,
  timestamp: 2017-08-04T17:26:15.906Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:26:15.903Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae373fdd10ba54f6f973,
  timestamp: 2017-08-04T17:26:15.962Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae373fdd10ba54f6f973,
  timestamp: 2017-08-04T17:26:15.962Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:21:19.182Z 2017-08-04T17:26:19.182Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae3b3fdd10ba54f6f974, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:19.185Z,
  from: 2017-08-04T17:21:19.182Z,
  to: 2017-08-04T17:26:19.182Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae3b3fdd10ba54f6f974, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:19.185Z,
  from: 2017-08-04T17:21:19.182Z,
  to: 2017-08-04T17:26:19.182Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:26:22.555Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU4MiwiZXhwIjoxNTg4MjY3NTgyLCJpc3MiOiJmZWF0aGVycyJ9.eYImY7UyvX9KZHmABMDKusGRqSEjlH1eaHqggVHj3qA
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:26:22.555Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU4MiwiZXhwIjoxNTg4MjY3NTgyLCJpc3MiOiJmZWF0aGVycyJ9.eYImY7UyvX9KZHmABMDKusGRqSEjlH1eaHqggVHj3qA' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:26:22.618Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae3e3fdd10ba54f6f975,
  timestamp: 2017-08-04T17:26:22.638Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae3e3fdd10ba54f6f975,
  timestamp: 2017-08-04T17:26:22.638Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:21:24.187Z 2017-08-04T17:26:24.187Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae403fdd10ba54f6f976, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:24.191Z,
  from: 2017-08-04T17:21:24.187Z,
  to: 2017-08-04T17:26:24.187Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:26:29.057Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU4OSwiZXhwIjoxNTg4MjY3NTg5LCJpc3MiOiJmZWF0aGVycyJ9.ZxXwAaGyRPnLhEdko1dzjhXooyYHASUIep2ws60mhVk
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:26:29.057Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU4OSwiZXhwIjoxNTg4MjY3NTg5LCJpc3MiOiJmZWF0aGVycyJ9.ZxXwAaGyRPnLhEdko1dzjhXooyYHASUIep2ws60mhVk' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:26:29.127Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae453fdd10ba54f6f977,
  timestamp: 2017-08-04T17:26:29.135Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae453fdd10ba54f6f977,
  timestamp: 2017-08-04T17:26:29.135Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:21:29.189Z 2017-08-04T17:26:29.189Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae453fdd10ba54f6f978, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:29.197Z,
  from: 2017-08-04T17:21:29.189Z,
  to: 2017-08-04T17:26:29.189Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae453fdd10ba54f6f978, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:29.197Z,
  from: 2017-08-04T17:21:29.189Z,
  to: 2017-08-04T17:26:29.189Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, bop, mog], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 240298 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:21:34.193Z 2017-08-04T17:26:34.193Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae4a3fdd10ba54f6f979, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:34.195Z,
  from: 2017-08-04T17:21:34.193Z,
  to: 2017-08-04T17:26:34.193Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:26:37.310Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU5NywiZXhwIjoxNTg4MjY3NTk3LCJpc3MiOiJmZWF0aGVycyJ9.LXWKtQn_XQi1FK-ZdlclosI58U4gCSXP-3Btpgt4IW4
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:26:37.310Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzU5NywiZXhwIjoxNTg4MjY3NTk3LCJpc3MiOiJmZWF0aGVycyJ9.LXWKtQn_XQi1FK-ZdlclosI58U4gCSXP-3Btpgt4IW4' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
patching meeting { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
info: not adding participant: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  lastUpdated: 2017-08-04T17:26:37.349Z } no
updated meeting with participants { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae4d3fdd10ba54f6f97a,
  timestamp: 2017-08-04T17:26:37.364Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'dog', 'bop', 'mog' ],
  _id: 5984ae4d3fdd10ba54f6f97a,
  timestamp: 2017-08-04T17:26:37.364Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:21:39.194Z 2017-08-04T17:26:39.194Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae4f3fdd10ba54f6f97b, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:39.196Z,
  from: 2017-08-04T17:21:39.194Z,
  to: 2017-08-04T17:26:39.194Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae4f3fdd10ba54f6f97b, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:39.196Z,
  from: 2017-08-04T17:21:39.194Z,
  to: 2017-08-04T17:26:39.194Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:21:44.197Z 2017-08-04T17:26:44.197Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae543fdd10ba54f6f97c, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:44.201Z,
  from: 2017-08-04T17:21:44.197Z,
  to: 2017-08-04T17:26:44.197Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae543fdd10ba54f6f97c, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:44.201Z,
  from: 2017-08-04T17:21:44.197Z,
  to: 2017-08-04T17:26:44.197Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:21:49.204Z 2017-08-04T17:26:49.204Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae593fdd10ba54f6f97d, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:49.206Z,
  from: 2017-08-04T17:21:49.204Z,
  to: 2017-08-04T17:26:49.204Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae593fdd10ba54f6f97d, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:49.206Z,
  from: 2017-08-04T17:21:49.204Z,
  to: 2017-08-04T17:26:49.204Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:21:54.207Z 2017-08-04T17:26:54.207Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae5e3fdd10ba54f6f97e, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:54.208Z,
  from: 2017-08-04T17:21:54.207Z,
  to: 2017-08-04T17:26:54.207Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae5e3fdd10ba54f6f97e, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:54.208Z,
  from: 2017-08-04T17:21:54.207Z,
  to: 2017-08-04T17:26:54.207Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:21:59.214Z 2017-08-04T17:26:59.214Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae633fdd10ba54f6f97f, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:59.217Z,
  from: 2017-08-04T17:21:59.214Z,
  to: 2017-08-04T17:26:59.214Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae633fdd10ba54f6f97f, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:26:59.217Z,
  from: 2017-08-04T17:21:59.214Z,
  to: 2017-08-04T17:26:59.214Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:22:04.220Z 2017-08-04T17:27:04.220Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae683fdd10ba54f6f980, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:04.223Z,
  from: 2017-08-04T17:22:04.220Z,
  to: 2017-08-04T17:27:04.220Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae683fdd10ba54f6f980, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:04.223Z,
  from: 2017-08-04T17:22:04.220Z,
  to: 2017-08-04T17:27:04.220Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:22:09.226Z 2017-08-04T17:27:09.226Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae6d3fdd10ba54f6f981, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:09.228Z,
  from: 2017-08-04T17:22:09.226Z,
  to: 2017-08-04T17:27:09.226Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae6d3fdd10ba54f6f981, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:09.228Z,
  from: 2017-08-04T17:22:09.226Z,
  to: 2017-08-04T17:27:09.226Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:22:14.231Z 2017-08-04T17:27:14.231Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae723fdd10ba54f6f982, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:14.234Z,
  from: 2017-08-04T17:22:14.231Z,
  to: 2017-08-04T17:27:14.231Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae723fdd10ba54f6f982, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:14.234Z,
  from: 2017-08-04T17:22:14.231Z,
  to: 2017-08-04T17:27:14.231Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:22:19.236Z 2017-08-04T17:27:19.236Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae773fdd10ba54f6f983, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:19.238Z,
  from: 2017-08-04T17:22:19.236Z,
  to: 2017-08-04T17:27:19.236Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae773fdd10ba54f6f983, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:19.238Z,
  from: 2017-08-04T17:22:19.236Z,
  to: 2017-08-04T17:27:19.236Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:22:24.241Z 2017-08-04T17:27:24.241Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae7c3fdd10ba54f6f984, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:24.244Z,
  from: 2017-08-04T17:22:24.241Z,
  to: 2017-08-04T17:27:24.241Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae7c3fdd10ba54f6f984, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:24.244Z,
  from: 2017-08-04T17:22:24.241Z,
  to: 2017-08-04T17:27:24.241Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:22:29.245Z 2017-08-04T17:27:29.245Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [ { _id: 5984ae813fdd10ba54f6f985, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:29.247Z,
  from: 2017-08-04T17:22:29.245Z,
  to: 2017-08-04T17:27:29.245Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [ { _id: 5984ae813fdd10ba54f6f985, participant: 'mog', turns: 1 } ],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-04T17:27:29.247Z,
  from: 2017-08-04T17:22:29.245Z,
  to: 2017-08-04T17:27:29.245Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, bop, mog], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 300301 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, bop, mog], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-04T17:27:33.720Z,
  endTime: 2017-08-04T17:27:33.725Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, dog, bop, mog], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Fri Aug 04 2017 13:27:33 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:27:33.725Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:27:33.725Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: auth filter, data: { participants: [],
  _id: 5984ae853fdd10ba54f6f987,
  timestamp: 2017-08-04T17:27:33.767Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [],
  _id: 5984ae853fdd10ba54f6f987,
  timestamp: 2017-08-04T17:27:33.767Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: utterances found: 1
0
2017-08-04T17:27:33.842Z
2017-08-04T17:27:33.842Z
2017-08-04T17:27:33.842Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 42
5080815
2017-08-04T16:02:53.992Z
2017-08-04T17:27:34.807Z
2017-08-04T16:02:55.016Z
5006595
2017-08-04T16:04:08.212Z
2017-08-04T17:27:34.807Z
2017-08-04T16:04:09.113Z
4994871
2017-08-04T16:04:19.936Z
2017-08-04T17:27:34.807Z
2017-08-04T16:04:19.936Z
4973274
2017-08-04T16:04:41.533Z
2017-08-04T17:27:34.807Z
2017-08-04T16:04:41.533Z
4943570
2017-08-04T16:05:11.237Z
2017-08-04T17:27:34.807Z
2017-08-04T16:05:11.842Z
3379055
2017-08-04T16:31:15.752Z
2017-08-04T17:27:34.807Z
2017-08-04T16:31:16.861Z
3105248
2017-08-04T16:35:49.559Z
2017-08-04T17:27:34.807Z
2017-08-04T16:35:49.559Z
2745884
2017-08-04T16:41:48.923Z
2017-08-04T17:27:34.807Z
2017-08-04T16:41:48.923Z
2735399
2017-08-04T16:41:59.408Z
2017-08-04T17:27:34.807Z
2017-08-04T16:41:59.408Z
2718619
2017-08-04T16:42:16.188Z
2017-08-04T17:27:34.807Z
2017-08-04T16:42:16.657Z
2517037
2017-08-04T16:45:37.770Z
2017-08-04T17:27:34.807Z
2017-08-04T16:45:37.983Z
2513624
2017-08-04T16:45:41.183Z
2017-08-04T17:27:34.807Z
2017-08-04T16:45:41.268Z
2511960
2017-08-04T16:45:42.847Z
2017-08-04T17:27:34.807Z
2017-08-04T16:45:42.847Z
2510210
2017-08-04T16:45:44.597Z
2017-08-04T17:27:34.807Z
2017-08-04T16:45:44.597Z
2485638
2017-08-04T16:46:09.169Z
2017-08-04T17:27:34.807Z
2017-08-04T16:46:09.169Z
2416586
2017-08-04T16:47:18.221Z
2017-08-04T17:27:34.807Z
2017-08-04T16:47:19.117Z
2400815
2017-08-04T16:47:33.992Z
2017-08-04T17:27:34.807Z
2017-08-04T16:47:33.992Z
2400004
2017-08-04T16:47:34.803Z
2017-08-04T17:27:34.807Z
2017-08-04T16:47:35.368Z
2396836
2017-08-04T16:47:37.971Z
2017-08-04T17:27:34.807Z
2017-08-04T16:47:38.227Z
2387017
2017-08-04T16:47:47.790Z
2017-08-04T17:27:34.807Z
2017-08-04T16:47:49.155Z
2382793
2017-08-04T16:47:52.014Z
2017-08-04T17:27:34.807Z
2017-08-04T16:47:56.195Z
2377715
2017-08-04T16:47:57.092Z
2017-08-04T17:27:34.807Z
2017-08-04T16:47:57.219Z
1903197
2017-08-04T16:55:51.610Z
2017-08-04T17:27:34.807Z
2017-08-04T16:55:52.122Z
1752028
2017-08-04T16:58:22.779Z
2017-08-04T17:27:34.807Z
2017-08-04T16:58:22.779Z
1718402
2017-08-04T16:58:56.405Z
2017-08-04T17:27:34.807Z
2017-08-04T16:58:56.405Z
921512
2017-08-04T17:12:13.295Z
2017-08-04T17:27:34.807Z
2017-08-04T17:12:13.295Z
713471
2017-08-04T17:15:41.336Z
2017-08-04T17:27:34.807Z
2017-08-04T17:15:41.336Z
540948
2017-08-04T17:18:33.859Z
2017-08-04T17:27:34.807Z
2017-08-04T17:18:33.859Z
434648
2017-08-04T17:20:20.159Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:20.202Z
433533
2017-08-04T17:20:21.274Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:21.578Z
431650
2017-08-04T17:20:23.157Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:23.200Z
430925
2017-08-04T17:20:23.882Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:25.930Z
427725
2017-08-04T17:20:27.082Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:29.472Z
423927
2017-08-04T17:20:30.880Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:34.170Z
419653
2017-08-04T17:20:35.154Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:35.154Z
416242
2017-08-04T17:20:38.565Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:38.651Z
411895
2017-08-04T17:20:42.912Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:43.040Z
407906
2017-08-04T17:20:46.901Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:47.072Z
406370
2017-08-04T17:20:48.437Z
2017-08-04T17:27:34.807Z
2017-08-04T17:20:48.522Z
394545
2017-08-04T17:21:00.262Z
2017-08-04T17:27:34.807Z
2017-08-04T17:21:00.646Z
386545
2017-08-04T17:21:08.262Z
2017-08-04T17:27:34.807Z
2017-08-04T17:21:08.304Z
0
2017-08-04T17:27:34.807Z
2017-08-04T17:27:34.807Z
2017-08-04T17:27:34.807Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 43
5085364
2017-08-04T16:02:53.992Z
2017-08-04T17:27:39.356Z
2017-08-04T16:02:55.016Z
5011144
2017-08-04T16:04:08.212Z
2017-08-04T17:27:39.356Z
2017-08-04T16:04:09.113Z
4999420
2017-08-04T16:04:19.936Z
2017-08-04T17:27:39.356Z
2017-08-04T16:04:19.936Z
4977823
2017-08-04T16:04:41.533Z
2017-08-04T17:27:39.356Z
2017-08-04T16:04:41.533Z
4948119
2017-08-04T16:05:11.237Z
2017-08-04T17:27:39.356Z
2017-08-04T16:05:11.842Z
3383604
2017-08-04T16:31:15.752Z
2017-08-04T17:27:39.356Z
2017-08-04T16:31:16.861Z
3109797
2017-08-04T16:35:49.559Z
2017-08-04T17:27:39.356Z
2017-08-04T16:35:49.559Z
2750433
2017-08-04T16:41:48.923Z
2017-08-04T17:27:39.356Z
2017-08-04T16:41:48.923Z
2739948
2017-08-04T16:41:59.408Z
2017-08-04T17:27:39.356Z
2017-08-04T16:41:59.408Z
2723168
2017-08-04T16:42:16.188Z
2017-08-04T17:27:39.356Z
2017-08-04T16:42:16.657Z
2521586
2017-08-04T16:45:37.770Z
2017-08-04T17:27:39.356Z
2017-08-04T16:45:37.983Z
2518173
2017-08-04T16:45:41.183Z
2017-08-04T17:27:39.356Z
2017-08-04T16:45:41.268Z
2516509
2017-08-04T16:45:42.847Z
2017-08-04T17:27:39.356Z
2017-08-04T16:45:42.847Z
2514759
2017-08-04T16:45:44.597Z
2017-08-04T17:27:39.356Z
2017-08-04T16:45:44.597Z
2490187
2017-08-04T16:46:09.169Z
2017-08-04T17:27:39.356Z
2017-08-04T16:46:09.169Z
2421135
2017-08-04T16:47:18.221Z
2017-08-04T17:27:39.356Z
2017-08-04T16:47:19.117Z
2405364
2017-08-04T16:47:33.992Z
2017-08-04T17:27:39.356Z
2017-08-04T16:47:33.992Z
2404553
2017-08-04T16:47:34.803Z
2017-08-04T17:27:39.356Z
2017-08-04T16:47:35.368Z
2401385
2017-08-04T16:47:37.971Z
2017-08-04T17:27:39.356Z
2017-08-04T16:47:38.227Z
2391566
2017-08-04T16:47:47.790Z
2017-08-04T17:27:39.356Z
2017-08-04T16:47:49.155Z
2387342
2017-08-04T16:47:52.014Z
2017-08-04T17:27:39.356Z
2017-08-04T16:47:56.195Z
2382264
2017-08-04T16:47:57.092Z
2017-08-04T17:27:39.356Z
2017-08-04T16:47:57.219Z
1907746
2017-08-04T16:55:51.610Z
2017-08-04T17:27:39.356Z
2017-08-04T16:55:52.122Z
1756577
2017-08-04T16:58:22.779Z
2017-08-04T17:27:39.356Z
2017-08-04T16:58:22.779Z
1722951
2017-08-04T16:58:56.405Z
2017-08-04T17:27:39.356Z
2017-08-04T16:58:56.405Z
926061
2017-08-04T17:12:13.295Z
2017-08-04T17:27:39.356Z
2017-08-04T17:12:13.295Z
718020
2017-08-04T17:15:41.336Z
2017-08-04T17:27:39.356Z
2017-08-04T17:15:41.336Z
545497
2017-08-04T17:18:33.859Z
2017-08-04T17:27:39.356Z
2017-08-04T17:18:33.859Z
439197
2017-08-04T17:20:20.159Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:20.202Z
438082
2017-08-04T17:20:21.274Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:21.578Z
436199
2017-08-04T17:20:23.157Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:23.200Z
435474
2017-08-04T17:20:23.882Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:25.930Z
432274
2017-08-04T17:20:27.082Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:29.472Z
428476
2017-08-04T17:20:30.880Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:34.170Z
424202
2017-08-04T17:20:35.154Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:35.154Z
420791
2017-08-04T17:20:38.565Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:38.651Z
416444
2017-08-04T17:20:42.912Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:43.040Z
412455
2017-08-04T17:20:46.901Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:47.072Z
410919
2017-08-04T17:20:48.437Z
2017-08-04T17:27:39.356Z
2017-08-04T17:20:48.522Z
399094
2017-08-04T17:21:00.262Z
2017-08-04T17:27:39.356Z
2017-08-04T17:21:00.646Z
391094
2017-08-04T17:21:08.262Z
2017-08-04T17:27:39.356Z
2017-08-04T17:21:08.304Z
4549
2017-08-04T17:27:34.807Z
2017-08-04T17:27:39.356Z
2017-08-04T17:27:34.807Z
0
2017-08-04T17:27:39.356Z
2017-08-04T17:27:39.356Z
2017-08-04T17:27:39.356Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 2
5534
2017-08-04T17:27:33.842Z
2017-08-04T17:27:39.376Z
2017-08-04T17:27:33.842Z
0
2017-08-04T17:27:39.376Z
2017-08-04T17:27:39.376Z
2017-08-04T17:27:39.975Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 44
5087795
2017-08-04T16:02:53.992Z
2017-08-04T17:27:41.787Z
2017-08-04T16:02:55.016Z
5013575
2017-08-04T16:04:08.212Z
2017-08-04T17:27:41.787Z
2017-08-04T16:04:09.113Z
5001851
2017-08-04T16:04:19.936Z
2017-08-04T17:27:41.787Z
2017-08-04T16:04:19.936Z
4980254
2017-08-04T16:04:41.533Z
2017-08-04T17:27:41.787Z
2017-08-04T16:04:41.533Z
4950550
2017-08-04T16:05:11.237Z
2017-08-04T17:27:41.787Z
2017-08-04T16:05:11.842Z
3386035
2017-08-04T16:31:15.752Z
2017-08-04T17:27:41.787Z
2017-08-04T16:31:16.861Z
3112228
2017-08-04T16:35:49.559Z
2017-08-04T17:27:41.787Z
2017-08-04T16:35:49.559Z
2752864
2017-08-04T16:41:48.923Z
2017-08-04T17:27:41.787Z
2017-08-04T16:41:48.923Z
2742379
2017-08-04T16:41:59.408Z
2017-08-04T17:27:41.787Z
2017-08-04T16:41:59.408Z
2725599
2017-08-04T16:42:16.188Z
2017-08-04T17:27:41.787Z
2017-08-04T16:42:16.657Z
2524017
2017-08-04T16:45:37.770Z
2017-08-04T17:27:41.787Z
2017-08-04T16:45:37.983Z
2520604
2017-08-04T16:45:41.183Z
2017-08-04T17:27:41.787Z
2017-08-04T16:45:41.268Z
2518940
2017-08-04T16:45:42.847Z
2017-08-04T17:27:41.787Z
2017-08-04T16:45:42.847Z
2517190
2017-08-04T16:45:44.597Z
2017-08-04T17:27:41.787Z
2017-08-04T16:45:44.597Z
2492618
2017-08-04T16:46:09.169Z
2017-08-04T17:27:41.787Z
2017-08-04T16:46:09.169Z
2423566
2017-08-04T16:47:18.221Z
2017-08-04T17:27:41.787Z
2017-08-04T16:47:19.117Z
2407795
2017-08-04T16:47:33.992Z
2017-08-04T17:27:41.787Z
2017-08-04T16:47:33.992Z
2406984
2017-08-04T16:47:34.803Z
2017-08-04T17:27:41.787Z
2017-08-04T16:47:35.368Z
2403816
2017-08-04T16:47:37.971Z
2017-08-04T17:27:41.787Z
2017-08-04T16:47:38.227Z
2393997
2017-08-04T16:47:47.790Z
2017-08-04T17:27:41.787Z
2017-08-04T16:47:49.155Z
2389773
2017-08-04T16:47:52.014Z
2017-08-04T17:27:41.787Z
2017-08-04T16:47:56.195Z
2384695
2017-08-04T16:47:57.092Z
2017-08-04T17:27:41.787Z
2017-08-04T16:47:57.219Z
1910177
2017-08-04T16:55:51.610Z
2017-08-04T17:27:41.787Z
2017-08-04T16:55:52.122Z
1759008
2017-08-04T16:58:22.779Z
2017-08-04T17:27:41.787Z
2017-08-04T16:58:22.779Z
1725382
2017-08-04T16:58:56.405Z
2017-08-04T17:27:41.787Z
2017-08-04T16:58:56.405Z
928492
2017-08-04T17:12:13.295Z
2017-08-04T17:27:41.787Z
2017-08-04T17:12:13.295Z
720451
2017-08-04T17:15:41.336Z
2017-08-04T17:27:41.787Z
2017-08-04T17:15:41.336Z
547928
2017-08-04T17:18:33.859Z
2017-08-04T17:27:41.787Z
2017-08-04T17:18:33.859Z
441628
2017-08-04T17:20:20.159Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:20.202Z
440513
2017-08-04T17:20:21.274Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:21.578Z
438630
2017-08-04T17:20:23.157Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:23.200Z
437905
2017-08-04T17:20:23.882Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:25.930Z
434705
2017-08-04T17:20:27.082Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:29.472Z
430907
2017-08-04T17:20:30.880Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:34.170Z
426633
2017-08-04T17:20:35.154Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:35.154Z
423222
2017-08-04T17:20:38.565Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:38.651Z
418875
2017-08-04T17:20:42.912Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:43.040Z
414886
2017-08-04T17:20:46.901Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:47.072Z
413350
2017-08-04T17:20:48.437Z
2017-08-04T17:27:41.787Z
2017-08-04T17:20:48.522Z
401525
2017-08-04T17:21:00.262Z
2017-08-04T17:27:41.787Z
2017-08-04T17:21:00.646Z
393525
2017-08-04T17:21:08.262Z
2017-08-04T17:27:41.787Z
2017-08-04T17:21:08.304Z
6980
2017-08-04T17:27:34.807Z
2017-08-04T17:27:41.787Z
2017-08-04T17:27:34.807Z
2431
2017-08-04T17:27:39.356Z
2017-08-04T17:27:41.787Z
2017-08-04T17:27:39.356Z
0
2017-08-04T17:27:41.787Z
2017-08-04T17:27:41.787Z
2017-08-04T17:27:42.043Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 3
7582
2017-08-04T17:27:33.842Z
2017-08-04T17:27:41.424Z
2017-08-04T17:27:33.842Z
2048
2017-08-04T17:27:39.376Z
2017-08-04T17:27:41.424Z
2017-08-04T17:27:39.975Z
0
2017-08-04T17:27:41.424Z
2017-08-04T17:27:41.424Z
2017-08-04T17:27:42.961Z
info: Tried to insert repeat talking history data! Nuh-Uh
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:27:44.936Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY2NCwiZXhwIjoxNTg4MjY3NjY0LCJpc3MiOiJmZWF0aGVycyJ9.P9a4uf9njrU0rFc3ZgIpcqFWmOIrODJMH2rfw_WVgCg
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:27:44.936Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY2NCwiZXhwIjoxNTg4MjY3NjY0LCJpc3MiOiJmZWF0aGVycyJ9.P9a4uf9njrU0rFc3ZgIpcqFWmOIrODJMH2rfw_WVgCg' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:27:33.725Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
info: not adding participant: { participants: [ 'dog', 'jordan' ],
  lastUpdated: 2017-08-04T17:27:44.985Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:22:44.996Z 2017-08-04T17:27:44.996Z
updated meeting with participants { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984ae903fdd10ba54f6f98f,
  timestamp: 2017-08-04T17:27:44.997Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984ae903fdd10ba54f6f98f,
  timestamp: 2017-08-04T17:27:44.997Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae913fdd10ba54f6f991, participant: 'dog', turns: 0.5 },
     { _id: 5984ae913fdd10ba54f6f990,
       participant: 'jordan',
       turns: 0.5 } ],
  meeting: 'no',
  transitions: 4,
  timestamp: 2017-08-04T17:27:45.059Z,
  from: 2017-08-04T17:22:44.996Z,
  to: 2017-08-04T17:27:44.996Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae913fdd10ba54f6f991, participant: 'dog', turns: 0.5 },
     { _id: 5984ae913fdd10ba54f6f990,
       participant: 'jordan',
       turns: 0.5 } ],
  meeting: 'no',
  transitions: 4,
  timestamp: 2017-08-04T17:27:45.059Z,
  from: 2017-08-04T17:22:44.996Z,
  to: 2017-08-04T17:27:44.996Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 4
9759
2017-08-04T17:27:33.842Z
2017-08-04T17:27:43.601Z
2017-08-04T17:27:33.842Z
4225
2017-08-04T17:27:39.376Z
2017-08-04T17:27:43.601Z
2017-08-04T17:27:39.975Z
2177
2017-08-04T17:27:41.424Z
2017-08-04T17:27:43.601Z
2017-08-04T17:27:42.961Z
0
2017-08-04T17:27:43.601Z
2017-08-04T17:27:43.601Z
2017-08-04T17:27:45.489Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 45
5092270
2017-08-04T16:02:53.992Z
2017-08-04T17:27:46.262Z
2017-08-04T16:02:55.016Z
5018050
2017-08-04T16:04:08.212Z
2017-08-04T17:27:46.262Z
2017-08-04T16:04:09.113Z
5006326
2017-08-04T16:04:19.936Z
2017-08-04T17:27:46.262Z
2017-08-04T16:04:19.936Z
4984729
2017-08-04T16:04:41.533Z
2017-08-04T17:27:46.262Z
2017-08-04T16:04:41.533Z
4955025
2017-08-04T16:05:11.237Z
2017-08-04T17:27:46.262Z
2017-08-04T16:05:11.842Z
3390510
2017-08-04T16:31:15.752Z
2017-08-04T17:27:46.262Z
2017-08-04T16:31:16.861Z
3116703
2017-08-04T16:35:49.559Z
2017-08-04T17:27:46.262Z
2017-08-04T16:35:49.559Z
2757339
2017-08-04T16:41:48.923Z
2017-08-04T17:27:46.262Z
2017-08-04T16:41:48.923Z
2746854
2017-08-04T16:41:59.408Z
2017-08-04T17:27:46.262Z
2017-08-04T16:41:59.408Z
2730074
2017-08-04T16:42:16.188Z
2017-08-04T17:27:46.262Z
2017-08-04T16:42:16.657Z
2528492
2017-08-04T16:45:37.770Z
2017-08-04T17:27:46.262Z
2017-08-04T16:45:37.983Z
2525079
2017-08-04T16:45:41.183Z
2017-08-04T17:27:46.262Z
2017-08-04T16:45:41.268Z
2523415
2017-08-04T16:45:42.847Z
2017-08-04T17:27:46.262Z
2017-08-04T16:45:42.847Z
2521665
2017-08-04T16:45:44.597Z
2017-08-04T17:27:46.262Z
2017-08-04T16:45:44.597Z
2497093
2017-08-04T16:46:09.169Z
2017-08-04T17:27:46.262Z
2017-08-04T16:46:09.169Z
2428041
2017-08-04T16:47:18.221Z
2017-08-04T17:27:46.262Z
2017-08-04T16:47:19.117Z
2412270
2017-08-04T16:47:33.992Z
2017-08-04T17:27:46.262Z
2017-08-04T16:47:33.992Z
2411459
2017-08-04T16:47:34.803Z
2017-08-04T17:27:46.262Z
2017-08-04T16:47:35.368Z
2408291
2017-08-04T16:47:37.971Z
2017-08-04T17:27:46.262Z
2017-08-04T16:47:38.227Z
2398472
2017-08-04T16:47:47.790Z
2017-08-04T17:27:46.262Z
2017-08-04T16:47:49.155Z
2394248
2017-08-04T16:47:52.014Z
2017-08-04T17:27:46.262Z
2017-08-04T16:47:56.195Z
2389170
2017-08-04T16:47:57.092Z
2017-08-04T17:27:46.262Z
2017-08-04T16:47:57.219Z
1914652
2017-08-04T16:55:51.610Z
2017-08-04T17:27:46.262Z
2017-08-04T16:55:52.122Z
1763483
2017-08-04T16:58:22.779Z
2017-08-04T17:27:46.262Z
2017-08-04T16:58:22.779Z
1729857
2017-08-04T16:58:56.405Z
2017-08-04T17:27:46.262Z
2017-08-04T16:58:56.405Z
932967
2017-08-04T17:12:13.295Z
2017-08-04T17:27:46.262Z
2017-08-04T17:12:13.295Z
724926
2017-08-04T17:15:41.336Z
2017-08-04T17:27:46.262Z
2017-08-04T17:15:41.336Z
552403
2017-08-04T17:18:33.859Z
2017-08-04T17:27:46.262Z
2017-08-04T17:18:33.859Z
446103
2017-08-04T17:20:20.159Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:20.202Z
444988
2017-08-04T17:20:21.274Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:21.578Z
443105
2017-08-04T17:20:23.157Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:23.200Z
442380
2017-08-04T17:20:23.882Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:25.930Z
439180
2017-08-04T17:20:27.082Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:29.472Z
435382
2017-08-04T17:20:30.880Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:34.170Z
431108
2017-08-04T17:20:35.154Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:35.154Z
427697
2017-08-04T17:20:38.565Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:38.651Z
423350
2017-08-04T17:20:42.912Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:43.040Z
419361
2017-08-04T17:20:46.901Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:47.072Z
417825
2017-08-04T17:20:48.437Z
2017-08-04T17:27:46.262Z
2017-08-04T17:20:48.522Z
406000
2017-08-04T17:21:00.262Z
2017-08-04T17:27:46.262Z
2017-08-04T17:21:00.646Z
398000
2017-08-04T17:21:08.262Z
2017-08-04T17:27:46.262Z
2017-08-04T17:21:08.304Z
11455
2017-08-04T17:27:34.807Z
2017-08-04T17:27:46.262Z
2017-08-04T17:27:34.807Z
6906
2017-08-04T17:27:39.356Z
2017-08-04T17:27:46.262Z
2017-08-04T17:27:39.356Z
4475
2017-08-04T17:27:41.787Z
2017-08-04T17:27:46.262Z
2017-08-04T17:27:42.043Z
0
2017-08-04T17:27:46.262Z
2017-08-04T17:27:46.262Z
2017-08-04T17:27:46.306Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 5
12468
2017-08-04T17:27:33.842Z
2017-08-04T17:27:46.310Z
2017-08-04T17:27:33.842Z
6934
2017-08-04T17:27:39.376Z
2017-08-04T17:27:46.310Z
2017-08-04T17:27:39.975Z
4886
2017-08-04T17:27:41.424Z
2017-08-04T17:27:46.310Z
2017-08-04T17:27:42.961Z
2709
2017-08-04T17:27:43.601Z
2017-08-04T17:27:46.310Z
2017-08-04T17:27:45.489Z
0
2017-08-04T17:27:46.310Z
2017-08-04T17:27:46.310Z
2017-08-04T17:27:46.397Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 46
5093294
2017-08-04T16:02:53.992Z
2017-08-04T17:27:47.286Z
2017-08-04T16:02:55.016Z
5019074
2017-08-04T16:04:08.212Z
2017-08-04T17:27:47.286Z
2017-08-04T16:04:09.113Z
5007350
2017-08-04T16:04:19.936Z
2017-08-04T17:27:47.286Z
2017-08-04T16:04:19.936Z
4985753
2017-08-04T16:04:41.533Z
2017-08-04T17:27:47.286Z
2017-08-04T16:04:41.533Z
4956049
2017-08-04T16:05:11.237Z
2017-08-04T17:27:47.286Z
2017-08-04T16:05:11.842Z
3391534
2017-08-04T16:31:15.752Z
2017-08-04T17:27:47.286Z
2017-08-04T16:31:16.861Z
3117727
2017-08-04T16:35:49.559Z
2017-08-04T17:27:47.286Z
2017-08-04T16:35:49.559Z
2758363
2017-08-04T16:41:48.923Z
2017-08-04T17:27:47.286Z
2017-08-04T16:41:48.923Z
2747878
2017-08-04T16:41:59.408Z
2017-08-04T17:27:47.286Z
2017-08-04T16:41:59.408Z
2731098
2017-08-04T16:42:16.188Z
2017-08-04T17:27:47.286Z
2017-08-04T16:42:16.657Z
2529516
2017-08-04T16:45:37.770Z
2017-08-04T17:27:47.286Z
2017-08-04T16:45:37.983Z
2526103
2017-08-04T16:45:41.183Z
2017-08-04T17:27:47.286Z
2017-08-04T16:45:41.268Z
2524439
2017-08-04T16:45:42.847Z
2017-08-04T17:27:47.286Z
2017-08-04T16:45:42.847Z
2522689
2017-08-04T16:45:44.597Z
2017-08-04T17:27:47.286Z
2017-08-04T16:45:44.597Z
2498117
2017-08-04T16:46:09.169Z
2017-08-04T17:27:47.286Z
2017-08-04T16:46:09.169Z
2429065
2017-08-04T16:47:18.221Z
2017-08-04T17:27:47.286Z
2017-08-04T16:47:19.117Z
2413294
2017-08-04T16:47:33.992Z
2017-08-04T17:27:47.286Z
2017-08-04T16:47:33.992Z
2412483
2017-08-04T16:47:34.803Z
2017-08-04T17:27:47.286Z
2017-08-04T16:47:35.368Z
2409315
2017-08-04T16:47:37.971Z
2017-08-04T17:27:47.286Z
2017-08-04T16:47:38.227Z
2399496
2017-08-04T16:47:47.790Z
2017-08-04T17:27:47.286Z
2017-08-04T16:47:49.155Z
2395272
2017-08-04T16:47:52.014Z
2017-08-04T17:27:47.286Z
2017-08-04T16:47:56.195Z
2390194
2017-08-04T16:47:57.092Z
2017-08-04T17:27:47.286Z
2017-08-04T16:47:57.219Z
1915676
2017-08-04T16:55:51.610Z
2017-08-04T17:27:47.286Z
2017-08-04T16:55:52.122Z
1764507
2017-08-04T16:58:22.779Z
2017-08-04T17:27:47.286Z
2017-08-04T16:58:22.779Z
1730881
2017-08-04T16:58:56.405Z
2017-08-04T17:27:47.286Z
2017-08-04T16:58:56.405Z
933991
2017-08-04T17:12:13.295Z
2017-08-04T17:27:47.286Z
2017-08-04T17:12:13.295Z
725950
2017-08-04T17:15:41.336Z
2017-08-04T17:27:47.286Z
2017-08-04T17:15:41.336Z
553427
2017-08-04T17:18:33.859Z
2017-08-04T17:27:47.286Z
2017-08-04T17:18:33.859Z
447127
2017-08-04T17:20:20.159Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:20.202Z
446012
2017-08-04T17:20:21.274Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:21.578Z
444129
2017-08-04T17:20:23.157Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:23.200Z
443404
2017-08-04T17:20:23.882Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:25.930Z
440204
2017-08-04T17:20:27.082Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:29.472Z
436406
2017-08-04T17:20:30.880Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:34.170Z
432132
2017-08-04T17:20:35.154Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:35.154Z
428721
2017-08-04T17:20:38.565Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:38.651Z
424374
2017-08-04T17:20:42.912Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:43.040Z
420385
2017-08-04T17:20:46.901Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:47.072Z
418849
2017-08-04T17:20:48.437Z
2017-08-04T17:27:47.286Z
2017-08-04T17:20:48.522Z
407024
2017-08-04T17:21:00.262Z
2017-08-04T17:27:47.286Z
2017-08-04T17:21:00.646Z
399024
2017-08-04T17:21:08.262Z
2017-08-04T17:27:47.286Z
2017-08-04T17:21:08.304Z
12479
2017-08-04T17:27:34.807Z
2017-08-04T17:27:47.286Z
2017-08-04T17:27:34.807Z
7930
2017-08-04T17:27:39.356Z
2017-08-04T17:27:47.286Z
2017-08-04T17:27:39.356Z
5499
2017-08-04T17:27:41.787Z
2017-08-04T17:27:47.286Z
2017-08-04T17:27:42.043Z
1024
2017-08-04T17:27:46.262Z
2017-08-04T17:27:47.286Z
2017-08-04T17:27:46.306Z
0
2017-08-04T17:27:47.286Z
2017-08-04T17:27:47.286Z
2017-08-04T17:27:47.675Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 6
13627
2017-08-04T17:27:33.842Z
2017-08-04T17:27:47.469Z
2017-08-04T17:27:33.842Z
8093
2017-08-04T17:27:39.376Z
2017-08-04T17:27:47.469Z
2017-08-04T17:27:39.975Z
6045
2017-08-04T17:27:41.424Z
2017-08-04T17:27:47.469Z
2017-08-04T17:27:42.961Z
3868
2017-08-04T17:27:43.601Z
2017-08-04T17:27:47.469Z
2017-08-04T17:27:45.489Z
1159
2017-08-04T17:27:46.310Z
2017-08-04T17:27:47.469Z
2017-08-04T17:27:46.397Z
0
2017-08-04T17:27:47.469Z
2017-08-04T17:27:47.469Z
2017-08-04T17:27:47.723Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:22:50.002Z 2017-08-04T17:27:50.002Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae963fdd10ba54f6f998,
       participant: 'dog',
       turns: 0.5454545454545454 },
     { _id: 5984ae963fdd10ba54f6f997,
       participant: 'jordan',
       turns: 0.45454545454545453 } ],
  meeting: 'no',
  transitions: 8,
  timestamp: 2017-08-04T17:27:50.004Z,
  from: 2017-08-04T17:22:50.002Z,
  to: 2017-08-04T17:27:50.002Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae963fdd10ba54f6f998,
       participant: 'dog',
       turns: 0.5454545454545454 },
     { _id: 5984ae963fdd10ba54f6f997,
       participant: 'jordan',
       turns: 0.45454545454545453 } ],
  meeting: 'no',
  transitions: 8,
  timestamp: 2017-08-04T17:27:50.004Z,
  from: 2017-08-04T17:22:50.002Z,
  to: 2017-08-04T17:27:50.002Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 47
5096356
2017-08-04T16:02:53.992Z
2017-08-04T17:27:50.348Z
2017-08-04T16:02:55.016Z
5022136
2017-08-04T16:04:08.212Z
2017-08-04T17:27:50.348Z
2017-08-04T16:04:09.113Z
5010412
2017-08-04T16:04:19.936Z
2017-08-04T17:27:50.348Z
2017-08-04T16:04:19.936Z
4988815
2017-08-04T16:04:41.533Z
2017-08-04T17:27:50.348Z
2017-08-04T16:04:41.533Z
4959111
2017-08-04T16:05:11.237Z
2017-08-04T17:27:50.348Z
2017-08-04T16:05:11.842Z
3394596
2017-08-04T16:31:15.752Z
2017-08-04T17:27:50.348Z
2017-08-04T16:31:16.861Z
3120789
2017-08-04T16:35:49.559Z
2017-08-04T17:27:50.348Z
2017-08-04T16:35:49.559Z
2761425
2017-08-04T16:41:48.923Z
2017-08-04T17:27:50.348Z
2017-08-04T16:41:48.923Z
2750940
2017-08-04T16:41:59.408Z
2017-08-04T17:27:50.348Z
2017-08-04T16:41:59.408Z
2734160
2017-08-04T16:42:16.188Z
2017-08-04T17:27:50.348Z
2017-08-04T16:42:16.657Z
2532578
2017-08-04T16:45:37.770Z
2017-08-04T17:27:50.348Z
2017-08-04T16:45:37.983Z
2529165
2017-08-04T16:45:41.183Z
2017-08-04T17:27:50.348Z
2017-08-04T16:45:41.268Z
2527501
2017-08-04T16:45:42.847Z
2017-08-04T17:27:50.348Z
2017-08-04T16:45:42.847Z
2525751
2017-08-04T16:45:44.597Z
2017-08-04T17:27:50.348Z
2017-08-04T16:45:44.597Z
2501179
2017-08-04T16:46:09.169Z
2017-08-04T17:27:50.348Z
2017-08-04T16:46:09.169Z
2432127
2017-08-04T16:47:18.221Z
2017-08-04T17:27:50.348Z
2017-08-04T16:47:19.117Z
2416356
2017-08-04T16:47:33.992Z
2017-08-04T17:27:50.348Z
2017-08-04T16:47:33.992Z
2415545
2017-08-04T16:47:34.803Z
2017-08-04T17:27:50.348Z
2017-08-04T16:47:35.368Z
2412377
2017-08-04T16:47:37.971Z
2017-08-04T17:27:50.348Z
2017-08-04T16:47:38.227Z
2402558
2017-08-04T16:47:47.790Z
2017-08-04T17:27:50.348Z
2017-08-04T16:47:49.155Z
2398334
2017-08-04T16:47:52.014Z
2017-08-04T17:27:50.348Z
2017-08-04T16:47:56.195Z
2393256
2017-08-04T16:47:57.092Z
2017-08-04T17:27:50.348Z
2017-08-04T16:47:57.219Z
1918738
2017-08-04T16:55:51.610Z
2017-08-04T17:27:50.348Z
2017-08-04T16:55:52.122Z
1767569
2017-08-04T16:58:22.779Z
2017-08-04T17:27:50.348Z
2017-08-04T16:58:22.779Z
1733943
2017-08-04T16:58:56.405Z
2017-08-04T17:27:50.348Z
2017-08-04T16:58:56.405Z
937053
2017-08-04T17:12:13.295Z
2017-08-04T17:27:50.348Z
2017-08-04T17:12:13.295Z
729012
2017-08-04T17:15:41.336Z
2017-08-04T17:27:50.348Z
2017-08-04T17:15:41.336Z
556489
2017-08-04T17:18:33.859Z
2017-08-04T17:27:50.348Z
2017-08-04T17:18:33.859Z
450189
2017-08-04T17:20:20.159Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:20.202Z
449074
2017-08-04T17:20:21.274Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:21.578Z
447191
2017-08-04T17:20:23.157Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:23.200Z
446466
2017-08-04T17:20:23.882Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:25.930Z
443266
2017-08-04T17:20:27.082Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:29.472Z
439468
2017-08-04T17:20:30.880Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:34.170Z
435194
2017-08-04T17:20:35.154Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:35.154Z
431783
2017-08-04T17:20:38.565Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:38.651Z
427436
2017-08-04T17:20:42.912Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:43.040Z
423447
2017-08-04T17:20:46.901Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:47.072Z
421911
2017-08-04T17:20:48.437Z
2017-08-04T17:27:50.348Z
2017-08-04T17:20:48.522Z
410086
2017-08-04T17:21:00.262Z
2017-08-04T17:27:50.348Z
2017-08-04T17:21:00.646Z
402086
2017-08-04T17:21:08.262Z
2017-08-04T17:27:50.348Z
2017-08-04T17:21:08.304Z
15541
2017-08-04T17:27:34.807Z
2017-08-04T17:27:50.348Z
2017-08-04T17:27:34.807Z
10992
2017-08-04T17:27:39.356Z
2017-08-04T17:27:50.348Z
2017-08-04T17:27:39.356Z
8561
2017-08-04T17:27:41.787Z
2017-08-04T17:27:50.348Z
2017-08-04T17:27:42.043Z
4086
2017-08-04T17:27:46.262Z
2017-08-04T17:27:50.348Z
2017-08-04T17:27:46.306Z
3062
2017-08-04T17:27:47.286Z
2017-08-04T17:27:50.348Z
2017-08-04T17:27:47.675Z
0
2017-08-04T17:27:50.348Z
2017-08-04T17:27:50.348Z
2017-08-04T17:27:50.348Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 7
16511
2017-08-04T17:27:33.842Z
2017-08-04T17:27:50.353Z
2017-08-04T17:27:33.842Z
10977
2017-08-04T17:27:39.376Z
2017-08-04T17:27:50.353Z
2017-08-04T17:27:39.975Z
8929
2017-08-04T17:27:41.424Z
2017-08-04T17:27:50.353Z
2017-08-04T17:27:42.961Z
6752
2017-08-04T17:27:43.601Z
2017-08-04T17:27:50.353Z
2017-08-04T17:27:45.489Z
4043
2017-08-04T17:27:46.310Z
2017-08-04T17:27:50.353Z
2017-08-04T17:27:46.397Z
2884
2017-08-04T17:27:47.469Z
2017-08-04T17:27:50.353Z
2017-08-04T17:27:47.723Z
0
2017-08-04T17:27:50.353Z
2017-08-04T17:27:50.353Z
2017-08-04T17:27:51.128Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 48
5098299
2017-08-04T16:02:53.992Z
2017-08-04T17:27:52.291Z
2017-08-04T16:02:55.016Z
5024079
2017-08-04T16:04:08.212Z
2017-08-04T17:27:52.291Z
2017-08-04T16:04:09.113Z
5012355
2017-08-04T16:04:19.936Z
2017-08-04T17:27:52.291Z
2017-08-04T16:04:19.936Z
4990758
2017-08-04T16:04:41.533Z
2017-08-04T17:27:52.291Z
2017-08-04T16:04:41.533Z
4961054
2017-08-04T16:05:11.237Z
2017-08-04T17:27:52.291Z
2017-08-04T16:05:11.842Z
3396539
2017-08-04T16:31:15.752Z
2017-08-04T17:27:52.291Z
2017-08-04T16:31:16.861Z
3122732
2017-08-04T16:35:49.559Z
2017-08-04T17:27:52.291Z
2017-08-04T16:35:49.559Z
2763368
2017-08-04T16:41:48.923Z
2017-08-04T17:27:52.291Z
2017-08-04T16:41:48.923Z
2752883
2017-08-04T16:41:59.408Z
2017-08-04T17:27:52.291Z
2017-08-04T16:41:59.408Z
2736103
2017-08-04T16:42:16.188Z
2017-08-04T17:27:52.291Z
2017-08-04T16:42:16.657Z
2534521
2017-08-04T16:45:37.770Z
2017-08-04T17:27:52.291Z
2017-08-04T16:45:37.983Z
2531108
2017-08-04T16:45:41.183Z
2017-08-04T17:27:52.291Z
2017-08-04T16:45:41.268Z
2529444
2017-08-04T16:45:42.847Z
2017-08-04T17:27:52.291Z
2017-08-04T16:45:42.847Z
2527694
2017-08-04T16:45:44.597Z
2017-08-04T17:27:52.291Z
2017-08-04T16:45:44.597Z
2503122
2017-08-04T16:46:09.169Z
2017-08-04T17:27:52.291Z
2017-08-04T16:46:09.169Z
2434070
2017-08-04T16:47:18.221Z
2017-08-04T17:27:52.291Z
2017-08-04T16:47:19.117Z
2418299
2017-08-04T16:47:33.992Z
2017-08-04T17:27:52.291Z
2017-08-04T16:47:33.992Z
2417488
2017-08-04T16:47:34.803Z
2017-08-04T17:27:52.291Z
2017-08-04T16:47:35.368Z
2414320
2017-08-04T16:47:37.971Z
2017-08-04T17:27:52.291Z
2017-08-04T16:47:38.227Z
2404501
2017-08-04T16:47:47.790Z
2017-08-04T17:27:52.291Z
2017-08-04T16:47:49.155Z
2400277
2017-08-04T16:47:52.014Z
2017-08-04T17:27:52.291Z
2017-08-04T16:47:56.195Z
2395199
2017-08-04T16:47:57.092Z
2017-08-04T17:27:52.291Z
2017-08-04T16:47:57.219Z
1920681
2017-08-04T16:55:51.610Z
2017-08-04T17:27:52.291Z
2017-08-04T16:55:52.122Z
1769512
2017-08-04T16:58:22.779Z
2017-08-04T17:27:52.291Z
2017-08-04T16:58:22.779Z
1735886
2017-08-04T16:58:56.405Z
2017-08-04T17:27:52.291Z
2017-08-04T16:58:56.405Z
938996
2017-08-04T17:12:13.295Z
2017-08-04T17:27:52.291Z
2017-08-04T17:12:13.295Z
730955
2017-08-04T17:15:41.336Z
2017-08-04T17:27:52.291Z
2017-08-04T17:15:41.336Z
558432
2017-08-04T17:18:33.859Z
2017-08-04T17:27:52.291Z
2017-08-04T17:18:33.859Z
452132
2017-08-04T17:20:20.159Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:20.202Z
451017
2017-08-04T17:20:21.274Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:21.578Z
449134
2017-08-04T17:20:23.157Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:23.200Z
448409
2017-08-04T17:20:23.882Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:25.930Z
445209
2017-08-04T17:20:27.082Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:29.472Z
441411
2017-08-04T17:20:30.880Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:34.170Z
437137
2017-08-04T17:20:35.154Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:35.154Z
433726
2017-08-04T17:20:38.565Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:38.651Z
429379
2017-08-04T17:20:42.912Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:43.040Z
425390
2017-08-04T17:20:46.901Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:47.072Z
423854
2017-08-04T17:20:48.437Z
2017-08-04T17:27:52.291Z
2017-08-04T17:20:48.522Z
412029
2017-08-04T17:21:00.262Z
2017-08-04T17:27:52.291Z
2017-08-04T17:21:00.646Z
404029
2017-08-04T17:21:08.262Z
2017-08-04T17:27:52.291Z
2017-08-04T17:21:08.304Z
17484
2017-08-04T17:27:34.807Z
2017-08-04T17:27:52.291Z
2017-08-04T17:27:34.807Z
12935
2017-08-04T17:27:39.356Z
2017-08-04T17:27:52.291Z
2017-08-04T17:27:39.356Z
10504
2017-08-04T17:27:41.787Z
2017-08-04T17:27:52.291Z
2017-08-04T17:27:42.043Z
6029
2017-08-04T17:27:46.262Z
2017-08-04T17:27:52.291Z
2017-08-04T17:27:46.306Z
5005
2017-08-04T17:27:47.286Z
2017-08-04T17:27:52.291Z
2017-08-04T17:27:47.675Z
1943
2017-08-04T17:27:50.348Z
2017-08-04T17:27:52.291Z
2017-08-04T17:27:50.348Z
0
2017-08-04T17:27:52.291Z
2017-08-04T17:27:52.291Z
2017-08-04T17:27:52.333Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 8
18411
2017-08-04T17:27:33.842Z
2017-08-04T17:27:52.253Z
2017-08-04T17:27:33.842Z
12877
2017-08-04T17:27:39.376Z
2017-08-04T17:27:52.253Z
2017-08-04T17:27:39.975Z
10829
2017-08-04T17:27:41.424Z
2017-08-04T17:27:52.253Z
2017-08-04T17:27:42.961Z
8652
2017-08-04T17:27:43.601Z
2017-08-04T17:27:52.253Z
2017-08-04T17:27:45.489Z
5943
2017-08-04T17:27:46.310Z
2017-08-04T17:27:52.253Z
2017-08-04T17:27:46.397Z
4784
2017-08-04T17:27:47.469Z
2017-08-04T17:27:52.253Z
2017-08-04T17:27:47.723Z
1900
2017-08-04T17:27:50.353Z
2017-08-04T17:27:52.253Z
2017-08-04T17:27:51.128Z
0
2017-08-04T17:27:52.253Z
2017-08-04T17:27:52.253Z
2017-08-04T17:27:52.517Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 9
20219
2017-08-04T17:27:33.842Z
2017-08-04T17:27:54.061Z
2017-08-04T17:27:33.842Z
14685
2017-08-04T17:27:39.376Z
2017-08-04T17:27:54.061Z
2017-08-04T17:27:39.975Z
12637
2017-08-04T17:27:41.424Z
2017-08-04T17:27:54.061Z
2017-08-04T17:27:42.961Z
10460
2017-08-04T17:27:43.601Z
2017-08-04T17:27:54.061Z
2017-08-04T17:27:45.489Z
7751
2017-08-04T17:27:46.310Z
2017-08-04T17:27:54.061Z
2017-08-04T17:27:46.397Z
6592
2017-08-04T17:27:47.469Z
2017-08-04T17:27:54.061Z
2017-08-04T17:27:47.723Z
3708
2017-08-04T17:27:50.353Z
2017-08-04T17:27:54.061Z
2017-08-04T17:27:51.128Z
1808
2017-08-04T17:27:52.253Z
2017-08-04T17:27:54.061Z
2017-08-04T17:27:52.517Z
0
2017-08-04T17:27:54.061Z
2017-08-04T17:27:54.061Z
2017-08-04T17:27:54.147Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:22:55.008Z 2017-08-04T17:27:55.008Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984ae9b3fdd10ba54f6f99f,
       participant: 'dog',
       turns: 0.5625 },
     { _id: 5984ae9b3fdd10ba54f6f99e,
       participant: 'jordan',
       turns: 0.4375 } ],
  meeting: 'no',
  transitions: 12,
  timestamp: 2017-08-04T17:27:55.017Z,
  from: 2017-08-04T17:22:55.008Z,
  to: 2017-08-04T17:27:55.008Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984ae9b3fdd10ba54f6f99f,
       participant: 'dog',
       turns: 0.5625 },
     { _id: 5984ae9b3fdd10ba54f6f99e,
       participant: 'jordan',
       turns: 0.4375 } ],
  meeting: 'no',
  transitions: 12,
  timestamp: 2017-08-04T17:27:55.017Z,
  from: 2017-08-04T17:22:55.008Z,
  to: 2017-08-04T17:27:55.008Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 49
5100064
2017-08-04T16:02:53.992Z
2017-08-04T17:27:54.056Z
2017-08-04T16:02:55.016Z
5025844
2017-08-04T16:04:08.212Z
2017-08-04T17:27:54.056Z
2017-08-04T16:04:09.113Z
5014120
2017-08-04T16:04:19.936Z
2017-08-04T17:27:54.056Z
2017-08-04T16:04:19.936Z
4992523
2017-08-04T16:04:41.533Z
2017-08-04T17:27:54.056Z
2017-08-04T16:04:41.533Z
4962819
2017-08-04T16:05:11.237Z
2017-08-04T17:27:54.056Z
2017-08-04T16:05:11.842Z
3398304
2017-08-04T16:31:15.752Z
2017-08-04T17:27:54.056Z
2017-08-04T16:31:16.861Z
3124497
2017-08-04T16:35:49.559Z
2017-08-04T17:27:54.056Z
2017-08-04T16:35:49.559Z
2765133
2017-08-04T16:41:48.923Z
2017-08-04T17:27:54.056Z
2017-08-04T16:41:48.923Z
2754648
2017-08-04T16:41:59.408Z
2017-08-04T17:27:54.056Z
2017-08-04T16:41:59.408Z
2737868
2017-08-04T16:42:16.188Z
2017-08-04T17:27:54.056Z
2017-08-04T16:42:16.657Z
2536286
2017-08-04T16:45:37.770Z
2017-08-04T17:27:54.056Z
2017-08-04T16:45:37.983Z
2532873
2017-08-04T16:45:41.183Z
2017-08-04T17:27:54.056Z
2017-08-04T16:45:41.268Z
2531209
2017-08-04T16:45:42.847Z
2017-08-04T17:27:54.056Z
2017-08-04T16:45:42.847Z
2529459
2017-08-04T16:45:44.597Z
2017-08-04T17:27:54.056Z
2017-08-04T16:45:44.597Z
2504887
2017-08-04T16:46:09.169Z
2017-08-04T17:27:54.056Z
2017-08-04T16:46:09.169Z
2435835
2017-08-04T16:47:18.221Z
2017-08-04T17:27:54.056Z
2017-08-04T16:47:19.117Z
2420064
2017-08-04T16:47:33.992Z
2017-08-04T17:27:54.056Z
2017-08-04T16:47:33.992Z
2419253
2017-08-04T16:47:34.803Z
2017-08-04T17:27:54.056Z
2017-08-04T16:47:35.368Z
2416085
2017-08-04T16:47:37.971Z
2017-08-04T17:27:54.056Z
2017-08-04T16:47:38.227Z
2406266
2017-08-04T16:47:47.790Z
2017-08-04T17:27:54.056Z
2017-08-04T16:47:49.155Z
2402042
2017-08-04T16:47:52.014Z
2017-08-04T17:27:54.056Z
2017-08-04T16:47:56.195Z
2396964
2017-08-04T16:47:57.092Z
2017-08-04T17:27:54.056Z
2017-08-04T16:47:57.219Z
1922446
2017-08-04T16:55:51.610Z
2017-08-04T17:27:54.056Z
2017-08-04T16:55:52.122Z
1771277
2017-08-04T16:58:22.779Z
2017-08-04T17:27:54.056Z
2017-08-04T16:58:22.779Z
1737651
2017-08-04T16:58:56.405Z
2017-08-04T17:27:54.056Z
2017-08-04T16:58:56.405Z
940761
2017-08-04T17:12:13.295Z
2017-08-04T17:27:54.056Z
2017-08-04T17:12:13.295Z
732720
2017-08-04T17:15:41.336Z
2017-08-04T17:27:54.056Z
2017-08-04T17:15:41.336Z
560197
2017-08-04T17:18:33.859Z
2017-08-04T17:27:54.056Z
2017-08-04T17:18:33.859Z
453897
2017-08-04T17:20:20.159Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:20.202Z
452782
2017-08-04T17:20:21.274Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:21.578Z
450899
2017-08-04T17:20:23.157Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:23.200Z
450174
2017-08-04T17:20:23.882Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:25.930Z
446974
2017-08-04T17:20:27.082Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:29.472Z
443176
2017-08-04T17:20:30.880Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:34.170Z
438902
2017-08-04T17:20:35.154Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:35.154Z
435491
2017-08-04T17:20:38.565Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:38.651Z
431144
2017-08-04T17:20:42.912Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:43.040Z
427155
2017-08-04T17:20:46.901Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:47.072Z
425619
2017-08-04T17:20:48.437Z
2017-08-04T17:27:54.056Z
2017-08-04T17:20:48.522Z
413794
2017-08-04T17:21:00.262Z
2017-08-04T17:27:54.056Z
2017-08-04T17:21:00.646Z
405794
2017-08-04T17:21:08.262Z
2017-08-04T17:27:54.056Z
2017-08-04T17:21:08.304Z
19249
2017-08-04T17:27:34.807Z
2017-08-04T17:27:54.056Z
2017-08-04T17:27:34.807Z
14700
2017-08-04T17:27:39.356Z
2017-08-04T17:27:54.056Z
2017-08-04T17:27:39.356Z
12269
2017-08-04T17:27:41.787Z
2017-08-04T17:27:54.056Z
2017-08-04T17:27:42.043Z
7794
2017-08-04T17:27:46.262Z
2017-08-04T17:27:54.056Z
2017-08-04T17:27:46.306Z
6770
2017-08-04T17:27:47.286Z
2017-08-04T17:27:54.056Z
2017-08-04T17:27:47.675Z
3708
2017-08-04T17:27:50.348Z
2017-08-04T17:27:54.056Z
2017-08-04T17:27:50.348Z
1765
2017-08-04T17:27:52.291Z
2017-08-04T17:27:54.056Z
2017-08-04T17:27:52.333Z
0
2017-08-04T17:27:54.056Z
2017-08-04T17:27:54.056Z
2017-08-04T17:27:55.438Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 10
22236
2017-08-04T17:27:33.842Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:33.842Z
16702
2017-08-04T17:27:39.376Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:39.975Z
14654
2017-08-04T17:27:41.424Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:42.961Z
12477
2017-08-04T17:27:43.601Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:45.489Z
9768
2017-08-04T17:27:46.310Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:46.397Z
8609
2017-08-04T17:27:47.469Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:47.723Z
5725
2017-08-04T17:27:50.353Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:51.128Z
3825
2017-08-04T17:27:52.253Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:52.517Z
2017
2017-08-04T17:27:54.061Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:54.147Z
0
2017-08-04T17:27:56.078Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:56.078Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 50
5102086
2017-08-04T16:02:53.992Z
2017-08-04T17:27:56.078Z
2017-08-04T16:02:55.016Z
5027866
2017-08-04T16:04:08.212Z
2017-08-04T17:27:56.078Z
2017-08-04T16:04:09.113Z
5016142
2017-08-04T16:04:19.936Z
2017-08-04T17:27:56.078Z
2017-08-04T16:04:19.936Z
4994545
2017-08-04T16:04:41.533Z
2017-08-04T17:27:56.078Z
2017-08-04T16:04:41.533Z
4964841
2017-08-04T16:05:11.237Z
2017-08-04T17:27:56.078Z
2017-08-04T16:05:11.842Z
3400326
2017-08-04T16:31:15.752Z
2017-08-04T17:27:56.078Z
2017-08-04T16:31:16.861Z
3126519
2017-08-04T16:35:49.559Z
2017-08-04T17:27:56.078Z
2017-08-04T16:35:49.559Z
2767155
2017-08-04T16:41:48.923Z
2017-08-04T17:27:56.078Z
2017-08-04T16:41:48.923Z
2756670
2017-08-04T16:41:59.408Z
2017-08-04T17:27:56.078Z
2017-08-04T16:41:59.408Z
2739890
2017-08-04T16:42:16.188Z
2017-08-04T17:27:56.078Z
2017-08-04T16:42:16.657Z
2538308
2017-08-04T16:45:37.770Z
2017-08-04T17:27:56.078Z
2017-08-04T16:45:37.983Z
2534895
2017-08-04T16:45:41.183Z
2017-08-04T17:27:56.078Z
2017-08-04T16:45:41.268Z
2533231
2017-08-04T16:45:42.847Z
2017-08-04T17:27:56.078Z
2017-08-04T16:45:42.847Z
2531481
2017-08-04T16:45:44.597Z
2017-08-04T17:27:56.078Z
2017-08-04T16:45:44.597Z
2506909
2017-08-04T16:46:09.169Z
2017-08-04T17:27:56.078Z
2017-08-04T16:46:09.169Z
2437857
2017-08-04T16:47:18.221Z
2017-08-04T17:27:56.078Z
2017-08-04T16:47:19.117Z
2422086
2017-08-04T16:47:33.992Z
2017-08-04T17:27:56.078Z
2017-08-04T16:47:33.992Z
2421275
2017-08-04T16:47:34.803Z
2017-08-04T17:27:56.078Z
2017-08-04T16:47:35.368Z
2418107
2017-08-04T16:47:37.971Z
2017-08-04T17:27:56.078Z
2017-08-04T16:47:38.227Z
2408288
2017-08-04T16:47:47.790Z
2017-08-04T17:27:56.078Z
2017-08-04T16:47:49.155Z
2404064
2017-08-04T16:47:52.014Z
2017-08-04T17:27:56.078Z
2017-08-04T16:47:56.195Z
2398986
2017-08-04T16:47:57.092Z
2017-08-04T17:27:56.078Z
2017-08-04T16:47:57.219Z
1924468
2017-08-04T16:55:51.610Z
2017-08-04T17:27:56.078Z
2017-08-04T16:55:52.122Z
1773299
2017-08-04T16:58:22.779Z
2017-08-04T17:27:56.078Z
2017-08-04T16:58:22.779Z
1739673
2017-08-04T16:58:56.405Z
2017-08-04T17:27:56.078Z
2017-08-04T16:58:56.405Z
942783
2017-08-04T17:12:13.295Z
2017-08-04T17:27:56.078Z
2017-08-04T17:12:13.295Z
734742
2017-08-04T17:15:41.336Z
2017-08-04T17:27:56.078Z
2017-08-04T17:15:41.336Z
562219
2017-08-04T17:18:33.859Z
2017-08-04T17:27:56.078Z
2017-08-04T17:18:33.859Z
455919
2017-08-04T17:20:20.159Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:20.202Z
454804
2017-08-04T17:20:21.274Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:21.578Z
452921
2017-08-04T17:20:23.157Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:23.200Z
452196
2017-08-04T17:20:23.882Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:25.930Z
448996
2017-08-04T17:20:27.082Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:29.472Z
445198
2017-08-04T17:20:30.880Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:34.170Z
440924
2017-08-04T17:20:35.154Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:35.154Z
437513
2017-08-04T17:20:38.565Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:38.651Z
433166
2017-08-04T17:20:42.912Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:43.040Z
429177
2017-08-04T17:20:46.901Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:47.072Z
427641
2017-08-04T17:20:48.437Z
2017-08-04T17:27:56.078Z
2017-08-04T17:20:48.522Z
415816
2017-08-04T17:21:00.262Z
2017-08-04T17:27:56.078Z
2017-08-04T17:21:00.646Z
407816
2017-08-04T17:21:08.262Z
2017-08-04T17:27:56.078Z
2017-08-04T17:21:08.304Z
21271
2017-08-04T17:27:34.807Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:34.807Z
16722
2017-08-04T17:27:39.356Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:39.356Z
14291
2017-08-04T17:27:41.787Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:42.043Z
9816
2017-08-04T17:27:46.262Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:46.306Z
8792
2017-08-04T17:27:47.286Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:47.675Z
5730
2017-08-04T17:27:50.348Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:50.348Z
3787
2017-08-04T17:27:52.291Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:52.333Z
2022
2017-08-04T17:27:54.056Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:55.438Z
0
2017-08-04T17:27:56.078Z
2017-08-04T17:27:56.078Z
2017-08-04T17:27:56.120Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 51
5102768
2017-08-04T16:02:53.992Z
2017-08-04T17:27:56.760Z
2017-08-04T16:02:55.016Z
5028548
2017-08-04T16:04:08.212Z
2017-08-04T17:27:56.760Z
2017-08-04T16:04:09.113Z
5016824
2017-08-04T16:04:19.936Z
2017-08-04T17:27:56.760Z
2017-08-04T16:04:19.936Z
4995227
2017-08-04T16:04:41.533Z
2017-08-04T17:27:56.760Z
2017-08-04T16:04:41.533Z
4965523
2017-08-04T16:05:11.237Z
2017-08-04T17:27:56.760Z
2017-08-04T16:05:11.842Z
3401008
2017-08-04T16:31:15.752Z
2017-08-04T17:27:56.760Z
2017-08-04T16:31:16.861Z
3127201
2017-08-04T16:35:49.559Z
2017-08-04T17:27:56.760Z
2017-08-04T16:35:49.559Z
2767837
2017-08-04T16:41:48.923Z
2017-08-04T17:27:56.760Z
2017-08-04T16:41:48.923Z
2757352
2017-08-04T16:41:59.408Z
2017-08-04T17:27:56.760Z
2017-08-04T16:41:59.408Z
2740572
2017-08-04T16:42:16.188Z
2017-08-04T17:27:56.760Z
2017-08-04T16:42:16.657Z
2538990
2017-08-04T16:45:37.770Z
2017-08-04T17:27:56.760Z
2017-08-04T16:45:37.983Z
2535577
2017-08-04T16:45:41.183Z
2017-08-04T17:27:56.760Z
2017-08-04T16:45:41.268Z
2533913
2017-08-04T16:45:42.847Z
2017-08-04T17:27:56.760Z
2017-08-04T16:45:42.847Z
2532163
2017-08-04T16:45:44.597Z
2017-08-04T17:27:56.760Z
2017-08-04T16:45:44.597Z
2507591
2017-08-04T16:46:09.169Z
2017-08-04T17:27:56.760Z
2017-08-04T16:46:09.169Z
2438539
2017-08-04T16:47:18.221Z
2017-08-04T17:27:56.760Z
2017-08-04T16:47:19.117Z
2422768
2017-08-04T16:47:33.992Z
2017-08-04T17:27:56.760Z
2017-08-04T16:47:33.992Z
2421957
2017-08-04T16:47:34.803Z
2017-08-04T17:27:56.760Z
2017-08-04T16:47:35.368Z
2418789
2017-08-04T16:47:37.971Z
2017-08-04T17:27:56.760Z
2017-08-04T16:47:38.227Z
2408970
2017-08-04T16:47:47.790Z
2017-08-04T17:27:56.760Z
2017-08-04T16:47:49.155Z
2404746
2017-08-04T16:47:52.014Z
2017-08-04T17:27:56.760Z
2017-08-04T16:47:56.195Z
2399668
2017-08-04T16:47:57.092Z
2017-08-04T17:27:56.760Z
2017-08-04T16:47:57.219Z
1925150
2017-08-04T16:55:51.610Z
2017-08-04T17:27:56.760Z
2017-08-04T16:55:52.122Z
1773981
2017-08-04T16:58:22.779Z
2017-08-04T17:27:56.760Z
2017-08-04T16:58:22.779Z
1740355
2017-08-04T16:58:56.405Z
2017-08-04T17:27:56.760Z
2017-08-04T16:58:56.405Z
943465
2017-08-04T17:12:13.295Z
2017-08-04T17:27:56.760Z
2017-08-04T17:12:13.295Z
735424
2017-08-04T17:15:41.336Z
2017-08-04T17:27:56.760Z
2017-08-04T17:15:41.336Z
562901
2017-08-04T17:18:33.859Z
2017-08-04T17:27:56.760Z
2017-08-04T17:18:33.859Z
456601
2017-08-04T17:20:20.159Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:20.202Z
455486
2017-08-04T17:20:21.274Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:21.578Z
453603
2017-08-04T17:20:23.157Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:23.200Z
452878
2017-08-04T17:20:23.882Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:25.930Z
449678
2017-08-04T17:20:27.082Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:29.472Z
445880
2017-08-04T17:20:30.880Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:34.170Z
441606
2017-08-04T17:20:35.154Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:35.154Z
438195
2017-08-04T17:20:38.565Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:38.651Z
433848
2017-08-04T17:20:42.912Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:43.040Z
429859
2017-08-04T17:20:46.901Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:47.072Z
428323
2017-08-04T17:20:48.437Z
2017-08-04T17:27:56.760Z
2017-08-04T17:20:48.522Z
416498
2017-08-04T17:21:00.262Z
2017-08-04T17:27:56.760Z
2017-08-04T17:21:00.646Z
408498
2017-08-04T17:21:08.262Z
2017-08-04T17:27:56.760Z
2017-08-04T17:21:08.304Z
21953
2017-08-04T17:27:34.807Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:34.807Z
17404
2017-08-04T17:27:39.356Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:39.356Z
14973
2017-08-04T17:27:41.787Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:42.043Z
10498
2017-08-04T17:27:46.262Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:46.306Z
9474
2017-08-04T17:27:47.286Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:47.675Z
6412
2017-08-04T17:27:50.348Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:50.348Z
4469
2017-08-04T17:27:52.291Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:52.333Z
2704
2017-08-04T17:27:54.056Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:55.438Z
682
2017-08-04T17:27:56.078Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:56.120Z
0
2017-08-04T17:27:56.760Z
2017-08-04T17:27:56.760Z
2017-08-04T17:27:56.760Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:23:00.015Z 2017-08-04T17:28:00.015Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aea03fdd10ba54f6f9a5, participant: 'dog', turns: 0.5 },
     { _id: 5984aea03fdd10ba54f6f9a4,
       participant: 'jordan',
       turns: 0.5 } ],
  meeting: 'no',
  transitions: 15,
  timestamp: 2017-08-04T17:28:00.021Z,
  from: 2017-08-04T17:23:00.015Z,
  to: 2017-08-04T17:28:00.015Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aea03fdd10ba54f6f9a5, participant: 'dog', turns: 0.5 },
     { _id: 5984aea03fdd10ba54f6f9a4,
       participant: 'jordan',
       turns: 0.5 } ],
  meeting: 'no',
  transitions: 15,
  timestamp: 2017-08-04T17:28:00.021Z,
  from: 2017-08-04T17:23:00.015Z,
  to: 2017-08-04T17:28:00.015Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 11
25377
2017-08-04T17:27:33.842Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:33.842Z
19843
2017-08-04T17:27:39.376Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:39.975Z
17795
2017-08-04T17:27:41.424Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:42.961Z
15618
2017-08-04T17:27:43.601Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:45.489Z
12909
2017-08-04T17:27:46.310Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:46.397Z
11750
2017-08-04T17:27:47.469Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:47.723Z
8866
2017-08-04T17:27:50.353Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:51.128Z
6966
2017-08-04T17:27:52.253Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:52.517Z
5158
2017-08-04T17:27:54.061Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:54.147Z
3141
2017-08-04T17:27:56.078Z
2017-08-04T17:27:59.219Z
2017-08-04T17:27:56.078Z
0
2017-08-04T17:27:59.219Z
2017-08-04T17:27:59.219Z
2017-08-04T17:28:00.008Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 52
5103755
2017-08-04T16:02:53.992Z
2017-08-04T17:27:57.747Z
2017-08-04T16:02:55.016Z
5029535
2017-08-04T16:04:08.212Z
2017-08-04T17:27:57.747Z
2017-08-04T16:04:09.113Z
5017811
2017-08-04T16:04:19.936Z
2017-08-04T17:27:57.747Z
2017-08-04T16:04:19.936Z
4996214
2017-08-04T16:04:41.533Z
2017-08-04T17:27:57.747Z
2017-08-04T16:04:41.533Z
4966510
2017-08-04T16:05:11.237Z
2017-08-04T17:27:57.747Z
2017-08-04T16:05:11.842Z
3401995
2017-08-04T16:31:15.752Z
2017-08-04T17:27:57.747Z
2017-08-04T16:31:16.861Z
3128188
2017-08-04T16:35:49.559Z
2017-08-04T17:27:57.747Z
2017-08-04T16:35:49.559Z
2768824
2017-08-04T16:41:48.923Z
2017-08-04T17:27:57.747Z
2017-08-04T16:41:48.923Z
2758339
2017-08-04T16:41:59.408Z
2017-08-04T17:27:57.747Z
2017-08-04T16:41:59.408Z
2741559
2017-08-04T16:42:16.188Z
2017-08-04T17:27:57.747Z
2017-08-04T16:42:16.657Z
2539977
2017-08-04T16:45:37.770Z
2017-08-04T17:27:57.747Z
2017-08-04T16:45:37.983Z
2536564
2017-08-04T16:45:41.183Z
2017-08-04T17:27:57.747Z
2017-08-04T16:45:41.268Z
2534900
2017-08-04T16:45:42.847Z
2017-08-04T17:27:57.747Z
2017-08-04T16:45:42.847Z
2533150
2017-08-04T16:45:44.597Z
2017-08-04T17:27:57.747Z
2017-08-04T16:45:44.597Z
2508578
2017-08-04T16:46:09.169Z
2017-08-04T17:27:57.747Z
2017-08-04T16:46:09.169Z
2439526
2017-08-04T16:47:18.221Z
2017-08-04T17:27:57.747Z
2017-08-04T16:47:19.117Z
2423755
2017-08-04T16:47:33.992Z
2017-08-04T17:27:57.747Z
2017-08-04T16:47:33.992Z
2422944
2017-08-04T16:47:34.803Z
2017-08-04T17:27:57.747Z
2017-08-04T16:47:35.368Z
2419776
2017-08-04T16:47:37.971Z
2017-08-04T17:27:57.747Z
2017-08-04T16:47:38.227Z
2409957
2017-08-04T16:47:47.790Z
2017-08-04T17:27:57.747Z
2017-08-04T16:47:49.155Z
2405733
2017-08-04T16:47:52.014Z
2017-08-04T17:27:57.747Z
2017-08-04T16:47:56.195Z
2400655
2017-08-04T16:47:57.092Z
2017-08-04T17:27:57.747Z
2017-08-04T16:47:57.219Z
1926137
2017-08-04T16:55:51.610Z
2017-08-04T17:27:57.747Z
2017-08-04T16:55:52.122Z
1774968
2017-08-04T16:58:22.779Z
2017-08-04T17:27:57.747Z
2017-08-04T16:58:22.779Z
1741342
2017-08-04T16:58:56.405Z
2017-08-04T17:27:57.747Z
2017-08-04T16:58:56.405Z
944452
2017-08-04T17:12:13.295Z
2017-08-04T17:27:57.747Z
2017-08-04T17:12:13.295Z
736411
2017-08-04T17:15:41.336Z
2017-08-04T17:27:57.747Z
2017-08-04T17:15:41.336Z
563888
2017-08-04T17:18:33.859Z
2017-08-04T17:27:57.747Z
2017-08-04T17:18:33.859Z
457588
2017-08-04T17:20:20.159Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:20.202Z
456473
2017-08-04T17:20:21.274Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:21.578Z
454590
2017-08-04T17:20:23.157Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:23.200Z
453865
2017-08-04T17:20:23.882Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:25.930Z
450665
2017-08-04T17:20:27.082Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:29.472Z
446867
2017-08-04T17:20:30.880Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:34.170Z
442593
2017-08-04T17:20:35.154Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:35.154Z
439182
2017-08-04T17:20:38.565Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:38.651Z
434835
2017-08-04T17:20:42.912Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:43.040Z
430846
2017-08-04T17:20:46.901Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:47.072Z
429310
2017-08-04T17:20:48.437Z
2017-08-04T17:27:57.747Z
2017-08-04T17:20:48.522Z
417485
2017-08-04T17:21:00.262Z
2017-08-04T17:27:57.747Z
2017-08-04T17:21:00.646Z
409485
2017-08-04T17:21:08.262Z
2017-08-04T17:27:57.747Z
2017-08-04T17:21:08.304Z
22940
2017-08-04T17:27:34.807Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:34.807Z
18391
2017-08-04T17:27:39.356Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:39.356Z
15960
2017-08-04T17:27:41.787Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:42.043Z
11485
2017-08-04T17:27:46.262Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:46.306Z
10461
2017-08-04T17:27:47.286Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:47.675Z
7399
2017-08-04T17:27:50.348Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:50.348Z
5456
2017-08-04T17:27:52.291Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:52.333Z
3691
2017-08-04T17:27:54.056Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:55.438Z
1669
2017-08-04T17:27:56.078Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:56.120Z
987
2017-08-04T17:27:56.760Z
2017-08-04T17:27:57.747Z
2017-08-04T17:27:56.760Z
0
2017-08-04T17:27:57.747Z
2017-08-04T17:27:57.747Z
2017-08-04T17:28:00.004Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 53
5108364
2017-08-04T16:02:53.992Z
2017-08-04T17:28:02.356Z
2017-08-04T16:02:55.016Z
5034144
2017-08-04T16:04:08.212Z
2017-08-04T17:28:02.356Z
2017-08-04T16:04:09.113Z
5022420
2017-08-04T16:04:19.936Z
2017-08-04T17:28:02.356Z
2017-08-04T16:04:19.936Z
5000823
2017-08-04T16:04:41.533Z
2017-08-04T17:28:02.356Z
2017-08-04T16:04:41.533Z
4971119
2017-08-04T16:05:11.237Z
2017-08-04T17:28:02.356Z
2017-08-04T16:05:11.842Z
3406604
2017-08-04T16:31:15.752Z
2017-08-04T17:28:02.356Z
2017-08-04T16:31:16.861Z
3132797
2017-08-04T16:35:49.559Z
2017-08-04T17:28:02.356Z
2017-08-04T16:35:49.559Z
2773433
2017-08-04T16:41:48.923Z
2017-08-04T17:28:02.356Z
2017-08-04T16:41:48.923Z
2762948
2017-08-04T16:41:59.408Z
2017-08-04T17:28:02.356Z
2017-08-04T16:41:59.408Z
2746168
2017-08-04T16:42:16.188Z
2017-08-04T17:28:02.356Z
2017-08-04T16:42:16.657Z
2544586
2017-08-04T16:45:37.770Z
2017-08-04T17:28:02.356Z
2017-08-04T16:45:37.983Z
2541173
2017-08-04T16:45:41.183Z
2017-08-04T17:28:02.356Z
2017-08-04T16:45:41.268Z
2539509
2017-08-04T16:45:42.847Z
2017-08-04T17:28:02.356Z
2017-08-04T16:45:42.847Z
2537759
2017-08-04T16:45:44.597Z
2017-08-04T17:28:02.356Z
2017-08-04T16:45:44.597Z
2513187
2017-08-04T16:46:09.169Z
2017-08-04T17:28:02.356Z
2017-08-04T16:46:09.169Z
2444135
2017-08-04T16:47:18.221Z
2017-08-04T17:28:02.356Z
2017-08-04T16:47:19.117Z
2428364
2017-08-04T16:47:33.992Z
2017-08-04T17:28:02.356Z
2017-08-04T16:47:33.992Z
2427553
2017-08-04T16:47:34.803Z
2017-08-04T17:28:02.356Z
2017-08-04T16:47:35.368Z
2424385
2017-08-04T16:47:37.971Z
2017-08-04T17:28:02.356Z
2017-08-04T16:47:38.227Z
2414566
2017-08-04T16:47:47.790Z
2017-08-04T17:28:02.356Z
2017-08-04T16:47:49.155Z
2410342
2017-08-04T16:47:52.014Z
2017-08-04T17:28:02.356Z
2017-08-04T16:47:56.195Z
2405264
2017-08-04T16:47:57.092Z
2017-08-04T17:28:02.356Z
2017-08-04T16:47:57.219Z
1930746
2017-08-04T16:55:51.610Z
2017-08-04T17:28:02.356Z
2017-08-04T16:55:52.122Z
1779577
2017-08-04T16:58:22.779Z
2017-08-04T17:28:02.356Z
2017-08-04T16:58:22.779Z
1745951
2017-08-04T16:58:56.405Z
2017-08-04T17:28:02.356Z
2017-08-04T16:58:56.405Z
949061
2017-08-04T17:12:13.295Z
2017-08-04T17:28:02.356Z
2017-08-04T17:12:13.295Z
741020
2017-08-04T17:15:41.336Z
2017-08-04T17:28:02.356Z
2017-08-04T17:15:41.336Z
568497
2017-08-04T17:18:33.859Z
2017-08-04T17:28:02.356Z
2017-08-04T17:18:33.859Z
462197
2017-08-04T17:20:20.159Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:20.202Z
461082
2017-08-04T17:20:21.274Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:21.578Z
459199
2017-08-04T17:20:23.157Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:23.200Z
458474
2017-08-04T17:20:23.882Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:25.930Z
455274
2017-08-04T17:20:27.082Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:29.472Z
451476
2017-08-04T17:20:30.880Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:34.170Z
447202
2017-08-04T17:20:35.154Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:35.154Z
443791
2017-08-04T17:20:38.565Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:38.651Z
439444
2017-08-04T17:20:42.912Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:43.040Z
435455
2017-08-04T17:20:46.901Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:47.072Z
433919
2017-08-04T17:20:48.437Z
2017-08-04T17:28:02.356Z
2017-08-04T17:20:48.522Z
422094
2017-08-04T17:21:00.262Z
2017-08-04T17:28:02.356Z
2017-08-04T17:21:00.646Z
414094
2017-08-04T17:21:08.262Z
2017-08-04T17:28:02.356Z
2017-08-04T17:21:08.304Z
27549
2017-08-04T17:27:34.807Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:34.807Z
23000
2017-08-04T17:27:39.356Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:39.356Z
20569
2017-08-04T17:27:41.787Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:42.043Z
16094
2017-08-04T17:27:46.262Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:46.306Z
15070
2017-08-04T17:27:47.286Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:47.675Z
12008
2017-08-04T17:27:50.348Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:50.348Z
10065
2017-08-04T17:27:52.291Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:52.333Z
8300
2017-08-04T17:27:54.056Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:55.438Z
6278
2017-08-04T17:27:56.078Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:56.120Z
5596
2017-08-04T17:27:56.760Z
2017-08-04T17:28:02.356Z
2017-08-04T17:27:56.760Z
4609
2017-08-04T17:27:57.747Z
2017-08-04T17:28:02.356Z
2017-08-04T17:28:00.004Z
0
2017-08-04T17:28:02.356Z
2017-08-04T17:28:02.356Z
2017-08-04T17:28:02.569Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:23:05.020Z 2017-08-04T17:28:05.020Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aea53fdd10ba54f6f9aa,
       participant: 'dog',
       turns: 0.4782608695652174 },
     { _id: 5984aea53fdd10ba54f6f9a9,
       participant: 'jordan',
       turns: 0.5217391304347826 } ],
  meeting: 'no',
  transitions: 17,
  timestamp: 2017-08-04T17:28:05.023Z,
  from: 2017-08-04T17:23:05.020Z,
  to: 2017-08-04T17:28:05.020Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aea53fdd10ba54f6f9aa,
       participant: 'dog',
       turns: 0.4782608695652174 },
     { _id: 5984aea53fdd10ba54f6f9a9,
       participant: 'jordan',
       turns: 0.5217391304347826 } ],
  meeting: 'no',
  transitions: 17,
  timestamp: 2017-08-04T17:28:05.023Z,
  from: 2017-08-04T17:23:05.020Z,
  to: 2017-08-04T17:28:05.020Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 12
30401
2017-08-04T17:27:33.842Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:33.842Z
24867
2017-08-04T17:27:39.376Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:39.975Z
22819
2017-08-04T17:27:41.424Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:42.961Z
20642
2017-08-04T17:27:43.601Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:45.489Z
17933
2017-08-04T17:27:46.310Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:46.397Z
16774
2017-08-04T17:27:47.469Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:47.723Z
13890
2017-08-04T17:27:50.353Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:51.128Z
11990
2017-08-04T17:27:52.253Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:52.517Z
10182
2017-08-04T17:27:54.061Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:54.147Z
8165
2017-08-04T17:27:56.078Z
2017-08-04T17:28:04.243Z
2017-08-04T17:27:56.078Z
5024
2017-08-04T17:27:59.219Z
2017-08-04T17:28:04.243Z
2017-08-04T17:28:00.008Z
0
2017-08-04T17:28:04.243Z
2017-08-04T17:28:04.243Z
2017-08-04T17:28:05.797Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 54
5110290
2017-08-04T16:02:53.992Z
2017-08-04T17:28:04.282Z
2017-08-04T16:02:55.016Z
5036070
2017-08-04T16:04:08.212Z
2017-08-04T17:28:04.282Z
2017-08-04T16:04:09.113Z
5024346
2017-08-04T16:04:19.936Z
2017-08-04T17:28:04.282Z
2017-08-04T16:04:19.936Z
5002749
2017-08-04T16:04:41.533Z
2017-08-04T17:28:04.282Z
2017-08-04T16:04:41.533Z
4973045
2017-08-04T16:05:11.237Z
2017-08-04T17:28:04.282Z
2017-08-04T16:05:11.842Z
3408530
2017-08-04T16:31:15.752Z
2017-08-04T17:28:04.282Z
2017-08-04T16:31:16.861Z
3134723
2017-08-04T16:35:49.559Z
2017-08-04T17:28:04.282Z
2017-08-04T16:35:49.559Z
2775359
2017-08-04T16:41:48.923Z
2017-08-04T17:28:04.282Z
2017-08-04T16:41:48.923Z
2764874
2017-08-04T16:41:59.408Z
2017-08-04T17:28:04.282Z
2017-08-04T16:41:59.408Z
2748094
2017-08-04T16:42:16.188Z
2017-08-04T17:28:04.282Z
2017-08-04T16:42:16.657Z
2546512
2017-08-04T16:45:37.770Z
2017-08-04T17:28:04.282Z
2017-08-04T16:45:37.983Z
2543099
2017-08-04T16:45:41.183Z
2017-08-04T17:28:04.282Z
2017-08-04T16:45:41.268Z
2541435
2017-08-04T16:45:42.847Z
2017-08-04T17:28:04.282Z
2017-08-04T16:45:42.847Z
2539685
2017-08-04T16:45:44.597Z
2017-08-04T17:28:04.282Z
2017-08-04T16:45:44.597Z
2515113
2017-08-04T16:46:09.169Z
2017-08-04T17:28:04.282Z
2017-08-04T16:46:09.169Z
2446061
2017-08-04T16:47:18.221Z
2017-08-04T17:28:04.282Z
2017-08-04T16:47:19.117Z
2430290
2017-08-04T16:47:33.992Z
2017-08-04T17:28:04.282Z
2017-08-04T16:47:33.992Z
2429479
2017-08-04T16:47:34.803Z
2017-08-04T17:28:04.282Z
2017-08-04T16:47:35.368Z
2426311
2017-08-04T16:47:37.971Z
2017-08-04T17:28:04.282Z
2017-08-04T16:47:38.227Z
2416492
2017-08-04T16:47:47.790Z
2017-08-04T17:28:04.282Z
2017-08-04T16:47:49.155Z
2412268
2017-08-04T16:47:52.014Z
2017-08-04T17:28:04.282Z
2017-08-04T16:47:56.195Z
2407190
2017-08-04T16:47:57.092Z
2017-08-04T17:28:04.282Z
2017-08-04T16:47:57.219Z
1932672
2017-08-04T16:55:51.610Z
2017-08-04T17:28:04.282Z
2017-08-04T16:55:52.122Z
1781503
2017-08-04T16:58:22.779Z
2017-08-04T17:28:04.282Z
2017-08-04T16:58:22.779Z
1747877
2017-08-04T16:58:56.405Z
2017-08-04T17:28:04.282Z
2017-08-04T16:58:56.405Z
950987
2017-08-04T17:12:13.295Z
2017-08-04T17:28:04.282Z
2017-08-04T17:12:13.295Z
742946
2017-08-04T17:15:41.336Z
2017-08-04T17:28:04.282Z
2017-08-04T17:15:41.336Z
570423
2017-08-04T17:18:33.859Z
2017-08-04T17:28:04.282Z
2017-08-04T17:18:33.859Z
464123
2017-08-04T17:20:20.159Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:20.202Z
463008
2017-08-04T17:20:21.274Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:21.578Z
461125
2017-08-04T17:20:23.157Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:23.200Z
460400
2017-08-04T17:20:23.882Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:25.930Z
457200
2017-08-04T17:20:27.082Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:29.472Z
453402
2017-08-04T17:20:30.880Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:34.170Z
449128
2017-08-04T17:20:35.154Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:35.154Z
445717
2017-08-04T17:20:38.565Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:38.651Z
441370
2017-08-04T17:20:42.912Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:43.040Z
437381
2017-08-04T17:20:46.901Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:47.072Z
435845
2017-08-04T17:20:48.437Z
2017-08-04T17:28:04.282Z
2017-08-04T17:20:48.522Z
424020
2017-08-04T17:21:00.262Z
2017-08-04T17:28:04.282Z
2017-08-04T17:21:00.646Z
416020
2017-08-04T17:21:08.262Z
2017-08-04T17:28:04.282Z
2017-08-04T17:21:08.304Z
29475
2017-08-04T17:27:34.807Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:34.807Z
24926
2017-08-04T17:27:39.356Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:39.356Z
22495
2017-08-04T17:27:41.787Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:42.043Z
18020
2017-08-04T17:27:46.262Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:46.306Z
16996
2017-08-04T17:27:47.286Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:47.675Z
13934
2017-08-04T17:27:50.348Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:50.348Z
11991
2017-08-04T17:27:52.291Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:52.333Z
10226
2017-08-04T17:27:54.056Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:55.438Z
8204
2017-08-04T17:27:56.078Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:56.120Z
7522
2017-08-04T17:27:56.760Z
2017-08-04T17:28:04.282Z
2017-08-04T17:27:56.760Z
6535
2017-08-04T17:27:57.747Z
2017-08-04T17:28:04.282Z
2017-08-04T17:28:00.004Z
1926
2017-08-04T17:28:02.356Z
2017-08-04T17:28:04.282Z
2017-08-04T17:28:02.569Z
0
2017-08-04T17:28:04.282Z
2017-08-04T17:28:04.282Z
2017-08-04T17:28:05.801Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 55
5112945
2017-08-04T16:02:53.992Z
2017-08-04T17:28:06.937Z
2017-08-04T16:02:55.016Z
5038725
2017-08-04T16:04:08.212Z
2017-08-04T17:28:06.937Z
2017-08-04T16:04:09.113Z
5027001
2017-08-04T16:04:19.936Z
2017-08-04T17:28:06.937Z
2017-08-04T16:04:19.936Z
5005404
2017-08-04T16:04:41.533Z
2017-08-04T17:28:06.937Z
2017-08-04T16:04:41.533Z
4975700
2017-08-04T16:05:11.237Z
2017-08-04T17:28:06.937Z
2017-08-04T16:05:11.842Z
3411185
2017-08-04T16:31:15.752Z
2017-08-04T17:28:06.937Z
2017-08-04T16:31:16.861Z
3137378
2017-08-04T16:35:49.559Z
2017-08-04T17:28:06.937Z
2017-08-04T16:35:49.559Z
2778014
2017-08-04T16:41:48.923Z
2017-08-04T17:28:06.937Z
2017-08-04T16:41:48.923Z
2767529
2017-08-04T16:41:59.408Z
2017-08-04T17:28:06.937Z
2017-08-04T16:41:59.408Z
2750749
2017-08-04T16:42:16.188Z
2017-08-04T17:28:06.937Z
2017-08-04T16:42:16.657Z
2549167
2017-08-04T16:45:37.770Z
2017-08-04T17:28:06.937Z
2017-08-04T16:45:37.983Z
2545754
2017-08-04T16:45:41.183Z
2017-08-04T17:28:06.937Z
2017-08-04T16:45:41.268Z
2544090
2017-08-04T16:45:42.847Z
2017-08-04T17:28:06.937Z
2017-08-04T16:45:42.847Z
2542340
2017-08-04T16:45:44.597Z
2017-08-04T17:28:06.937Z
2017-08-04T16:45:44.597Z
2517768
2017-08-04T16:46:09.169Z
2017-08-04T17:28:06.937Z
2017-08-04T16:46:09.169Z
2448716
2017-08-04T16:47:18.221Z
2017-08-04T17:28:06.937Z
2017-08-04T16:47:19.117Z
2432945
2017-08-04T16:47:33.992Z
2017-08-04T17:28:06.937Z
2017-08-04T16:47:33.992Z
2432134
2017-08-04T16:47:34.803Z
2017-08-04T17:28:06.937Z
2017-08-04T16:47:35.368Z
2428966
2017-08-04T16:47:37.971Z
2017-08-04T17:28:06.937Z
2017-08-04T16:47:38.227Z
2419147
2017-08-04T16:47:47.790Z
2017-08-04T17:28:06.937Z
2017-08-04T16:47:49.155Z
2414923
2017-08-04T16:47:52.014Z
2017-08-04T17:28:06.937Z
2017-08-04T16:47:56.195Z
2409845
2017-08-04T16:47:57.092Z
2017-08-04T17:28:06.937Z
2017-08-04T16:47:57.219Z
1935327
2017-08-04T16:55:51.610Z
2017-08-04T17:28:06.937Z
2017-08-04T16:55:52.122Z
1784158
2017-08-04T16:58:22.779Z
2017-08-04T17:28:06.937Z
2017-08-04T16:58:22.779Z
1750532
2017-08-04T16:58:56.405Z
2017-08-04T17:28:06.937Z
2017-08-04T16:58:56.405Z
953642
2017-08-04T17:12:13.295Z
2017-08-04T17:28:06.937Z
2017-08-04T17:12:13.295Z
745601
2017-08-04T17:15:41.336Z
2017-08-04T17:28:06.937Z
2017-08-04T17:15:41.336Z
573078
2017-08-04T17:18:33.859Z
2017-08-04T17:28:06.937Z
2017-08-04T17:18:33.859Z
466778
2017-08-04T17:20:20.159Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:20.202Z
465663
2017-08-04T17:20:21.274Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:21.578Z
463780
2017-08-04T17:20:23.157Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:23.200Z
463055
2017-08-04T17:20:23.882Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:25.930Z
459855
2017-08-04T17:20:27.082Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:29.472Z
456057
2017-08-04T17:20:30.880Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:34.170Z
451783
2017-08-04T17:20:35.154Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:35.154Z
448372
2017-08-04T17:20:38.565Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:38.651Z
444025
2017-08-04T17:20:42.912Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:43.040Z
440036
2017-08-04T17:20:46.901Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:47.072Z
438500
2017-08-04T17:20:48.437Z
2017-08-04T17:28:06.937Z
2017-08-04T17:20:48.522Z
426675
2017-08-04T17:21:00.262Z
2017-08-04T17:28:06.937Z
2017-08-04T17:21:00.646Z
418675
2017-08-04T17:21:08.262Z
2017-08-04T17:28:06.937Z
2017-08-04T17:21:08.304Z
32130
2017-08-04T17:27:34.807Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:34.807Z
27581
2017-08-04T17:27:39.356Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:39.356Z
25150
2017-08-04T17:27:41.787Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:42.043Z
20675
2017-08-04T17:27:46.262Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:46.306Z
19651
2017-08-04T17:27:47.286Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:47.675Z
16589
2017-08-04T17:27:50.348Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:50.348Z
14646
2017-08-04T17:27:52.291Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:52.333Z
12881
2017-08-04T17:27:54.056Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:55.438Z
10859
2017-08-04T17:27:56.078Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:56.120Z
10177
2017-08-04T17:27:56.760Z
2017-08-04T17:28:06.937Z
2017-08-04T17:27:56.760Z
9190
2017-08-04T17:27:57.747Z
2017-08-04T17:28:06.937Z
2017-08-04T17:28:00.004Z
4581
2017-08-04T17:28:02.356Z
2017-08-04T17:28:06.937Z
2017-08-04T17:28:02.569Z
2655
2017-08-04T17:28:04.282Z
2017-08-04T17:28:06.937Z
2017-08-04T17:28:05.801Z
0
2017-08-04T17:28:06.937Z
2017-08-04T17:28:06.937Z
2017-08-04T17:28:07.150Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 13
33127
2017-08-04T17:27:33.842Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:33.842Z
27593
2017-08-04T17:27:39.376Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:39.975Z
25545
2017-08-04T17:27:41.424Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:42.961Z
23368
2017-08-04T17:27:43.601Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:45.489Z
20659
2017-08-04T17:27:46.310Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:46.397Z
19500
2017-08-04T17:27:47.469Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:47.723Z
16616
2017-08-04T17:27:50.353Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:51.128Z
14716
2017-08-04T17:27:52.253Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:52.517Z
12908
2017-08-04T17:27:54.061Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:54.147Z
10891
2017-08-04T17:27:56.078Z
2017-08-04T17:28:06.969Z
2017-08-04T17:27:56.078Z
7750
2017-08-04T17:27:59.219Z
2017-08-04T17:28:06.969Z
2017-08-04T17:28:00.008Z
2726
2017-08-04T17:28:04.243Z
2017-08-04T17:28:06.969Z
2017-08-04T17:28:05.797Z
0
2017-08-04T17:28:06.969Z
2017-08-04T17:28:06.969Z
2017-08-04T17:28:07.358Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:23:10.024Z 2017-08-04T17:28:10.024Z
info: updated turns for meeting: no
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=dog, name=dog, participants=[participant=jordan, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:28:11.378Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY5MSwiZXhwIjoxNTg4MjY3NjkxLCJpc3MiOiJmZWF0aGVycyJ9.JOOdwa1_aMawX2CP_R2GyhWv8EAzch8rXFvCxZ36qe8
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:28:11.378Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY5MSwiZXhwIjoxNTg4MjY3NjkxLCJpc3MiOiJmZWF0aGVycyJ9.JOOdwa1_aMawX2CP_R2GyhWv8EAzch8rXFvCxZ36qe8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog' ]
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:28:11.672Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY5MSwiZXhwIjoxNTg4MjY3NjkxLCJpc3MiOiJmZWF0aGVycyJ9.JOOdwa1_aMawX2CP_R2GyhWv8EAzch8rXFvCxZ36qe8
patching meeting { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog' ]
info: not adding participant: { participants: [ 'dog', 'jordan' ],
  lastUpdated: 2017-08-04T17:28:11.721Z } no
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:28:11.672Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY5MSwiZXhwIjoxNTg4MjY3NjkxLCJpc3MiOiJmZWF0aGVycyJ9.JOOdwa1_aMawX2CP_R2GyhWv8EAzch8rXFvCxZ36qe8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
patching meeting { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
updated meeting with participants { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aeab3fdd10ba54f6f9b1,
  timestamp: 2017-08-04T17:28:11.739Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aeab3fdd10ba54f6f9b1,
  timestamp: 2017-08-04T17:28:11.739Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: not adding participant: { participants: [ 'dog', 'jordan' ],
  lastUpdated: 2017-08-04T17:28:11.734Z } no
updated meeting with participants { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aeab3fdd10ba54f6f9b2,
  timestamp: 2017-08-04T17:28:11.784Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aeab3fdd10ba54f6f9b2,
  timestamp: 2017-08-04T17:28:11.784Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 56
5117436
2017-08-04T16:02:53.992Z
2017-08-04T17:28:11.428Z
2017-08-04T16:02:55.016Z
5043216
2017-08-04T16:04:08.212Z
2017-08-04T17:28:11.428Z
2017-08-04T16:04:09.113Z
5031492
2017-08-04T16:04:19.936Z
2017-08-04T17:28:11.428Z
2017-08-04T16:04:19.936Z
5009895
2017-08-04T16:04:41.533Z
2017-08-04T17:28:11.428Z
2017-08-04T16:04:41.533Z
4980191
2017-08-04T16:05:11.237Z
2017-08-04T17:28:11.428Z
2017-08-04T16:05:11.842Z
3415676
2017-08-04T16:31:15.752Z
2017-08-04T17:28:11.428Z
2017-08-04T16:31:16.861Z
3141869
2017-08-04T16:35:49.559Z
2017-08-04T17:28:11.428Z
2017-08-04T16:35:49.559Z
2782505
2017-08-04T16:41:48.923Z
2017-08-04T17:28:11.428Z
2017-08-04T16:41:48.923Z
2772020
2017-08-04T16:41:59.408Z
2017-08-04T17:28:11.428Z
2017-08-04T16:41:59.408Z
2755240
2017-08-04T16:42:16.188Z
2017-08-04T17:28:11.428Z
2017-08-04T16:42:16.657Z
2553658
2017-08-04T16:45:37.770Z
2017-08-04T17:28:11.428Z
2017-08-04T16:45:37.983Z
2550245
2017-08-04T16:45:41.183Z
2017-08-04T17:28:11.428Z
2017-08-04T16:45:41.268Z
2548581
2017-08-04T16:45:42.847Z
2017-08-04T17:28:11.428Z
2017-08-04T16:45:42.847Z
2546831
2017-08-04T16:45:44.597Z
2017-08-04T17:28:11.428Z
2017-08-04T16:45:44.597Z
2522259
2017-08-04T16:46:09.169Z
2017-08-04T17:28:11.428Z
2017-08-04T16:46:09.169Z
2453207
2017-08-04T16:47:18.221Z
2017-08-04T17:28:11.428Z
2017-08-04T16:47:19.117Z
2437436
2017-08-04T16:47:33.992Z
2017-08-04T17:28:11.428Z
2017-08-04T16:47:33.992Z
2436625
2017-08-04T16:47:34.803Z
2017-08-04T17:28:11.428Z
2017-08-04T16:47:35.368Z
2433457
2017-08-04T16:47:37.971Z
2017-08-04T17:28:11.428Z
2017-08-04T16:47:38.227Z
2423638
2017-08-04T16:47:47.790Z
2017-08-04T17:28:11.428Z
2017-08-04T16:47:49.155Z
2419414
2017-08-04T16:47:52.014Z
2017-08-04T17:28:11.428Z
2017-08-04T16:47:56.195Z
2414336
2017-08-04T16:47:57.092Z
2017-08-04T17:28:11.428Z
2017-08-04T16:47:57.219Z
1939818
2017-08-04T16:55:51.610Z
2017-08-04T17:28:11.428Z
2017-08-04T16:55:52.122Z
1788649
2017-08-04T16:58:22.779Z
2017-08-04T17:28:11.428Z
2017-08-04T16:58:22.779Z
1755023
2017-08-04T16:58:56.405Z
2017-08-04T17:28:11.428Z
2017-08-04T16:58:56.405Z
958133
2017-08-04T17:12:13.295Z
2017-08-04T17:28:11.428Z
2017-08-04T17:12:13.295Z
750092
2017-08-04T17:15:41.336Z
2017-08-04T17:28:11.428Z
2017-08-04T17:15:41.336Z
577569
2017-08-04T17:18:33.859Z
2017-08-04T17:28:11.428Z
2017-08-04T17:18:33.859Z
471269
2017-08-04T17:20:20.159Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:20.202Z
470154
2017-08-04T17:20:21.274Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:21.578Z
468271
2017-08-04T17:20:23.157Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:23.200Z
467546
2017-08-04T17:20:23.882Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:25.930Z
464346
2017-08-04T17:20:27.082Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:29.472Z
460548
2017-08-04T17:20:30.880Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:34.170Z
456274
2017-08-04T17:20:35.154Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:35.154Z
452863
2017-08-04T17:20:38.565Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:38.651Z
448516
2017-08-04T17:20:42.912Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:43.040Z
444527
2017-08-04T17:20:46.901Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:47.072Z
442991
2017-08-04T17:20:48.437Z
2017-08-04T17:28:11.428Z
2017-08-04T17:20:48.522Z
431166
2017-08-04T17:21:00.262Z
2017-08-04T17:28:11.428Z
2017-08-04T17:21:00.646Z
423166
2017-08-04T17:21:08.262Z
2017-08-04T17:28:11.428Z
2017-08-04T17:21:08.304Z
36621
2017-08-04T17:27:34.807Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:34.807Z
32072
2017-08-04T17:27:39.356Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:39.356Z
29641
2017-08-04T17:27:41.787Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:42.043Z
25166
2017-08-04T17:27:46.262Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:46.306Z
24142
2017-08-04T17:27:47.286Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:47.675Z
21080
2017-08-04T17:27:50.348Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:50.348Z
19137
2017-08-04T17:27:52.291Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:52.333Z
17372
2017-08-04T17:27:54.056Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:55.438Z
15350
2017-08-04T17:27:56.078Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:56.120Z
14668
2017-08-04T17:27:56.760Z
2017-08-04T17:28:11.428Z
2017-08-04T17:27:56.760Z
13681
2017-08-04T17:27:57.747Z
2017-08-04T17:28:11.428Z
2017-08-04T17:28:00.004Z
9072
2017-08-04T17:28:02.356Z
2017-08-04T17:28:11.428Z
2017-08-04T17:28:02.569Z
7146
2017-08-04T17:28:04.282Z
2017-08-04T17:28:11.428Z
2017-08-04T17:28:05.801Z
4491
2017-08-04T17:28:06.937Z
2017-08-04T17:28:11.428Z
2017-08-04T17:28:07.150Z
0
2017-08-04T17:28:11.428Z
2017-08-04T17:28:11.428Z
2017-08-04T17:28:11.474Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 57
5119452
2017-08-04T16:02:53.992Z
2017-08-04T17:28:13.444Z
2017-08-04T16:02:55.016Z
5045232
2017-08-04T16:04:08.212Z
2017-08-04T17:28:13.444Z
2017-08-04T16:04:09.113Z
5033508
2017-08-04T16:04:19.936Z
2017-08-04T17:28:13.444Z
2017-08-04T16:04:19.936Z
5011911
2017-08-04T16:04:41.533Z
2017-08-04T17:28:13.444Z
2017-08-04T16:04:41.533Z
4982207
2017-08-04T16:05:11.237Z
2017-08-04T17:28:13.444Z
2017-08-04T16:05:11.842Z
3417692
2017-08-04T16:31:15.752Z
2017-08-04T17:28:13.444Z
2017-08-04T16:31:16.861Z
3143885
2017-08-04T16:35:49.559Z
2017-08-04T17:28:13.444Z
2017-08-04T16:35:49.559Z
2784521
2017-08-04T16:41:48.923Z
2017-08-04T17:28:13.444Z
2017-08-04T16:41:48.923Z
2774036
2017-08-04T16:41:59.408Z
2017-08-04T17:28:13.444Z
2017-08-04T16:41:59.408Z
2757256
2017-08-04T16:42:16.188Z
2017-08-04T17:28:13.444Z
2017-08-04T16:42:16.657Z
2555674
2017-08-04T16:45:37.770Z
2017-08-04T17:28:13.444Z
2017-08-04T16:45:37.983Z
2552261
2017-08-04T16:45:41.183Z
2017-08-04T17:28:13.444Z
2017-08-04T16:45:41.268Z
2550597
2017-08-04T16:45:42.847Z
2017-08-04T17:28:13.444Z
2017-08-04T16:45:42.847Z
2548847
2017-08-04T16:45:44.597Z
2017-08-04T17:28:13.444Z
2017-08-04T16:45:44.597Z
2524275
2017-08-04T16:46:09.169Z
2017-08-04T17:28:13.444Z
2017-08-04T16:46:09.169Z
2455223
2017-08-04T16:47:18.221Z
2017-08-04T17:28:13.444Z
2017-08-04T16:47:19.117Z
2439452
2017-08-04T16:47:33.992Z
2017-08-04T17:28:13.444Z
2017-08-04T16:47:33.992Z
2438641
2017-08-04T16:47:34.803Z
2017-08-04T17:28:13.444Z
2017-08-04T16:47:35.368Z
2435473
2017-08-04T16:47:37.971Z
2017-08-04T17:28:13.444Z
2017-08-04T16:47:38.227Z
2425654
2017-08-04T16:47:47.790Z
2017-08-04T17:28:13.444Z
2017-08-04T16:47:49.155Z
2421430
2017-08-04T16:47:52.014Z
2017-08-04T17:28:13.444Z
2017-08-04T16:47:56.195Z
2416352
2017-08-04T16:47:57.092Z
2017-08-04T17:28:13.444Z
2017-08-04T16:47:57.219Z
1941834
2017-08-04T16:55:51.610Z
2017-08-04T17:28:13.444Z
2017-08-04T16:55:52.122Z
1790665
2017-08-04T16:58:22.779Z
2017-08-04T17:28:13.444Z
2017-08-04T16:58:22.779Z
1757039
2017-08-04T16:58:56.405Z
2017-08-04T17:28:13.444Z
2017-08-04T16:58:56.405Z
960149
2017-08-04T17:12:13.295Z
2017-08-04T17:28:13.444Z
2017-08-04T17:12:13.295Z
752108
2017-08-04T17:15:41.336Z
2017-08-04T17:28:13.444Z
2017-08-04T17:15:41.336Z
579585
2017-08-04T17:18:33.859Z
2017-08-04T17:28:13.444Z
2017-08-04T17:18:33.859Z
473285
2017-08-04T17:20:20.159Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:20.202Z
472170
2017-08-04T17:20:21.274Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:21.578Z
470287
2017-08-04T17:20:23.157Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:23.200Z
469562
2017-08-04T17:20:23.882Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:25.930Z
466362
2017-08-04T17:20:27.082Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:29.472Z
462564
2017-08-04T17:20:30.880Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:34.170Z
458290
2017-08-04T17:20:35.154Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:35.154Z
454879
2017-08-04T17:20:38.565Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:38.651Z
450532
2017-08-04T17:20:42.912Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:43.040Z
446543
2017-08-04T17:20:46.901Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:47.072Z
445007
2017-08-04T17:20:48.437Z
2017-08-04T17:28:13.444Z
2017-08-04T17:20:48.522Z
433182
2017-08-04T17:21:00.262Z
2017-08-04T17:28:13.444Z
2017-08-04T17:21:00.646Z
425182
2017-08-04T17:21:08.262Z
2017-08-04T17:28:13.444Z
2017-08-04T17:21:08.304Z
38637
2017-08-04T17:27:34.807Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:34.807Z
34088
2017-08-04T17:27:39.356Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:39.356Z
31657
2017-08-04T17:27:41.787Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:42.043Z
27182
2017-08-04T17:27:46.262Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:46.306Z
26158
2017-08-04T17:27:47.286Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:47.675Z
23096
2017-08-04T17:27:50.348Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:50.348Z
21153
2017-08-04T17:27:52.291Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:52.333Z
19388
2017-08-04T17:27:54.056Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:55.438Z
17366
2017-08-04T17:27:56.078Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:56.120Z
16684
2017-08-04T17:27:56.760Z
2017-08-04T17:28:13.444Z
2017-08-04T17:27:56.760Z
15697
2017-08-04T17:27:57.747Z
2017-08-04T17:28:13.444Z
2017-08-04T17:28:00.004Z
11088
2017-08-04T17:28:02.356Z
2017-08-04T17:28:13.444Z
2017-08-04T17:28:02.569Z
9162
2017-08-04T17:28:04.282Z
2017-08-04T17:28:13.444Z
2017-08-04T17:28:05.801Z
6507
2017-08-04T17:28:06.937Z
2017-08-04T17:28:13.444Z
2017-08-04T17:28:07.150Z
2016
2017-08-04T17:28:11.428Z
2017-08-04T17:28:13.444Z
2017-08-04T17:28:11.474Z
0
2017-08-04T17:28:13.444Z
2017-08-04T17:28:13.444Z
2017-08-04T17:28:13.444Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 14
39490
2017-08-04T17:27:33.842Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:33.842Z
33956
2017-08-04T17:27:39.376Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:39.975Z
31908
2017-08-04T17:27:41.424Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:42.961Z
29731
2017-08-04T17:27:43.601Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:45.489Z
27022
2017-08-04T17:27:46.310Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:46.397Z
25863
2017-08-04T17:27:47.469Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:47.723Z
22979
2017-08-04T17:27:50.353Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:51.128Z
21079
2017-08-04T17:27:52.253Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:52.517Z
19271
2017-08-04T17:27:54.061Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:54.147Z
17254
2017-08-04T17:27:56.078Z
2017-08-04T17:28:13.332Z
2017-08-04T17:27:56.078Z
14113
2017-08-04T17:27:59.219Z
2017-08-04T17:28:13.332Z
2017-08-04T17:28:00.008Z
9089
2017-08-04T17:28:04.243Z
2017-08-04T17:28:13.332Z
2017-08-04T17:28:05.797Z
6363
2017-08-04T17:28:06.969Z
2017-08-04T17:28:13.332Z
2017-08-04T17:28:07.358Z
0
2017-08-04T17:28:13.332Z
2017-08-04T17:28:13.332Z
2017-08-04T17:28:13.673Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:23:15.029Z 2017-08-04T17:28:15.029Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aeaf3fdd10ba54f6f9b7,
       participant: 'dog',
       turns: 0.4666666666666667 },
     { _id: 5984aeaf3fdd10ba54f6f9b6,
       participant: 'jordan',
       turns: 0.5333333333333333 } ],
  meeting: 'no',
  transitions: 22,
  timestamp: 2017-08-04T17:28:15.040Z,
  from: 2017-08-04T17:23:15.029Z,
  to: 2017-08-04T17:28:15.029Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aeaf3fdd10ba54f6f9b7,
       participant: 'dog',
       turns: 0.4666666666666667 },
     { _id: 5984aeaf3fdd10ba54f6f9b6,
       participant: 'jordan',
       turns: 0.5333333333333333 } ],
  meeting: 'no',
  transitions: 22,
  timestamp: 2017-08-04T17:28:15.040Z,
  from: 2017-08-04T17:23:15.029Z,
  to: 2017-08-04T17:28:15.029Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=dog, name=dog, participants=[participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:28:18.674Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY5OCwiZXhwIjoxNTg4MjY3Njk4LCJpc3MiOiJmZWF0aGVycyJ9.xVS0Htfve0i-MBG3dk0hTSGRLdiOMiHnivi5dEZlekA
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:28:18.674Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY5OCwiZXhwIjoxNTg4MjY3Njk4LCJpc3MiOiJmZWF0aGVycyJ9.xVS0Htfve0i-MBG3dk0hTSGRLdiOMiHnivi5dEZlekA' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog' ]
patching meeting { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog' ]
info: not adding participant: { participants: [ 'dog', 'jordan' ],
  lastUpdated: 2017-08-04T17:28:18.705Z } no
updated meeting with participants { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: created participantEvent!
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aeb23fdd10ba54f6f9b8,
  timestamp: 2017-08-04T17:28:18.712Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aeb23fdd10ba54f6f9b8,
  timestamp: 2017-08-04T17:28:18.712Z,
  meeting: 'no',
  __v: 0 } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:28:19.490Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY5OSwiZXhwIjoxNTg4MjY3Njk5LCJpc3MiOiJmZWF0aGVycyJ9.7rPFXJrjXyq9CX4hnpWfcp1T_serBWtRjweZP6aA80k
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:28:19.490Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzY5OSwiZXhwIjoxNTg4MjY3Njk5LCJpc3MiOiJmZWF0aGVycyJ9.7rPFXJrjXyq9CX4hnpWfcp1T_serBWtRjweZP6aA80k' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
patching meeting { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
info: not adding participant: { participants: [ 'dog', 'jordan' ],
  lastUpdated: 2017-08-04T17:28:19.672Z } no
updated meeting with participants { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aeb33fdd10ba54f6f9b9,
  timestamp: 2017-08-04T17:28:19.693Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aeb33fdd10ba54f6f9b9,
  timestamp: 2017-08-04T17:28:19.693Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:23:20.040Z 2017-08-04T17:28:20.040Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aeb43fdd10ba54f6f9bb,
       participant: 'dog',
       turns: 0.4666666666666667 },
     { _id: 5984aeb43fdd10ba54f6f9ba,
       participant: 'jordan',
       turns: 0.5333333333333333 } ],
  meeting: 'no',
  transitions: 22,
  timestamp: 2017-08-04T17:28:20.045Z,
  from: 2017-08-04T17:23:20.040Z,
  to: 2017-08-04T17:28:20.040Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aeb43fdd10ba54f6f9bb,
       participant: 'dog',
       turns: 0.4666666666666667 },
     { _id: 5984aeb43fdd10ba54f6f9ba,
       participant: 'jordan',
       turns: 0.5333333333333333 } ],
  meeting: 'no',
  transitions: 22,
  timestamp: 2017-08-04T17:28:20.045Z,
  from: 2017-08-04T17:23:20.040Z,
  to: 2017-08-04T17:28:20.040Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 58
5126345
2017-08-04T16:02:53.992Z
2017-08-04T17:28:20.337Z
2017-08-04T16:02:55.016Z
5052125
2017-08-04T16:04:08.212Z
2017-08-04T17:28:20.337Z
2017-08-04T16:04:09.113Z
5040401
2017-08-04T16:04:19.936Z
2017-08-04T17:28:20.337Z
2017-08-04T16:04:19.936Z
5018804
2017-08-04T16:04:41.533Z
2017-08-04T17:28:20.337Z
2017-08-04T16:04:41.533Z
4989100
2017-08-04T16:05:11.237Z
2017-08-04T17:28:20.337Z
2017-08-04T16:05:11.842Z
3424585
2017-08-04T16:31:15.752Z
2017-08-04T17:28:20.337Z
2017-08-04T16:31:16.861Z
3150778
2017-08-04T16:35:49.559Z
2017-08-04T17:28:20.337Z
2017-08-04T16:35:49.559Z
2791414
2017-08-04T16:41:48.923Z
2017-08-04T17:28:20.337Z
2017-08-04T16:41:48.923Z
2780929
2017-08-04T16:41:59.408Z
2017-08-04T17:28:20.337Z
2017-08-04T16:41:59.408Z
2764149
2017-08-04T16:42:16.188Z
2017-08-04T17:28:20.337Z
2017-08-04T16:42:16.657Z
2562567
2017-08-04T16:45:37.770Z
2017-08-04T17:28:20.337Z
2017-08-04T16:45:37.983Z
2559154
2017-08-04T16:45:41.183Z
2017-08-04T17:28:20.337Z
2017-08-04T16:45:41.268Z
2557490
2017-08-04T16:45:42.847Z
2017-08-04T17:28:20.337Z
2017-08-04T16:45:42.847Z
2555740
2017-08-04T16:45:44.597Z
2017-08-04T17:28:20.337Z
2017-08-04T16:45:44.597Z
2531168
2017-08-04T16:46:09.169Z
2017-08-04T17:28:20.337Z
2017-08-04T16:46:09.169Z
2462116
2017-08-04T16:47:18.221Z
2017-08-04T17:28:20.337Z
2017-08-04T16:47:19.117Z
2446345
2017-08-04T16:47:33.992Z
2017-08-04T17:28:20.337Z
2017-08-04T16:47:33.992Z
2445534
2017-08-04T16:47:34.803Z
2017-08-04T17:28:20.337Z
2017-08-04T16:47:35.368Z
2442366
2017-08-04T16:47:37.971Z
2017-08-04T17:28:20.337Z
2017-08-04T16:47:38.227Z
2432547
2017-08-04T16:47:47.790Z
2017-08-04T17:28:20.337Z
2017-08-04T16:47:49.155Z
2428323
2017-08-04T16:47:52.014Z
2017-08-04T17:28:20.337Z
2017-08-04T16:47:56.195Z
2423245
2017-08-04T16:47:57.092Z
2017-08-04T17:28:20.337Z
2017-08-04T16:47:57.219Z
1948727
2017-08-04T16:55:51.610Z
2017-08-04T17:28:20.337Z
2017-08-04T16:55:52.122Z
1797558
2017-08-04T16:58:22.779Z
2017-08-04T17:28:20.337Z
2017-08-04T16:58:22.779Z
1763932
2017-08-04T16:58:56.405Z
2017-08-04T17:28:20.337Z
2017-08-04T16:58:56.405Z
967042
2017-08-04T17:12:13.295Z
2017-08-04T17:28:20.337Z
2017-08-04T17:12:13.295Z
759001
2017-08-04T17:15:41.336Z
2017-08-04T17:28:20.337Z
2017-08-04T17:15:41.336Z
586478
2017-08-04T17:18:33.859Z
2017-08-04T17:28:20.337Z
2017-08-04T17:18:33.859Z
480178
2017-08-04T17:20:20.159Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:20.202Z
479063
2017-08-04T17:20:21.274Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:21.578Z
477180
2017-08-04T17:20:23.157Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:23.200Z
476455
2017-08-04T17:20:23.882Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:25.930Z
473255
2017-08-04T17:20:27.082Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:29.472Z
469457
2017-08-04T17:20:30.880Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:34.170Z
465183
2017-08-04T17:20:35.154Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:35.154Z
461772
2017-08-04T17:20:38.565Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:38.651Z
457425
2017-08-04T17:20:42.912Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:43.040Z
453436
2017-08-04T17:20:46.901Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:47.072Z
451900
2017-08-04T17:20:48.437Z
2017-08-04T17:28:20.337Z
2017-08-04T17:20:48.522Z
440075
2017-08-04T17:21:00.262Z
2017-08-04T17:28:20.337Z
2017-08-04T17:21:00.646Z
432075
2017-08-04T17:21:08.262Z
2017-08-04T17:28:20.337Z
2017-08-04T17:21:08.304Z
45530
2017-08-04T17:27:34.807Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:34.807Z
40981
2017-08-04T17:27:39.356Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:39.356Z
38550
2017-08-04T17:27:41.787Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:42.043Z
34075
2017-08-04T17:27:46.262Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:46.306Z
33051
2017-08-04T17:27:47.286Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:47.675Z
29989
2017-08-04T17:27:50.348Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:50.348Z
28046
2017-08-04T17:27:52.291Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:52.333Z
26281
2017-08-04T17:27:54.056Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:55.438Z
24259
2017-08-04T17:27:56.078Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:56.120Z
23577
2017-08-04T17:27:56.760Z
2017-08-04T17:28:20.337Z
2017-08-04T17:27:56.760Z
22590
2017-08-04T17:27:57.747Z
2017-08-04T17:28:20.337Z
2017-08-04T17:28:00.004Z
17981
2017-08-04T17:28:02.356Z
2017-08-04T17:28:20.337Z
2017-08-04T17:28:02.569Z
16055
2017-08-04T17:28:04.282Z
2017-08-04T17:28:20.337Z
2017-08-04T17:28:05.801Z
13400
2017-08-04T17:28:06.937Z
2017-08-04T17:28:20.337Z
2017-08-04T17:28:07.150Z
8909
2017-08-04T17:28:11.428Z
2017-08-04T17:28:20.337Z
2017-08-04T17:28:11.474Z
6893
2017-08-04T17:28:13.444Z
2017-08-04T17:28:20.337Z
2017-08-04T17:28:13.444Z
0
2017-08-04T17:28:20.337Z
2017-08-04T17:28:20.337Z
2017-08-04T17:28:20.337Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 59
5127048
2017-08-04T16:02:53.992Z
2017-08-04T17:28:21.040Z
2017-08-04T16:02:55.016Z
5052828
2017-08-04T16:04:08.212Z
2017-08-04T17:28:21.040Z
2017-08-04T16:04:09.113Z
5041104
2017-08-04T16:04:19.936Z
2017-08-04T17:28:21.040Z
2017-08-04T16:04:19.936Z
5019507
2017-08-04T16:04:41.533Z
2017-08-04T17:28:21.040Z
2017-08-04T16:04:41.533Z
4989803
2017-08-04T16:05:11.237Z
2017-08-04T17:28:21.040Z
2017-08-04T16:05:11.842Z
3425288
2017-08-04T16:31:15.752Z
2017-08-04T17:28:21.040Z
2017-08-04T16:31:16.861Z
3151481
2017-08-04T16:35:49.559Z
2017-08-04T17:28:21.040Z
2017-08-04T16:35:49.559Z
2792117
2017-08-04T16:41:48.923Z
2017-08-04T17:28:21.040Z
2017-08-04T16:41:48.923Z
2781632
2017-08-04T16:41:59.408Z
2017-08-04T17:28:21.040Z
2017-08-04T16:41:59.408Z
2764852
2017-08-04T16:42:16.188Z
2017-08-04T17:28:21.040Z
2017-08-04T16:42:16.657Z
2563270
2017-08-04T16:45:37.770Z
2017-08-04T17:28:21.040Z
2017-08-04T16:45:37.983Z
2559857
2017-08-04T16:45:41.183Z
2017-08-04T17:28:21.040Z
2017-08-04T16:45:41.268Z
2558193
2017-08-04T16:45:42.847Z
2017-08-04T17:28:21.040Z
2017-08-04T16:45:42.847Z
2556443
2017-08-04T16:45:44.597Z
2017-08-04T17:28:21.040Z
2017-08-04T16:45:44.597Z
2531871
2017-08-04T16:46:09.169Z
2017-08-04T17:28:21.040Z
2017-08-04T16:46:09.169Z
2462819
2017-08-04T16:47:18.221Z
2017-08-04T17:28:21.040Z
2017-08-04T16:47:19.117Z
2447048
2017-08-04T16:47:33.992Z
2017-08-04T17:28:21.040Z
2017-08-04T16:47:33.992Z
2446237
2017-08-04T16:47:34.803Z
2017-08-04T17:28:21.040Z
2017-08-04T16:47:35.368Z
2443069
2017-08-04T16:47:37.971Z
2017-08-04T17:28:21.040Z
2017-08-04T16:47:38.227Z
2433250
2017-08-04T16:47:47.790Z
2017-08-04T17:28:21.040Z
2017-08-04T16:47:49.155Z
2429026
2017-08-04T16:47:52.014Z
2017-08-04T17:28:21.040Z
2017-08-04T16:47:56.195Z
2423948
2017-08-04T16:47:57.092Z
2017-08-04T17:28:21.040Z
2017-08-04T16:47:57.219Z
1949430
2017-08-04T16:55:51.610Z
2017-08-04T17:28:21.040Z
2017-08-04T16:55:52.122Z
1798261
2017-08-04T16:58:22.779Z
2017-08-04T17:28:21.040Z
2017-08-04T16:58:22.779Z
1764635
2017-08-04T16:58:56.405Z
2017-08-04T17:28:21.040Z
2017-08-04T16:58:56.405Z
967745
2017-08-04T17:12:13.295Z
2017-08-04T17:28:21.040Z
2017-08-04T17:12:13.295Z
759704
2017-08-04T17:15:41.336Z
2017-08-04T17:28:21.040Z
2017-08-04T17:15:41.336Z
587181
2017-08-04T17:18:33.859Z
2017-08-04T17:28:21.040Z
2017-08-04T17:18:33.859Z
480881
2017-08-04T17:20:20.159Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:20.202Z
479766
2017-08-04T17:20:21.274Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:21.578Z
477883
2017-08-04T17:20:23.157Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:23.200Z
477158
2017-08-04T17:20:23.882Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:25.930Z
473958
2017-08-04T17:20:27.082Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:29.472Z
470160
2017-08-04T17:20:30.880Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:34.170Z
465886
2017-08-04T17:20:35.154Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:35.154Z
462475
2017-08-04T17:20:38.565Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:38.651Z
458128
2017-08-04T17:20:42.912Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:43.040Z
454139
2017-08-04T17:20:46.901Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:47.072Z
452603
2017-08-04T17:20:48.437Z
2017-08-04T17:28:21.040Z
2017-08-04T17:20:48.522Z
440778
2017-08-04T17:21:00.262Z
2017-08-04T17:28:21.040Z
2017-08-04T17:21:00.646Z
432778
2017-08-04T17:21:08.262Z
2017-08-04T17:28:21.040Z
2017-08-04T17:21:08.304Z
46233
2017-08-04T17:27:34.807Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:34.807Z
41684
2017-08-04T17:27:39.356Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:39.356Z
39253
2017-08-04T17:27:41.787Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:42.043Z
34778
2017-08-04T17:27:46.262Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:46.306Z
33754
2017-08-04T17:27:47.286Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:47.675Z
30692
2017-08-04T17:27:50.348Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:50.348Z
28749
2017-08-04T17:27:52.291Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:52.333Z
26984
2017-08-04T17:27:54.056Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:55.438Z
24962
2017-08-04T17:27:56.078Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:56.120Z
24280
2017-08-04T17:27:56.760Z
2017-08-04T17:28:21.040Z
2017-08-04T17:27:56.760Z
23293
2017-08-04T17:27:57.747Z
2017-08-04T17:28:21.040Z
2017-08-04T17:28:00.004Z
18684
2017-08-04T17:28:02.356Z
2017-08-04T17:28:21.040Z
2017-08-04T17:28:02.569Z
16758
2017-08-04T17:28:04.282Z
2017-08-04T17:28:21.040Z
2017-08-04T17:28:05.801Z
14103
2017-08-04T17:28:06.937Z
2017-08-04T17:28:21.040Z
2017-08-04T17:28:07.150Z
9612
2017-08-04T17:28:11.428Z
2017-08-04T17:28:21.040Z
2017-08-04T17:28:11.474Z
7596
2017-08-04T17:28:13.444Z
2017-08-04T17:28:21.040Z
2017-08-04T17:28:13.444Z
703
2017-08-04T17:28:20.337Z
2017-08-04T17:28:21.040Z
2017-08-04T17:28:20.337Z
0
2017-08-04T17:28:21.040Z
2017-08-04T17:28:21.040Z
2017-08-04T17:28:21.040Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:23:25.046Z 2017-08-04T17:28:25.046Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aeb93fdd10ba54f6f9bf,
       participant: 'dog',
       turns: 0.4375 },
     { _id: 5984aeb93fdd10ba54f6f9be,
       participant: 'jordan',
       turns: 0.5625 } ],
  meeting: 'no',
  transitions: 23,
  timestamp: 2017-08-04T17:28:25.075Z,
  from: 2017-08-04T17:23:25.046Z,
  to: 2017-08-04T17:28:25.046Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aeb93fdd10ba54f6f9bf,
       participant: 'dog',
       turns: 0.4375 },
     { _id: 5984aeb93fdd10ba54f6f9be,
       participant: 'jordan',
       turns: 0.5625 } ],
  meeting: 'no',
  transitions: 23,
  timestamp: 2017-08-04T17:28:25.075Z,
  from: 2017-08-04T17:23:25.046Z,
  to: 2017-08-04T17:28:25.046Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=dog, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no#, consent=true, consentDate=2017-08-04T17:28:27.194Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzcwNywiZXhwIjoxNTg4MjY3NzA3LCJpc3MiOiJmZWF0aGVycyJ9.ElRoX450AxTabwhnfnuXOgaOX2d5Ifqu7qKCaOho4Qk
info: meeting joined event: participant=dog, name=dog, participants=[participant=jordan, participant=dog], meeting=no, meetingUrl=http://localhost:3001/?user=dog&room=no, consent=true, consentDate=2017-08-04T17:28:27.577Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzcwNywiZXhwIjoxNTg4MjY3NzA3LCJpc3MiOiJmZWF0aGVycyJ9.ElRoX450AxTabwhnfnuXOgaOX2d5Ifqu7qKCaOho4Qk
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no#',
     consent: true,
     consentDate: '2017-08-04T17:28:27.194Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzcwNywiZXhwIjoxNTg4MjY3NzA3LCJpc3MiOiJmZWF0aGVycyJ9.ElRoX450AxTabwhnfnuXOgaOX2d5Ifqu7qKCaOho4Qk' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan' ]
patching meeting { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan' ]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'dog',
     name: 'dog',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=dog&room=no',
     consent: true,
     consentDate: '2017-08-04T17:28:27.577Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzcwNywiZXhwIjoxNTg4MjY3NzA3LCJpc3MiOiJmZWF0aGVycyJ9.ElRoX450AxTabwhnfnuXOgaOX2d5Ifqu7qKCaOho4Qk' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog' ]
patching meeting { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog' ]
info: not adding participant: { participants: [ 'dog', 'jordan' ],
  lastUpdated: 2017-08-04T17:28:27.771Z } no
info: not adding participant: { participants: [ 'dog', 'jordan' ],
  lastUpdated: 2017-08-04T17:28:27.824Z } no
updated meeting with participants { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aebb3fdd10ba54f6f9c0,
  timestamp: 2017-08-04T17:28:27.836Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aebb3fdd10ba54f6f9c0,
  timestamp: 2017-08-04T17:28:27.836Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
updated meeting with participants { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aebb3fdd10ba54f6f9c1,
  timestamp: 2017-08-04T17:28:27.861Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan' ],
  _id: 5984aebb3fdd10ba54f6f9c1,
  timestamp: 2017-08-04T17:28:27.861Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:23:30.051Z 2017-08-04T17:28:30.051Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aebe3fdd10ba54f6f9c3,
       participant: 'dog',
       turns: 0.4375 },
     { _id: 5984aebe3fdd10ba54f6f9c2,
       participant: 'jordan',
       turns: 0.5625 } ],
  meeting: 'no',
  transitions: 23,
  timestamp: 2017-08-04T17:28:30.057Z,
  from: 2017-08-04T17:23:30.051Z,
  to: 2017-08-04T17:28:30.051Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aebe3fdd10ba54f6f9c3,
       participant: 'dog',
       turns: 0.4375 },
     { _id: 5984aebe3fdd10ba54f6f9c2,
       participant: 'jordan',
       turns: 0.5625 } ],
  meeting: 'no',
  transitions: 23,
  timestamp: 2017-08-04T17:28:30.057Z,
  from: 2017-08-04T17:23:30.051Z,
  to: 2017-08-04T17:28:30.051Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 15
55681
2017-08-04T17:27:33.842Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:33.842Z
50147
2017-08-04T17:27:39.376Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:39.975Z
48099
2017-08-04T17:27:41.424Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:42.961Z
45922
2017-08-04T17:27:43.601Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:45.489Z
43213
2017-08-04T17:27:46.310Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:46.397Z
42054
2017-08-04T17:27:47.469Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:47.723Z
39170
2017-08-04T17:27:50.353Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:51.128Z
37270
2017-08-04T17:27:52.253Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:52.517Z
35462
2017-08-04T17:27:54.061Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:54.147Z
33445
2017-08-04T17:27:56.078Z
2017-08-04T17:28:29.523Z
2017-08-04T17:27:56.078Z
30304
2017-08-04T17:27:59.219Z
2017-08-04T17:28:29.523Z
2017-08-04T17:28:00.008Z
25280
2017-08-04T17:28:04.243Z
2017-08-04T17:28:29.523Z
2017-08-04T17:28:05.797Z
22554
2017-08-04T17:28:06.969Z
2017-08-04T17:28:29.523Z
2017-08-04T17:28:07.358Z
16191
2017-08-04T17:28:13.332Z
2017-08-04T17:28:29.523Z
2017-08-04T17:28:13.673Z
0
2017-08-04T17:28:29.523Z
2017-08-04T17:28:29.523Z
2017-08-04T17:28:29.567Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 4160 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: utterances found: 60
5139432
2017-08-04T16:02:53.992Z
2017-08-04T17:28:33.424Z
2017-08-04T16:02:55.016Z
5065212
2017-08-04T16:04:08.212Z
2017-08-04T17:28:33.424Z
2017-08-04T16:04:09.113Z
5053488
2017-08-04T16:04:19.936Z
2017-08-04T17:28:33.424Z
2017-08-04T16:04:19.936Z
5031891
2017-08-04T16:04:41.533Z
2017-08-04T17:28:33.424Z
2017-08-04T16:04:41.533Z
5002187
2017-08-04T16:05:11.237Z
2017-08-04T17:28:33.424Z
2017-08-04T16:05:11.842Z
3437672
2017-08-04T16:31:15.752Z
2017-08-04T17:28:33.424Z
2017-08-04T16:31:16.861Z
3163865
2017-08-04T16:35:49.559Z
2017-08-04T17:28:33.424Z
2017-08-04T16:35:49.559Z
2804501
2017-08-04T16:41:48.923Z
2017-08-04T17:28:33.424Z
2017-08-04T16:41:48.923Z
2794016
2017-08-04T16:41:59.408Z
2017-08-04T17:28:33.424Z
2017-08-04T16:41:59.408Z
2777236
2017-08-04T16:42:16.188Z
2017-08-04T17:28:33.424Z
2017-08-04T16:42:16.657Z
2575654
2017-08-04T16:45:37.770Z
2017-08-04T17:28:33.424Z
2017-08-04T16:45:37.983Z
2572241
2017-08-04T16:45:41.183Z
2017-08-04T17:28:33.424Z
2017-08-04T16:45:41.268Z
2570577
2017-08-04T16:45:42.847Z
2017-08-04T17:28:33.424Z
2017-08-04T16:45:42.847Z
2568827
2017-08-04T16:45:44.597Z
2017-08-04T17:28:33.424Z
2017-08-04T16:45:44.597Z
2544255
2017-08-04T16:46:09.169Z
2017-08-04T17:28:33.424Z
2017-08-04T16:46:09.169Z
2475203
2017-08-04T16:47:18.221Z
2017-08-04T17:28:33.424Z
2017-08-04T16:47:19.117Z
2459432
2017-08-04T16:47:33.992Z
2017-08-04T17:28:33.424Z
2017-08-04T16:47:33.992Z
2458621
2017-08-04T16:47:34.803Z
2017-08-04T17:28:33.424Z
2017-08-04T16:47:35.368Z
2455453
2017-08-04T16:47:37.971Z
2017-08-04T17:28:33.424Z
2017-08-04T16:47:38.227Z
2445634
2017-08-04T16:47:47.790Z
2017-08-04T17:28:33.424Z
2017-08-04T16:47:49.155Z
2441410
2017-08-04T16:47:52.014Z
2017-08-04T17:28:33.424Z
2017-08-04T16:47:56.195Z
2436332
2017-08-04T16:47:57.092Z
2017-08-04T17:28:33.424Z
2017-08-04T16:47:57.219Z
1961814
2017-08-04T16:55:51.610Z
2017-08-04T17:28:33.424Z
2017-08-04T16:55:52.122Z
1810645
2017-08-04T16:58:22.779Z
2017-08-04T17:28:33.424Z
2017-08-04T16:58:22.779Z
1777019
2017-08-04T16:58:56.405Z
2017-08-04T17:28:33.424Z
2017-08-04T16:58:56.405Z
980129
2017-08-04T17:12:13.295Z
2017-08-04T17:28:33.424Z
2017-08-04T17:12:13.295Z
772088
2017-08-04T17:15:41.336Z
2017-08-04T17:28:33.424Z
2017-08-04T17:15:41.336Z
599565
2017-08-04T17:18:33.859Z
2017-08-04T17:28:33.424Z
2017-08-04T17:18:33.859Z
493265
2017-08-04T17:20:20.159Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:20.202Z
492150
2017-08-04T17:20:21.274Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:21.578Z
490267
2017-08-04T17:20:23.157Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:23.200Z
489542
2017-08-04T17:20:23.882Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:25.930Z
486342
2017-08-04T17:20:27.082Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:29.472Z
482544
2017-08-04T17:20:30.880Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:34.170Z
478270
2017-08-04T17:20:35.154Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:35.154Z
474859
2017-08-04T17:20:38.565Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:38.651Z
470512
2017-08-04T17:20:42.912Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:43.040Z
466523
2017-08-04T17:20:46.901Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:47.072Z
464987
2017-08-04T17:20:48.437Z
2017-08-04T17:28:33.424Z
2017-08-04T17:20:48.522Z
453162
2017-08-04T17:21:00.262Z
2017-08-04T17:28:33.424Z
2017-08-04T17:21:00.646Z
445162
2017-08-04T17:21:08.262Z
2017-08-04T17:28:33.424Z
2017-08-04T17:21:08.304Z
58617
2017-08-04T17:27:34.807Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:34.807Z
54068
2017-08-04T17:27:39.356Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:39.356Z
51637
2017-08-04T17:27:41.787Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:42.043Z
47162
2017-08-04T17:27:46.262Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:46.306Z
46138
2017-08-04T17:27:47.286Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:47.675Z
43076
2017-08-04T17:27:50.348Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:50.348Z
41133
2017-08-04T17:27:52.291Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:52.333Z
39368
2017-08-04T17:27:54.056Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:55.438Z
37346
2017-08-04T17:27:56.078Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:56.120Z
36664
2017-08-04T17:27:56.760Z
2017-08-04T17:28:33.424Z
2017-08-04T17:27:56.760Z
35677
2017-08-04T17:27:57.747Z
2017-08-04T17:28:33.424Z
2017-08-04T17:28:00.004Z
31068
2017-08-04T17:28:02.356Z
2017-08-04T17:28:33.424Z
2017-08-04T17:28:02.569Z
29142
2017-08-04T17:28:04.282Z
2017-08-04T17:28:33.424Z
2017-08-04T17:28:05.801Z
26487
2017-08-04T17:28:06.937Z
2017-08-04T17:28:33.424Z
2017-08-04T17:28:07.150Z
21996
2017-08-04T17:28:11.428Z
2017-08-04T17:28:33.424Z
2017-08-04T17:28:11.474Z
19980
2017-08-04T17:28:13.444Z
2017-08-04T17:28:33.424Z
2017-08-04T17:28:13.444Z
13087
2017-08-04T17:28:20.337Z
2017-08-04T17:28:33.424Z
2017-08-04T17:28:20.337Z
12384
2017-08-04T17:28:21.040Z
2017-08-04T17:28:33.424Z
2017-08-04T17:28:21.040Z
0
2017-08-04T17:28:33.424Z
2017-08-04T17:28:33.424Z
2017-08-04T17:28:33.424Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:23:35.057Z 2017-08-04T17:28:35.057Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aec33fdd10ba54f6f9c7,
       participant: 'dog',
       turns: 0.4411764705882353 },
     { _id: 5984aec33fdd10ba54f6f9c6,
       participant: 'jordan',
       turns: 0.5588235294117647 } ],
  meeting: 'no',
  transitions: 25,
  timestamp: 2017-08-04T17:28:35.064Z,
  from: 2017-08-04T17:23:35.057Z,
  to: 2017-08-04T17:28:35.057Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aec33fdd10ba54f6f9c7,
       participant: 'dog',
       turns: 0.4411764705882353 },
     { _id: 5984aec33fdd10ba54f6f9c6,
       participant: 'jordan',
       turns: 0.5588235294117647 } ],
  meeting: 'no',
  transitions: 25,
  timestamp: 2017-08-04T17:28:35.064Z,
  from: 2017-08-04T17:23:35.057Z,
  to: 2017-08-04T17:28:35.057Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 61
5142922
2017-08-04T16:02:53.992Z
2017-08-04T17:28:36.914Z
2017-08-04T16:02:55.016Z
5068702
2017-08-04T16:04:08.212Z
2017-08-04T17:28:36.914Z
2017-08-04T16:04:09.113Z
5056978
2017-08-04T16:04:19.936Z
2017-08-04T17:28:36.914Z
2017-08-04T16:04:19.936Z
5035381
2017-08-04T16:04:41.533Z
2017-08-04T17:28:36.914Z
2017-08-04T16:04:41.533Z
5005677
2017-08-04T16:05:11.237Z
2017-08-04T17:28:36.914Z
2017-08-04T16:05:11.842Z
3441162
2017-08-04T16:31:15.752Z
2017-08-04T17:28:36.914Z
2017-08-04T16:31:16.861Z
3167355
2017-08-04T16:35:49.559Z
2017-08-04T17:28:36.914Z
2017-08-04T16:35:49.559Z
2807991
2017-08-04T16:41:48.923Z
2017-08-04T17:28:36.914Z
2017-08-04T16:41:48.923Z
2797506
2017-08-04T16:41:59.408Z
2017-08-04T17:28:36.914Z
2017-08-04T16:41:59.408Z
2780726
2017-08-04T16:42:16.188Z
2017-08-04T17:28:36.914Z
2017-08-04T16:42:16.657Z
2579144
2017-08-04T16:45:37.770Z
2017-08-04T17:28:36.914Z
2017-08-04T16:45:37.983Z
2575731
2017-08-04T16:45:41.183Z
2017-08-04T17:28:36.914Z
2017-08-04T16:45:41.268Z
2574067
2017-08-04T16:45:42.847Z
2017-08-04T17:28:36.914Z
2017-08-04T16:45:42.847Z
2572317
2017-08-04T16:45:44.597Z
2017-08-04T17:28:36.914Z
2017-08-04T16:45:44.597Z
2547745
2017-08-04T16:46:09.169Z
2017-08-04T17:28:36.914Z
2017-08-04T16:46:09.169Z
2478693
2017-08-04T16:47:18.221Z
2017-08-04T17:28:36.914Z
2017-08-04T16:47:19.117Z
2462922
2017-08-04T16:47:33.992Z
2017-08-04T17:28:36.914Z
2017-08-04T16:47:33.992Z
2462111
2017-08-04T16:47:34.803Z
2017-08-04T17:28:36.914Z
2017-08-04T16:47:35.368Z
2458943
2017-08-04T16:47:37.971Z
2017-08-04T17:28:36.914Z
2017-08-04T16:47:38.227Z
2449124
2017-08-04T16:47:47.790Z
2017-08-04T17:28:36.914Z
2017-08-04T16:47:49.155Z
2444900
2017-08-04T16:47:52.014Z
2017-08-04T17:28:36.914Z
2017-08-04T16:47:56.195Z
2439822
2017-08-04T16:47:57.092Z
2017-08-04T17:28:36.914Z
2017-08-04T16:47:57.219Z
1965304
2017-08-04T16:55:51.610Z
2017-08-04T17:28:36.914Z
2017-08-04T16:55:52.122Z
1814135
2017-08-04T16:58:22.779Z
2017-08-04T17:28:36.914Z
2017-08-04T16:58:22.779Z
1780509
2017-08-04T16:58:56.405Z
2017-08-04T17:28:36.914Z
2017-08-04T16:58:56.405Z
983619
2017-08-04T17:12:13.295Z
2017-08-04T17:28:36.914Z
2017-08-04T17:12:13.295Z
775578
2017-08-04T17:15:41.336Z
2017-08-04T17:28:36.914Z
2017-08-04T17:15:41.336Z
603055
2017-08-04T17:18:33.859Z
2017-08-04T17:28:36.914Z
2017-08-04T17:18:33.859Z
496755
2017-08-04T17:20:20.159Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:20.202Z
495640
2017-08-04T17:20:21.274Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:21.578Z
493757
2017-08-04T17:20:23.157Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:23.200Z
493032
2017-08-04T17:20:23.882Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:25.930Z
489832
2017-08-04T17:20:27.082Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:29.472Z
486034
2017-08-04T17:20:30.880Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:34.170Z
481760
2017-08-04T17:20:35.154Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:35.154Z
478349
2017-08-04T17:20:38.565Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:38.651Z
474002
2017-08-04T17:20:42.912Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:43.040Z
470013
2017-08-04T17:20:46.901Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:47.072Z
468477
2017-08-04T17:20:48.437Z
2017-08-04T17:28:36.914Z
2017-08-04T17:20:48.522Z
456652
2017-08-04T17:21:00.262Z
2017-08-04T17:28:36.914Z
2017-08-04T17:21:00.646Z
448652
2017-08-04T17:21:08.262Z
2017-08-04T17:28:36.914Z
2017-08-04T17:21:08.304Z
62107
2017-08-04T17:27:34.807Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:34.807Z
57558
2017-08-04T17:27:39.356Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:39.356Z
55127
2017-08-04T17:27:41.787Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:42.043Z
50652
2017-08-04T17:27:46.262Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:46.306Z
49628
2017-08-04T17:27:47.286Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:47.675Z
46566
2017-08-04T17:27:50.348Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:50.348Z
44623
2017-08-04T17:27:52.291Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:52.333Z
42858
2017-08-04T17:27:54.056Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:55.438Z
40836
2017-08-04T17:27:56.078Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:56.120Z
40154
2017-08-04T17:27:56.760Z
2017-08-04T17:28:36.914Z
2017-08-04T17:27:56.760Z
39167
2017-08-04T17:27:57.747Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:00.004Z
34558
2017-08-04T17:28:02.356Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:02.569Z
32632
2017-08-04T17:28:04.282Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:05.801Z
29977
2017-08-04T17:28:06.937Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:07.150Z
25486
2017-08-04T17:28:11.428Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:11.474Z
23470
2017-08-04T17:28:13.444Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:13.444Z
16577
2017-08-04T17:28:20.337Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:20.337Z
15874
2017-08-04T17:28:21.040Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:21.040Z
3490
2017-08-04T17:28:33.424Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:33.424Z
0
2017-08-04T17:28:36.914Z
2017-08-04T17:28:36.914Z
2017-08-04T17:28:36.958Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 16
64949
2017-08-04T17:27:33.842Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:33.842Z
59415
2017-08-04T17:27:39.376Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:39.975Z
57367
2017-08-04T17:27:41.424Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:42.961Z
55190
2017-08-04T17:27:43.601Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:45.489Z
52481
2017-08-04T17:27:46.310Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:46.397Z
51322
2017-08-04T17:27:47.469Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:47.723Z
48438
2017-08-04T17:27:50.353Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:51.128Z
46538
2017-08-04T17:27:52.253Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:52.517Z
44730
2017-08-04T17:27:54.061Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:54.147Z
42713
2017-08-04T17:27:56.078Z
2017-08-04T17:28:38.791Z
2017-08-04T17:27:56.078Z
39572
2017-08-04T17:27:59.219Z
2017-08-04T17:28:38.791Z
2017-08-04T17:28:00.008Z
34548
2017-08-04T17:28:04.243Z
2017-08-04T17:28:38.791Z
2017-08-04T17:28:05.797Z
31822
2017-08-04T17:28:06.969Z
2017-08-04T17:28:38.791Z
2017-08-04T17:28:07.358Z
25459
2017-08-04T17:28:13.332Z
2017-08-04T17:28:38.791Z
2017-08-04T17:28:13.673Z
9268
2017-08-04T17:28:29.523Z
2017-08-04T17:28:38.791Z
2017-08-04T17:28:29.567Z
0
2017-08-04T17:28:38.791Z
2017-08-04T17:28:38.791Z
2017-08-04T17:28:38.962Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 62
5145201
2017-08-04T16:02:53.992Z
2017-08-04T17:28:39.193Z
2017-08-04T16:02:55.016Z
5070981
2017-08-04T16:04:08.212Z
2017-08-04T17:28:39.193Z
2017-08-04T16:04:09.113Z
5059257
2017-08-04T16:04:19.936Z
2017-08-04T17:28:39.193Z
2017-08-04T16:04:19.936Z
5037660
2017-08-04T16:04:41.533Z
2017-08-04T17:28:39.193Z
2017-08-04T16:04:41.533Z
5007956
2017-08-04T16:05:11.237Z
2017-08-04T17:28:39.193Z
2017-08-04T16:05:11.842Z
3443441
2017-08-04T16:31:15.752Z
2017-08-04T17:28:39.193Z
2017-08-04T16:31:16.861Z
3169634
2017-08-04T16:35:49.559Z
2017-08-04T17:28:39.193Z
2017-08-04T16:35:49.559Z
2810270
2017-08-04T16:41:48.923Z
2017-08-04T17:28:39.193Z
2017-08-04T16:41:48.923Z
2799785
2017-08-04T16:41:59.408Z
2017-08-04T17:28:39.193Z
2017-08-04T16:41:59.408Z
2783005
2017-08-04T16:42:16.188Z
2017-08-04T17:28:39.193Z
2017-08-04T16:42:16.657Z
2581423
2017-08-04T16:45:37.770Z
2017-08-04T17:28:39.193Z
2017-08-04T16:45:37.983Z
2578010
2017-08-04T16:45:41.183Z
2017-08-04T17:28:39.193Z
2017-08-04T16:45:41.268Z
2576346
2017-08-04T16:45:42.847Z
2017-08-04T17:28:39.193Z
2017-08-04T16:45:42.847Z
2574596
2017-08-04T16:45:44.597Z
2017-08-04T17:28:39.193Z
2017-08-04T16:45:44.597Z
2550024
2017-08-04T16:46:09.169Z
2017-08-04T17:28:39.193Z
2017-08-04T16:46:09.169Z
2480972
2017-08-04T16:47:18.221Z
2017-08-04T17:28:39.193Z
2017-08-04T16:47:19.117Z
2465201
2017-08-04T16:47:33.992Z
2017-08-04T17:28:39.193Z
2017-08-04T16:47:33.992Z
2464390
2017-08-04T16:47:34.803Z
2017-08-04T17:28:39.193Z
2017-08-04T16:47:35.368Z
2461222
2017-08-04T16:47:37.971Z
2017-08-04T17:28:39.193Z
2017-08-04T16:47:38.227Z
2451403
2017-08-04T16:47:47.790Z
2017-08-04T17:28:39.193Z
2017-08-04T16:47:49.155Z
2447179
2017-08-04T16:47:52.014Z
2017-08-04T17:28:39.193Z
2017-08-04T16:47:56.195Z
2442101
2017-08-04T16:47:57.092Z
2017-08-04T17:28:39.193Z
2017-08-04T16:47:57.219Z
1967583
2017-08-04T16:55:51.610Z
2017-08-04T17:28:39.193Z
2017-08-04T16:55:52.122Z
1816414
2017-08-04T16:58:22.779Z
2017-08-04T17:28:39.193Z
2017-08-04T16:58:22.779Z
1782788
2017-08-04T16:58:56.405Z
2017-08-04T17:28:39.193Z
2017-08-04T16:58:56.405Z
985898
2017-08-04T17:12:13.295Z
2017-08-04T17:28:39.193Z
2017-08-04T17:12:13.295Z
777857
2017-08-04T17:15:41.336Z
2017-08-04T17:28:39.193Z
2017-08-04T17:15:41.336Z
605334
2017-08-04T17:18:33.859Z
2017-08-04T17:28:39.193Z
2017-08-04T17:18:33.859Z
499034
2017-08-04T17:20:20.159Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:20.202Z
497919
2017-08-04T17:20:21.274Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:21.578Z
496036
2017-08-04T17:20:23.157Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:23.200Z
495311
2017-08-04T17:20:23.882Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:25.930Z
492111
2017-08-04T17:20:27.082Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:29.472Z
488313
2017-08-04T17:20:30.880Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:34.170Z
484039
2017-08-04T17:20:35.154Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:35.154Z
480628
2017-08-04T17:20:38.565Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:38.651Z
476281
2017-08-04T17:20:42.912Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:43.040Z
472292
2017-08-04T17:20:46.901Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:47.072Z
470756
2017-08-04T17:20:48.437Z
2017-08-04T17:28:39.193Z
2017-08-04T17:20:48.522Z
458931
2017-08-04T17:21:00.262Z
2017-08-04T17:28:39.193Z
2017-08-04T17:21:00.646Z
450931
2017-08-04T17:21:08.262Z
2017-08-04T17:28:39.193Z
2017-08-04T17:21:08.304Z
64386
2017-08-04T17:27:34.807Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:34.807Z
59837
2017-08-04T17:27:39.356Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:39.356Z
57406
2017-08-04T17:27:41.787Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:42.043Z
52931
2017-08-04T17:27:46.262Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:46.306Z
51907
2017-08-04T17:27:47.286Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:47.675Z
48845
2017-08-04T17:27:50.348Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:50.348Z
46902
2017-08-04T17:27:52.291Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:52.333Z
45137
2017-08-04T17:27:54.056Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:55.438Z
43115
2017-08-04T17:27:56.078Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:56.120Z
42433
2017-08-04T17:27:56.760Z
2017-08-04T17:28:39.193Z
2017-08-04T17:27:56.760Z
41446
2017-08-04T17:27:57.747Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:00.004Z
36837
2017-08-04T17:28:02.356Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:02.569Z
34911
2017-08-04T17:28:04.282Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:05.801Z
32256
2017-08-04T17:28:06.937Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:07.150Z
27765
2017-08-04T17:28:11.428Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:11.474Z
25749
2017-08-04T17:28:13.444Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:13.444Z
18856
2017-08-04T17:28:20.337Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:20.337Z
18153
2017-08-04T17:28:21.040Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:21.040Z
5769
2017-08-04T17:28:33.424Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:33.424Z
2279
2017-08-04T17:28:36.914Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:36.958Z
0
2017-08-04T17:28:39.193Z
2017-08-04T17:28:39.193Z
2017-08-04T17:28:39.193Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:23:40.062Z 2017-08-04T17:28:40.062Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aec83fdd10ba54f6f9cc,
       participant: 'dog',
       turns: 0.43243243243243246 },
     { _id: 5984aec83fdd10ba54f6f9cb,
       participant: 'jordan',
       turns: 0.5675675675675675 } ],
  meeting: 'no',
  transitions: 27,
  timestamp: 2017-08-04T17:28:40.067Z,
  from: 2017-08-04T17:23:40.062Z,
  to: 2017-08-04T17:28:40.062Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aec83fdd10ba54f6f9cc,
       participant: 'dog',
       turns: 0.43243243243243246 },
     { _id: 5984aec83fdd10ba54f6f9cb,
       participant: 'jordan',
       turns: 0.5675675675675675 } ],
  meeting: 'no',
  transitions: 27,
  timestamp: 2017-08-04T17:28:40.067Z,
  from: 2017-08-04T17:23:40.062Z,
  to: 2017-08-04T17:28:40.062Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:23:45.066Z 2017-08-04T17:28:45.066Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aecd3fdd10ba54f6f9ce,
       participant: 'dog',
       turns: 0.43243243243243246 },
     { _id: 5984aecd3fdd10ba54f6f9cd,
       participant: 'jordan',
       turns: 0.5675675675675675 } ],
  meeting: 'no',
  transitions: 27,
  timestamp: 2017-08-04T17:28:45.072Z,
  from: 2017-08-04T17:23:45.066Z,
  to: 2017-08-04T17:28:45.066Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aecd3fdd10ba54f6f9ce,
       participant: 'dog',
       turns: 0.43243243243243246 },
     { _id: 5984aecd3fdd10ba54f6f9cd,
       participant: 'jordan',
       turns: 0.5675675675675675 } ],
  meeting: 'no',
  transitions: 27,
  timestamp: 2017-08-04T17:28:45.072Z,
  from: 2017-08-04T17:23:45.066Z,
  to: 2017-08-04T17:28:45.066Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 17
70955
2017-08-04T17:27:33.842Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:33.842Z
65421
2017-08-04T17:27:39.376Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:39.975Z
63373
2017-08-04T17:27:41.424Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:42.961Z
61196
2017-08-04T17:27:43.601Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:45.489Z
58487
2017-08-04T17:27:46.310Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:46.397Z
57328
2017-08-04T17:27:47.469Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:47.723Z
54444
2017-08-04T17:27:50.353Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:51.128Z
52544
2017-08-04T17:27:52.253Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:52.517Z
50736
2017-08-04T17:27:54.061Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:54.147Z
48719
2017-08-04T17:27:56.078Z
2017-08-04T17:28:44.797Z
2017-08-04T17:27:56.078Z
45578
2017-08-04T17:27:59.219Z
2017-08-04T17:28:44.797Z
2017-08-04T17:28:00.008Z
40554
2017-08-04T17:28:04.243Z
2017-08-04T17:28:44.797Z
2017-08-04T17:28:05.797Z
37828
2017-08-04T17:28:06.969Z
2017-08-04T17:28:44.797Z
2017-08-04T17:28:07.358Z
31465
2017-08-04T17:28:13.332Z
2017-08-04T17:28:44.797Z
2017-08-04T17:28:13.673Z
15274
2017-08-04T17:28:29.523Z
2017-08-04T17:28:44.797Z
2017-08-04T17:28:29.567Z
6006
2017-08-04T17:28:38.791Z
2017-08-04T17:28:44.797Z
2017-08-04T17:28:38.962Z
0
2017-08-04T17:28:44.797Z
2017-08-04T17:28:44.797Z
2017-08-04T17:28:44.797Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 63
5150824
2017-08-04T16:02:53.992Z
2017-08-04T17:28:44.816Z
2017-08-04T16:02:55.016Z
5076604
2017-08-04T16:04:08.212Z
2017-08-04T17:28:44.816Z
2017-08-04T16:04:09.113Z
5064880
2017-08-04T16:04:19.936Z
2017-08-04T17:28:44.816Z
2017-08-04T16:04:19.936Z
5043283
2017-08-04T16:04:41.533Z
2017-08-04T17:28:44.816Z
2017-08-04T16:04:41.533Z
5013579
2017-08-04T16:05:11.237Z
2017-08-04T17:28:44.816Z
2017-08-04T16:05:11.842Z
3449064
2017-08-04T16:31:15.752Z
2017-08-04T17:28:44.816Z
2017-08-04T16:31:16.861Z
3175257
2017-08-04T16:35:49.559Z
2017-08-04T17:28:44.816Z
2017-08-04T16:35:49.559Z
2815893
2017-08-04T16:41:48.923Z
2017-08-04T17:28:44.816Z
2017-08-04T16:41:48.923Z
2805408
2017-08-04T16:41:59.408Z
2017-08-04T17:28:44.816Z
2017-08-04T16:41:59.408Z
2788628
2017-08-04T16:42:16.188Z
2017-08-04T17:28:44.816Z
2017-08-04T16:42:16.657Z
2587046
2017-08-04T16:45:37.770Z
2017-08-04T17:28:44.816Z
2017-08-04T16:45:37.983Z
2583633
2017-08-04T16:45:41.183Z
2017-08-04T17:28:44.816Z
2017-08-04T16:45:41.268Z
2581969
2017-08-04T16:45:42.847Z
2017-08-04T17:28:44.816Z
2017-08-04T16:45:42.847Z
2580219
2017-08-04T16:45:44.597Z
2017-08-04T17:28:44.816Z
2017-08-04T16:45:44.597Z
2555647
2017-08-04T16:46:09.169Z
2017-08-04T17:28:44.816Z
2017-08-04T16:46:09.169Z
2486595
2017-08-04T16:47:18.221Z
2017-08-04T17:28:44.816Z
2017-08-04T16:47:19.117Z
2470824
2017-08-04T16:47:33.992Z
2017-08-04T17:28:44.816Z
2017-08-04T16:47:33.992Z
2470013
2017-08-04T16:47:34.803Z
2017-08-04T17:28:44.816Z
2017-08-04T16:47:35.368Z
2466845
2017-08-04T16:47:37.971Z
2017-08-04T17:28:44.816Z
2017-08-04T16:47:38.227Z
2457026
2017-08-04T16:47:47.790Z
2017-08-04T17:28:44.816Z
2017-08-04T16:47:49.155Z
2452802
2017-08-04T16:47:52.014Z
2017-08-04T17:28:44.816Z
2017-08-04T16:47:56.195Z
2447724
2017-08-04T16:47:57.092Z
2017-08-04T17:28:44.816Z
2017-08-04T16:47:57.219Z
1973206
2017-08-04T16:55:51.610Z
2017-08-04T17:28:44.816Z
2017-08-04T16:55:52.122Z
1822037
2017-08-04T16:58:22.779Z
2017-08-04T17:28:44.816Z
2017-08-04T16:58:22.779Z
1788411
2017-08-04T16:58:56.405Z
2017-08-04T17:28:44.816Z
2017-08-04T16:58:56.405Z
991521
2017-08-04T17:12:13.295Z
2017-08-04T17:28:44.816Z
2017-08-04T17:12:13.295Z
783480
2017-08-04T17:15:41.336Z
2017-08-04T17:28:44.816Z
2017-08-04T17:15:41.336Z
610957
2017-08-04T17:18:33.859Z
2017-08-04T17:28:44.816Z
2017-08-04T17:18:33.859Z
504657
2017-08-04T17:20:20.159Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:20.202Z
503542
2017-08-04T17:20:21.274Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:21.578Z
501659
2017-08-04T17:20:23.157Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:23.200Z
500934
2017-08-04T17:20:23.882Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:25.930Z
497734
2017-08-04T17:20:27.082Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:29.472Z
493936
2017-08-04T17:20:30.880Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:34.170Z
489662
2017-08-04T17:20:35.154Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:35.154Z
486251
2017-08-04T17:20:38.565Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:38.651Z
481904
2017-08-04T17:20:42.912Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:43.040Z
477915
2017-08-04T17:20:46.901Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:47.072Z
476379
2017-08-04T17:20:48.437Z
2017-08-04T17:28:44.816Z
2017-08-04T17:20:48.522Z
464554
2017-08-04T17:21:00.262Z
2017-08-04T17:28:44.816Z
2017-08-04T17:21:00.646Z
456554
2017-08-04T17:21:08.262Z
2017-08-04T17:28:44.816Z
2017-08-04T17:21:08.304Z
70009
2017-08-04T17:27:34.807Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:34.807Z
65460
2017-08-04T17:27:39.356Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:39.356Z
63029
2017-08-04T17:27:41.787Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:42.043Z
58554
2017-08-04T17:27:46.262Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:46.306Z
57530
2017-08-04T17:27:47.286Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:47.675Z
54468
2017-08-04T17:27:50.348Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:50.348Z
52525
2017-08-04T17:27:52.291Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:52.333Z
50760
2017-08-04T17:27:54.056Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:55.438Z
48738
2017-08-04T17:27:56.078Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:56.120Z
48056
2017-08-04T17:27:56.760Z
2017-08-04T17:28:44.816Z
2017-08-04T17:27:56.760Z
47069
2017-08-04T17:27:57.747Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:00.004Z
42460
2017-08-04T17:28:02.356Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:02.569Z
40534
2017-08-04T17:28:04.282Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:05.801Z
37879
2017-08-04T17:28:06.937Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:07.150Z
33388
2017-08-04T17:28:11.428Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:11.474Z
31372
2017-08-04T17:28:13.444Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:13.444Z
24479
2017-08-04T17:28:20.337Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:20.337Z
23776
2017-08-04T17:28:21.040Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:21.040Z
11392
2017-08-04T17:28:33.424Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:33.424Z
7902
2017-08-04T17:28:36.914Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:36.958Z
5623
2017-08-04T17:28:39.193Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:39.193Z
0
2017-08-04T17:28:44.816Z
2017-08-04T17:28:44.816Z
2017-08-04T17:28:44.855Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:23:50.071Z 2017-08-04T17:28:50.071Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aed23fdd10ba54f6f9d2,
       participant: 'dog',
       turns: 0.4358974358974359 },
     { _id: 5984aed23fdd10ba54f6f9d1,
       participant: 'jordan',
       turns: 0.5641025641025641 } ],
  meeting: 'no',
  transitions: 29,
  timestamp: 2017-08-04T17:28:50.075Z,
  from: 2017-08-04T17:23:50.071Z,
  to: 2017-08-04T17:28:50.071Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aed23fdd10ba54f6f9d2,
       participant: 'dog',
       turns: 0.4358974358974359 },
     { _id: 5984aed23fdd10ba54f6f9d1,
       participant: 'jordan',
       turns: 0.5641025641025641 } ],
  meeting: 'no',
  transitions: 29,
  timestamp: 2017-08-04T17:28:50.075Z,
  from: 2017-08-04T17:23:50.071Z,
  to: 2017-08-04T17:28:50.071Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:23:55.075Z 2017-08-04T17:28:55.075Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aed73fdd10ba54f6f9d4,
       participant: 'dog',
       turns: 0.4358974358974359 },
     { _id: 5984aed73fdd10ba54f6f9d3,
       participant: 'jordan',
       turns: 0.5641025641025641 } ],
  meeting: 'no',
  transitions: 29,
  timestamp: 2017-08-04T17:28:55.086Z,
  from: 2017-08-04T17:23:55.075Z,
  to: 2017-08-04T17:28:55.075Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aed73fdd10ba54f6f9d4,
       participant: 'dog',
       turns: 0.4358974358974359 },
     { _id: 5984aed73fdd10ba54f6f9d3,
       participant: 'jordan',
       turns: 0.5641025641025641 } ],
  meeting: 'no',
  transitions: 29,
  timestamp: 2017-08-04T17:28:55.086Z,
  from: 2017-08-04T17:23:55.075Z,
  to: 2017-08-04T17:28:55.075Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: utterances found: 18
81879
2017-08-04T17:27:33.842Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:33.842Z
76345
2017-08-04T17:27:39.376Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:39.975Z
74297
2017-08-04T17:27:41.424Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:42.961Z
72120
2017-08-04T17:27:43.601Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:45.489Z
69411
2017-08-04T17:27:46.310Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:46.397Z
68252
2017-08-04T17:27:47.469Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:47.723Z
65368
2017-08-04T17:27:50.353Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:51.128Z
63468
2017-08-04T17:27:52.253Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:52.517Z
61660
2017-08-04T17:27:54.061Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:54.147Z
59643
2017-08-04T17:27:56.078Z
2017-08-04T17:28:55.721Z
2017-08-04T17:27:56.078Z
56502
2017-08-04T17:27:59.219Z
2017-08-04T17:28:55.721Z
2017-08-04T17:28:00.008Z
51478
2017-08-04T17:28:04.243Z
2017-08-04T17:28:55.721Z
2017-08-04T17:28:05.797Z
48752
2017-08-04T17:28:06.969Z
2017-08-04T17:28:55.721Z
2017-08-04T17:28:07.358Z
42389
2017-08-04T17:28:13.332Z
2017-08-04T17:28:55.721Z
2017-08-04T17:28:13.673Z
26198
2017-08-04T17:28:29.523Z
2017-08-04T17:28:55.721Z
2017-08-04T17:28:29.567Z
16930
2017-08-04T17:28:38.791Z
2017-08-04T17:28:55.721Z
2017-08-04T17:28:38.962Z
10924
2017-08-04T17:28:44.797Z
2017-08-04T17:28:55.721Z
2017-08-04T17:28:44.797Z
0
2017-08-04T17:28:55.721Z
2017-08-04T17:28:55.721Z
2017-08-04T17:28:55.721Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 64
5161692
2017-08-04T16:02:53.992Z
2017-08-04T17:28:55.684Z
2017-08-04T16:02:55.016Z
5087472
2017-08-04T16:04:08.212Z
2017-08-04T17:28:55.684Z
2017-08-04T16:04:09.113Z
5075748
2017-08-04T16:04:19.936Z
2017-08-04T17:28:55.684Z
2017-08-04T16:04:19.936Z
5054151
2017-08-04T16:04:41.533Z
2017-08-04T17:28:55.684Z
2017-08-04T16:04:41.533Z
5024447
2017-08-04T16:05:11.237Z
2017-08-04T17:28:55.684Z
2017-08-04T16:05:11.842Z
3459932
2017-08-04T16:31:15.752Z
2017-08-04T17:28:55.684Z
2017-08-04T16:31:16.861Z
3186125
2017-08-04T16:35:49.559Z
2017-08-04T17:28:55.684Z
2017-08-04T16:35:49.559Z
2826761
2017-08-04T16:41:48.923Z
2017-08-04T17:28:55.684Z
2017-08-04T16:41:48.923Z
2816276
2017-08-04T16:41:59.408Z
2017-08-04T17:28:55.684Z
2017-08-04T16:41:59.408Z
2799496
2017-08-04T16:42:16.188Z
2017-08-04T17:28:55.684Z
2017-08-04T16:42:16.657Z
2597914
2017-08-04T16:45:37.770Z
2017-08-04T17:28:55.684Z
2017-08-04T16:45:37.983Z
2594501
2017-08-04T16:45:41.183Z
2017-08-04T17:28:55.684Z
2017-08-04T16:45:41.268Z
2592837
2017-08-04T16:45:42.847Z
2017-08-04T17:28:55.684Z
2017-08-04T16:45:42.847Z
2591087
2017-08-04T16:45:44.597Z
2017-08-04T17:28:55.684Z
2017-08-04T16:45:44.597Z
2566515
2017-08-04T16:46:09.169Z
2017-08-04T17:28:55.684Z
2017-08-04T16:46:09.169Z
2497463
2017-08-04T16:47:18.221Z
2017-08-04T17:28:55.684Z
2017-08-04T16:47:19.117Z
2481692
2017-08-04T16:47:33.992Z
2017-08-04T17:28:55.684Z
2017-08-04T16:47:33.992Z
2480881
2017-08-04T16:47:34.803Z
2017-08-04T17:28:55.684Z
2017-08-04T16:47:35.368Z
2477713
2017-08-04T16:47:37.971Z
2017-08-04T17:28:55.684Z
2017-08-04T16:47:38.227Z
2467894
2017-08-04T16:47:47.790Z
2017-08-04T17:28:55.684Z
2017-08-04T16:47:49.155Z
2463670
2017-08-04T16:47:52.014Z
2017-08-04T17:28:55.684Z
2017-08-04T16:47:56.195Z
2458592
2017-08-04T16:47:57.092Z
2017-08-04T17:28:55.684Z
2017-08-04T16:47:57.219Z
1984074
2017-08-04T16:55:51.610Z
2017-08-04T17:28:55.684Z
2017-08-04T16:55:52.122Z
1832905
2017-08-04T16:58:22.779Z
2017-08-04T17:28:55.684Z
2017-08-04T16:58:22.779Z
1799279
2017-08-04T16:58:56.405Z
2017-08-04T17:28:55.684Z
2017-08-04T16:58:56.405Z
1002389
2017-08-04T17:12:13.295Z
2017-08-04T17:28:55.684Z
2017-08-04T17:12:13.295Z
794348
2017-08-04T17:15:41.336Z
2017-08-04T17:28:55.684Z
2017-08-04T17:15:41.336Z
621825
2017-08-04T17:18:33.859Z
2017-08-04T17:28:55.684Z
2017-08-04T17:18:33.859Z
515525
2017-08-04T17:20:20.159Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:20.202Z
514410
2017-08-04T17:20:21.274Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:21.578Z
512527
2017-08-04T17:20:23.157Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:23.200Z
511802
2017-08-04T17:20:23.882Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:25.930Z
508602
2017-08-04T17:20:27.082Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:29.472Z
504804
2017-08-04T17:20:30.880Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:34.170Z
500530
2017-08-04T17:20:35.154Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:35.154Z
497119
2017-08-04T17:20:38.565Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:38.651Z
492772
2017-08-04T17:20:42.912Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:43.040Z
488783
2017-08-04T17:20:46.901Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:47.072Z
487247
2017-08-04T17:20:48.437Z
2017-08-04T17:28:55.684Z
2017-08-04T17:20:48.522Z
475422
2017-08-04T17:21:00.262Z
2017-08-04T17:28:55.684Z
2017-08-04T17:21:00.646Z
467422
2017-08-04T17:21:08.262Z
2017-08-04T17:28:55.684Z
2017-08-04T17:21:08.304Z
80877
2017-08-04T17:27:34.807Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:34.807Z
76328
2017-08-04T17:27:39.356Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:39.356Z
73897
2017-08-04T17:27:41.787Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:42.043Z
69422
2017-08-04T17:27:46.262Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:46.306Z
68398
2017-08-04T17:27:47.286Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:47.675Z
65336
2017-08-04T17:27:50.348Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:50.348Z
63393
2017-08-04T17:27:52.291Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:52.333Z
61628
2017-08-04T17:27:54.056Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:55.438Z
59606
2017-08-04T17:27:56.078Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:56.120Z
58924
2017-08-04T17:27:56.760Z
2017-08-04T17:28:55.684Z
2017-08-04T17:27:56.760Z
57937
2017-08-04T17:27:57.747Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:00.004Z
53328
2017-08-04T17:28:02.356Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:02.569Z
51402
2017-08-04T17:28:04.282Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:05.801Z
48747
2017-08-04T17:28:06.937Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:07.150Z
44256
2017-08-04T17:28:11.428Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:11.474Z
42240
2017-08-04T17:28:13.444Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:13.444Z
35347
2017-08-04T17:28:20.337Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:20.337Z
34644
2017-08-04T17:28:21.040Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:21.040Z
22260
2017-08-04T17:28:33.424Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:33.424Z
18770
2017-08-04T17:28:36.914Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:36.958Z
16491
2017-08-04T17:28:39.193Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:39.193Z
10868
2017-08-04T17:28:44.816Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:44.855Z
0
2017-08-04T17:28:55.684Z
2017-08-04T17:28:55.684Z
2017-08-04T17:28:55.727Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: meeting joined event: participant=meep, name=meep, participants=[participant=dog, participant=jordan, participant=meep], meeting=no, meetingUrl=http://localhost:3001/?user=meep&room=no, consent=true, consentDate=2017-08-04T17:28:57.333Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzczNiwiZXhwIjoxNTg4MjY3NzM2LCJpc3MiOiJmZWF0aGVycyJ9.xekpgUz08tR6h21d7ZZcLdYOPo7KWXGiekEmDP4uD8w
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'meep',
     name: 'meep',
     participants: [ [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=meep&room=no',
     consent: true,
     consentDate: '2017-08-04T17:28:57.333Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2NzczNiwiZXhwIjoxNTg4MjY3NzM2LCJpc3MiOiJmZWF0aGVycyJ9.xekpgUz08tR6h21d7ZZcLdYOPo7KWXGiekEmDP4uD8w' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'dog', 'jordan', 'meep' ]
patching meeting { participants: [ 'dog', 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'dog', 'jordan', 'meep' ]
info: not adding participant: { participants: [ 'dog', 'jordan', 'meep' ],
  lastUpdated: 2017-08-04T17:28:58.023Z } no
updated meeting with participants { participants: [ 'dog', 'jordan', 'meep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep' ],
  _id: 5984aeda3fdd10ba54f6f9d7,
  timestamp: 2017-08-04T17:28:58.028Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep' ],
  _id: 5984aeda3fdd10ba54f6f9d7,
  timestamp: 2017-08-04T17:28:58.028Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep' ],
  _id: 5984aeda3fdd10ba54f6f9d7,
  timestamp: 2017-08-04T17:28:58.028Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 19
84968
2017-08-04T17:27:33.842Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:33.842Z
79434
2017-08-04T17:27:39.376Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:39.975Z
77386
2017-08-04T17:27:41.424Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:42.961Z
75209
2017-08-04T17:27:43.601Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:45.489Z
72500
2017-08-04T17:27:46.310Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:46.397Z
71341
2017-08-04T17:27:47.469Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:47.723Z
68457
2017-08-04T17:27:50.353Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:51.128Z
66557
2017-08-04T17:27:52.253Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:52.517Z
64749
2017-08-04T17:27:54.061Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:54.147Z
62732
2017-08-04T17:27:56.078Z
2017-08-04T17:28:58.810Z
2017-08-04T17:27:56.078Z
59591
2017-08-04T17:27:59.219Z
2017-08-04T17:28:58.810Z
2017-08-04T17:28:00.008Z
54567
2017-08-04T17:28:04.243Z
2017-08-04T17:28:58.810Z
2017-08-04T17:28:05.797Z
51841
2017-08-04T17:28:06.969Z
2017-08-04T17:28:58.810Z
2017-08-04T17:28:07.358Z
45478
2017-08-04T17:28:13.332Z
2017-08-04T17:28:58.810Z
2017-08-04T17:28:13.673Z
29287
2017-08-04T17:28:29.523Z
2017-08-04T17:28:58.810Z
2017-08-04T17:28:29.567Z
20019
2017-08-04T17:28:38.791Z
2017-08-04T17:28:58.810Z
2017-08-04T17:28:38.962Z
14013
2017-08-04T17:28:44.797Z
2017-08-04T17:28:58.810Z
2017-08-04T17:28:44.797Z
3089
2017-08-04T17:28:55.721Z
2017-08-04T17:28:58.810Z
2017-08-04T17:28:55.721Z
0
2017-08-04T17:28:58.810Z
2017-08-04T17:28:58.810Z
2017-08-04T17:28:58.810Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 65
5164775
2017-08-04T16:02:53.992Z
2017-08-04T17:28:58.767Z
2017-08-04T16:02:55.016Z
5090555
2017-08-04T16:04:08.212Z
2017-08-04T17:28:58.767Z
2017-08-04T16:04:09.113Z
5078831
2017-08-04T16:04:19.936Z
2017-08-04T17:28:58.767Z
2017-08-04T16:04:19.936Z
5057234
2017-08-04T16:04:41.533Z
2017-08-04T17:28:58.767Z
2017-08-04T16:04:41.533Z
5027530
2017-08-04T16:05:11.237Z
2017-08-04T17:28:58.767Z
2017-08-04T16:05:11.842Z
3463015
2017-08-04T16:31:15.752Z
2017-08-04T17:28:58.767Z
2017-08-04T16:31:16.861Z
3189208
2017-08-04T16:35:49.559Z
2017-08-04T17:28:58.767Z
2017-08-04T16:35:49.559Z
2829844
2017-08-04T16:41:48.923Z
2017-08-04T17:28:58.767Z
2017-08-04T16:41:48.923Z
2819359
2017-08-04T16:41:59.408Z
2017-08-04T17:28:58.767Z
2017-08-04T16:41:59.408Z
2802579
2017-08-04T16:42:16.188Z
2017-08-04T17:28:58.767Z
2017-08-04T16:42:16.657Z
2600997
2017-08-04T16:45:37.770Z
2017-08-04T17:28:58.767Z
2017-08-04T16:45:37.983Z
2597584
2017-08-04T16:45:41.183Z
2017-08-04T17:28:58.767Z
2017-08-04T16:45:41.268Z
2595920
2017-08-04T16:45:42.847Z
2017-08-04T17:28:58.767Z
2017-08-04T16:45:42.847Z
2594170
2017-08-04T16:45:44.597Z
2017-08-04T17:28:58.767Z
2017-08-04T16:45:44.597Z
2569598
2017-08-04T16:46:09.169Z
2017-08-04T17:28:58.767Z
2017-08-04T16:46:09.169Z
2500546
2017-08-04T16:47:18.221Z
2017-08-04T17:28:58.767Z
2017-08-04T16:47:19.117Z
2484775
2017-08-04T16:47:33.992Z
2017-08-04T17:28:58.767Z
2017-08-04T16:47:33.992Z
2483964
2017-08-04T16:47:34.803Z
2017-08-04T17:28:58.767Z
2017-08-04T16:47:35.368Z
2480796
2017-08-04T16:47:37.971Z
2017-08-04T17:28:58.767Z
2017-08-04T16:47:38.227Z
2470977
2017-08-04T16:47:47.790Z
2017-08-04T17:28:58.767Z
2017-08-04T16:47:49.155Z
2466753
2017-08-04T16:47:52.014Z
2017-08-04T17:28:58.767Z
2017-08-04T16:47:56.195Z
2461675
2017-08-04T16:47:57.092Z
2017-08-04T17:28:58.767Z
2017-08-04T16:47:57.219Z
1987157
2017-08-04T16:55:51.610Z
2017-08-04T17:28:58.767Z
2017-08-04T16:55:52.122Z
1835988
2017-08-04T16:58:22.779Z
2017-08-04T17:28:58.767Z
2017-08-04T16:58:22.779Z
1802362
2017-08-04T16:58:56.405Z
2017-08-04T17:28:58.767Z
2017-08-04T16:58:56.405Z
1005472
2017-08-04T17:12:13.295Z
2017-08-04T17:28:58.767Z
2017-08-04T17:12:13.295Z
797431
2017-08-04T17:15:41.336Z
2017-08-04T17:28:58.767Z
2017-08-04T17:15:41.336Z
624908
2017-08-04T17:18:33.859Z
2017-08-04T17:28:58.767Z
2017-08-04T17:18:33.859Z
518608
2017-08-04T17:20:20.159Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:20.202Z
517493
2017-08-04T17:20:21.274Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:21.578Z
515610
2017-08-04T17:20:23.157Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:23.200Z
514885
2017-08-04T17:20:23.882Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:25.930Z
511685
2017-08-04T17:20:27.082Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:29.472Z
507887
2017-08-04T17:20:30.880Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:34.170Z
503613
2017-08-04T17:20:35.154Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:35.154Z
500202
2017-08-04T17:20:38.565Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:38.651Z
495855
2017-08-04T17:20:42.912Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:43.040Z
491866
2017-08-04T17:20:46.901Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:47.072Z
490330
2017-08-04T17:20:48.437Z
2017-08-04T17:28:58.767Z
2017-08-04T17:20:48.522Z
478505
2017-08-04T17:21:00.262Z
2017-08-04T17:28:58.767Z
2017-08-04T17:21:00.646Z
470505
2017-08-04T17:21:08.262Z
2017-08-04T17:28:58.767Z
2017-08-04T17:21:08.304Z
83960
2017-08-04T17:27:34.807Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:34.807Z
79411
2017-08-04T17:27:39.356Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:39.356Z
76980
2017-08-04T17:27:41.787Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:42.043Z
72505
2017-08-04T17:27:46.262Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:46.306Z
71481
2017-08-04T17:27:47.286Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:47.675Z
68419
2017-08-04T17:27:50.348Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:50.348Z
66476
2017-08-04T17:27:52.291Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:52.333Z
64711
2017-08-04T17:27:54.056Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:55.438Z
62689
2017-08-04T17:27:56.078Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:56.120Z
62007
2017-08-04T17:27:56.760Z
2017-08-04T17:28:58.767Z
2017-08-04T17:27:56.760Z
61020
2017-08-04T17:27:57.747Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:00.004Z
56411
2017-08-04T17:28:02.356Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:02.569Z
54485
2017-08-04T17:28:04.282Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:05.801Z
51830
2017-08-04T17:28:06.937Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:07.150Z
47339
2017-08-04T17:28:11.428Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:11.474Z
45323
2017-08-04T17:28:13.444Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:13.444Z
38430
2017-08-04T17:28:20.337Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:20.337Z
37727
2017-08-04T17:28:21.040Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:21.040Z
25343
2017-08-04T17:28:33.424Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:33.424Z
21853
2017-08-04T17:28:36.914Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:36.958Z
19574
2017-08-04T17:28:39.193Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:39.193Z
13951
2017-08-04T17:28:44.816Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:44.855Z
3083
2017-08-04T17:28:55.684Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:55.727Z
0
2017-08-04T17:28:58.767Z
2017-08-04T17:28:58.767Z
2017-08-04T17:28:58.810Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:24:00.081Z 2017-08-04T17:29:00.081Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aedc3fdd10ba54f6f9db,
       participant: 'dog',
       turns: 0.4418604651162791 },
     { _id: 5984aedc3fdd10ba54f6f9da,
       participant: 'jordan',
       turns: 0.5581395348837209 } ],
  meeting: 'no',
  transitions: 33,
  timestamp: 2017-08-04T17:29:00.087Z,
  from: 2017-08-04T17:24:00.081Z,
  to: 2017-08-04T17:29:00.081Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aedc3fdd10ba54f6f9db,
       participant: 'dog',
       turns: 0.4418604651162791 },
     { _id: 5984aedc3fdd10ba54f6f9da,
       participant: 'jordan',
       turns: 0.5581395348837209 } ],
  meeting: 'no',
  transitions: 33,
  timestamp: 2017-08-04T17:29:00.087Z,
  from: 2017-08-04T17:24:00.081Z,
  to: 2017-08-04T17:29:00.081Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aedc3fdd10ba54f6f9db,
       participant: 'dog',
       turns: 0.4418604651162791 },
     { _id: 5984aedc3fdd10ba54f6f9da,
       participant: 'jordan',
       turns: 0.5581395348837209 } ],
  meeting: 'no',
  transitions: 33,
  timestamp: 2017-08-04T17:29:00.087Z,
  from: 2017-08-04T17:24:00.081Z,
  to: 2017-08-04T17:29:00.081Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 20
86210
2017-08-04T17:27:33.842Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:33.842Z
80676
2017-08-04T17:27:39.376Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:39.975Z
78628
2017-08-04T17:27:41.424Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:42.961Z
76451
2017-08-04T17:27:43.601Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:45.489Z
73742
2017-08-04T17:27:46.310Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:46.397Z
72583
2017-08-04T17:27:47.469Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:47.723Z
69699
2017-08-04T17:27:50.353Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:51.128Z
67799
2017-08-04T17:27:52.253Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:52.517Z
65991
2017-08-04T17:27:54.061Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:54.147Z
63974
2017-08-04T17:27:56.078Z
2017-08-04T17:29:00.052Z
2017-08-04T17:27:56.078Z
60833
2017-08-04T17:27:59.219Z
2017-08-04T17:29:00.052Z
2017-08-04T17:28:00.008Z
55809
2017-08-04T17:28:04.243Z
2017-08-04T17:29:00.052Z
2017-08-04T17:28:05.797Z
53083
2017-08-04T17:28:06.969Z
2017-08-04T17:29:00.052Z
2017-08-04T17:28:07.358Z
46720
2017-08-04T17:28:13.332Z
2017-08-04T17:29:00.052Z
2017-08-04T17:28:13.673Z
30529
2017-08-04T17:28:29.523Z
2017-08-04T17:29:00.052Z
2017-08-04T17:28:29.567Z
21261
2017-08-04T17:28:38.791Z
2017-08-04T17:29:00.052Z
2017-08-04T17:28:38.962Z
15255
2017-08-04T17:28:44.797Z
2017-08-04T17:29:00.052Z
2017-08-04T17:28:44.797Z
4331
2017-08-04T17:28:55.721Z
2017-08-04T17:29:00.052Z
2017-08-04T17:28:55.721Z
1242
2017-08-04T17:28:58.810Z
2017-08-04T17:29:00.052Z
2017-08-04T17:28:58.810Z
0
2017-08-04T17:29:00.052Z
2017-08-04T17:29:00.052Z
2017-08-04T17:29:00.095Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 66
5166065
2017-08-04T16:02:53.992Z
2017-08-04T17:29:00.057Z
2017-08-04T16:02:55.016Z
5091845
2017-08-04T16:04:08.212Z
2017-08-04T17:29:00.057Z
2017-08-04T16:04:09.113Z
5080121
2017-08-04T16:04:19.936Z
2017-08-04T17:29:00.057Z
2017-08-04T16:04:19.936Z
5058524
2017-08-04T16:04:41.533Z
2017-08-04T17:29:00.057Z
2017-08-04T16:04:41.533Z
5028820
2017-08-04T16:05:11.237Z
2017-08-04T17:29:00.057Z
2017-08-04T16:05:11.842Z
3464305
2017-08-04T16:31:15.752Z
2017-08-04T17:29:00.057Z
2017-08-04T16:31:16.861Z
3190498
2017-08-04T16:35:49.559Z
2017-08-04T17:29:00.057Z
2017-08-04T16:35:49.559Z
2831134
2017-08-04T16:41:48.923Z
2017-08-04T17:29:00.057Z
2017-08-04T16:41:48.923Z
2820649
2017-08-04T16:41:59.408Z
2017-08-04T17:29:00.057Z
2017-08-04T16:41:59.408Z
2803869
2017-08-04T16:42:16.188Z
2017-08-04T17:29:00.057Z
2017-08-04T16:42:16.657Z
2602287
2017-08-04T16:45:37.770Z
2017-08-04T17:29:00.057Z
2017-08-04T16:45:37.983Z
2598874
2017-08-04T16:45:41.183Z
2017-08-04T17:29:00.057Z
2017-08-04T16:45:41.268Z
2597210
2017-08-04T16:45:42.847Z
2017-08-04T17:29:00.057Z
2017-08-04T16:45:42.847Z
2595460
2017-08-04T16:45:44.597Z
2017-08-04T17:29:00.057Z
2017-08-04T16:45:44.597Z
2570888
2017-08-04T16:46:09.169Z
2017-08-04T17:29:00.057Z
2017-08-04T16:46:09.169Z
2501836
2017-08-04T16:47:18.221Z
2017-08-04T17:29:00.057Z
2017-08-04T16:47:19.117Z
2486065
2017-08-04T16:47:33.992Z
2017-08-04T17:29:00.057Z
2017-08-04T16:47:33.992Z
2485254
2017-08-04T16:47:34.803Z
2017-08-04T17:29:00.057Z
2017-08-04T16:47:35.368Z
2482086
2017-08-04T16:47:37.971Z
2017-08-04T17:29:00.057Z
2017-08-04T16:47:38.227Z
2472267
2017-08-04T16:47:47.790Z
2017-08-04T17:29:00.057Z
2017-08-04T16:47:49.155Z
2468043
2017-08-04T16:47:52.014Z
2017-08-04T17:29:00.057Z
2017-08-04T16:47:56.195Z
2462965
2017-08-04T16:47:57.092Z
2017-08-04T17:29:00.057Z
2017-08-04T16:47:57.219Z
1988447
2017-08-04T16:55:51.610Z
2017-08-04T17:29:00.057Z
2017-08-04T16:55:52.122Z
1837278
2017-08-04T16:58:22.779Z
2017-08-04T17:29:00.057Z
2017-08-04T16:58:22.779Z
1803652
2017-08-04T16:58:56.405Z
2017-08-04T17:29:00.057Z
2017-08-04T16:58:56.405Z
1006762
2017-08-04T17:12:13.295Z
2017-08-04T17:29:00.057Z
2017-08-04T17:12:13.295Z
798721
2017-08-04T17:15:41.336Z
2017-08-04T17:29:00.057Z
2017-08-04T17:15:41.336Z
626198
2017-08-04T17:18:33.859Z
2017-08-04T17:29:00.057Z
2017-08-04T17:18:33.859Z
519898
2017-08-04T17:20:20.159Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:20.202Z
518783
2017-08-04T17:20:21.274Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:21.578Z
516900
2017-08-04T17:20:23.157Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:23.200Z
516175
2017-08-04T17:20:23.882Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:25.930Z
512975
2017-08-04T17:20:27.082Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:29.472Z
509177
2017-08-04T17:20:30.880Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:34.170Z
504903
2017-08-04T17:20:35.154Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:35.154Z
501492
2017-08-04T17:20:38.565Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:38.651Z
497145
2017-08-04T17:20:42.912Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:43.040Z
493156
2017-08-04T17:20:46.901Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:47.072Z
491620
2017-08-04T17:20:48.437Z
2017-08-04T17:29:00.057Z
2017-08-04T17:20:48.522Z
479795
2017-08-04T17:21:00.262Z
2017-08-04T17:29:00.057Z
2017-08-04T17:21:00.646Z
471795
2017-08-04T17:21:08.262Z
2017-08-04T17:29:00.057Z
2017-08-04T17:21:08.304Z
85250
2017-08-04T17:27:34.807Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:34.807Z
80701
2017-08-04T17:27:39.356Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:39.356Z
78270
2017-08-04T17:27:41.787Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:42.043Z
73795
2017-08-04T17:27:46.262Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:46.306Z
72771
2017-08-04T17:27:47.286Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:47.675Z
69709
2017-08-04T17:27:50.348Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:50.348Z
67766
2017-08-04T17:27:52.291Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:52.333Z
66001
2017-08-04T17:27:54.056Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:55.438Z
63979
2017-08-04T17:27:56.078Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:56.120Z
63297
2017-08-04T17:27:56.760Z
2017-08-04T17:29:00.057Z
2017-08-04T17:27:56.760Z
62310
2017-08-04T17:27:57.747Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:00.004Z
57701
2017-08-04T17:28:02.356Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:02.569Z
55775
2017-08-04T17:28:04.282Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:05.801Z
53120
2017-08-04T17:28:06.937Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:07.150Z
48629
2017-08-04T17:28:11.428Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:11.474Z
46613
2017-08-04T17:28:13.444Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:13.444Z
39720
2017-08-04T17:28:20.337Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:20.337Z
39017
2017-08-04T17:28:21.040Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:21.040Z
26633
2017-08-04T17:28:33.424Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:33.424Z
23143
2017-08-04T17:28:36.914Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:36.958Z
20864
2017-08-04T17:28:39.193Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:39.193Z
15241
2017-08-04T17:28:44.816Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:44.855Z
4373
2017-08-04T17:28:55.684Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:55.727Z
1290
2017-08-04T17:28:58.767Z
2017-08-04T17:29:00.057Z
2017-08-04T17:28:58.810Z
0
2017-08-04T17:29:00.057Z
2017-08-04T17:29:00.057Z
2017-08-04T17:29:00.357Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 67
5167185
2017-08-04T16:02:53.992Z
2017-08-04T17:29:01.177Z
2017-08-04T16:02:55.016Z
5092965
2017-08-04T16:04:08.212Z
2017-08-04T17:29:01.177Z
2017-08-04T16:04:09.113Z
5081241
2017-08-04T16:04:19.936Z
2017-08-04T17:29:01.177Z
2017-08-04T16:04:19.936Z
5059644
2017-08-04T16:04:41.533Z
2017-08-04T17:29:01.177Z
2017-08-04T16:04:41.533Z
5029940
2017-08-04T16:05:11.237Z
2017-08-04T17:29:01.177Z
2017-08-04T16:05:11.842Z
3465425
2017-08-04T16:31:15.752Z
2017-08-04T17:29:01.177Z
2017-08-04T16:31:16.861Z
3191618
2017-08-04T16:35:49.559Z
2017-08-04T17:29:01.177Z
2017-08-04T16:35:49.559Z
2832254
2017-08-04T16:41:48.923Z
2017-08-04T17:29:01.177Z
2017-08-04T16:41:48.923Z
2821769
2017-08-04T16:41:59.408Z
2017-08-04T17:29:01.177Z
2017-08-04T16:41:59.408Z
2804989
2017-08-04T16:42:16.188Z
2017-08-04T17:29:01.177Z
2017-08-04T16:42:16.657Z
2603407
2017-08-04T16:45:37.770Z
2017-08-04T17:29:01.177Z
2017-08-04T16:45:37.983Z
2599994
2017-08-04T16:45:41.183Z
2017-08-04T17:29:01.177Z
2017-08-04T16:45:41.268Z
2598330
2017-08-04T16:45:42.847Z
2017-08-04T17:29:01.177Z
2017-08-04T16:45:42.847Z
2596580
2017-08-04T16:45:44.597Z
2017-08-04T17:29:01.177Z
2017-08-04T16:45:44.597Z
2572008
2017-08-04T16:46:09.169Z
2017-08-04T17:29:01.177Z
2017-08-04T16:46:09.169Z
2502956
2017-08-04T16:47:18.221Z
2017-08-04T17:29:01.177Z
2017-08-04T16:47:19.117Z
2487185
2017-08-04T16:47:33.992Z
2017-08-04T17:29:01.177Z
2017-08-04T16:47:33.992Z
2486374
2017-08-04T16:47:34.803Z
2017-08-04T17:29:01.177Z
2017-08-04T16:47:35.368Z
2483206
2017-08-04T16:47:37.971Z
2017-08-04T17:29:01.177Z
2017-08-04T16:47:38.227Z
2473387
2017-08-04T16:47:47.790Z
2017-08-04T17:29:01.177Z
2017-08-04T16:47:49.155Z
2469163
2017-08-04T16:47:52.014Z
2017-08-04T17:29:01.177Z
2017-08-04T16:47:56.195Z
2464085
2017-08-04T16:47:57.092Z
2017-08-04T17:29:01.177Z
2017-08-04T16:47:57.219Z
1989567
2017-08-04T16:55:51.610Z
2017-08-04T17:29:01.177Z
2017-08-04T16:55:52.122Z
1838398
2017-08-04T16:58:22.779Z
2017-08-04T17:29:01.177Z
2017-08-04T16:58:22.779Z
1804772
2017-08-04T16:58:56.405Z
2017-08-04T17:29:01.177Z
2017-08-04T16:58:56.405Z
1007882
2017-08-04T17:12:13.295Z
2017-08-04T17:29:01.177Z
2017-08-04T17:12:13.295Z
799841
2017-08-04T17:15:41.336Z
2017-08-04T17:29:01.177Z
2017-08-04T17:15:41.336Z
627318
2017-08-04T17:18:33.859Z
2017-08-04T17:29:01.177Z
2017-08-04T17:18:33.859Z
521018
2017-08-04T17:20:20.159Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:20.202Z
519903
2017-08-04T17:20:21.274Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:21.578Z
518020
2017-08-04T17:20:23.157Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:23.200Z
517295
2017-08-04T17:20:23.882Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:25.930Z
514095
2017-08-04T17:20:27.082Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:29.472Z
510297
2017-08-04T17:20:30.880Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:34.170Z
506023
2017-08-04T17:20:35.154Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:35.154Z
502612
2017-08-04T17:20:38.565Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:38.651Z
498265
2017-08-04T17:20:42.912Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:43.040Z
494276
2017-08-04T17:20:46.901Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:47.072Z
492740
2017-08-04T17:20:48.437Z
2017-08-04T17:29:01.177Z
2017-08-04T17:20:48.522Z
480915
2017-08-04T17:21:00.262Z
2017-08-04T17:29:01.177Z
2017-08-04T17:21:00.646Z
472915
2017-08-04T17:21:08.262Z
2017-08-04T17:29:01.177Z
2017-08-04T17:21:08.304Z
86370
2017-08-04T17:27:34.807Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:34.807Z
81821
2017-08-04T17:27:39.356Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:39.356Z
79390
2017-08-04T17:27:41.787Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:42.043Z
74915
2017-08-04T17:27:46.262Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:46.306Z
73891
2017-08-04T17:27:47.286Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:47.675Z
70829
2017-08-04T17:27:50.348Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:50.348Z
68886
2017-08-04T17:27:52.291Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:52.333Z
67121
2017-08-04T17:27:54.056Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:55.438Z
65099
2017-08-04T17:27:56.078Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:56.120Z
64417
2017-08-04T17:27:56.760Z
2017-08-04T17:29:01.177Z
2017-08-04T17:27:56.760Z
63430
2017-08-04T17:27:57.747Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:00.004Z
58821
2017-08-04T17:28:02.356Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:02.569Z
56895
2017-08-04T17:28:04.282Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:05.801Z
54240
2017-08-04T17:28:06.937Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:07.150Z
49749
2017-08-04T17:28:11.428Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:11.474Z
47733
2017-08-04T17:28:13.444Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:13.444Z
40840
2017-08-04T17:28:20.337Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:20.337Z
40137
2017-08-04T17:28:21.040Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:21.040Z
27753
2017-08-04T17:28:33.424Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:33.424Z
24263
2017-08-04T17:28:36.914Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:36.958Z
21984
2017-08-04T17:28:39.193Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:39.193Z
16361
2017-08-04T17:28:44.816Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:44.855Z
5493
2017-08-04T17:28:55.684Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:55.727Z
2410
2017-08-04T17:28:58.767Z
2017-08-04T17:29:01.177Z
2017-08-04T17:28:58.810Z
1120
2017-08-04T17:29:00.057Z
2017-08-04T17:29:01.177Z
2017-08-04T17:29:00.357Z
0
2017-08-04T17:29:01.177Z
2017-08-04T17:29:01.177Z
2017-08-04T17:29:01.177Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 2
5034174
2017-08-04T16:05:08.844Z
2017-08-04T17:29:03.018Z
2017-08-04T16:05:09.099Z
0
2017-08-04T17:29:03.018Z
2017-08-04T17:29:03.018Z
2017-08-04T17:29:03.103Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 21
89192
2017-08-04T17:27:33.842Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:33.842Z
83658
2017-08-04T17:27:39.376Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:39.975Z
81610
2017-08-04T17:27:41.424Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:42.961Z
79433
2017-08-04T17:27:43.601Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:45.489Z
76724
2017-08-04T17:27:46.310Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:46.397Z
75565
2017-08-04T17:27:47.469Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:47.723Z
72681
2017-08-04T17:27:50.353Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:51.128Z
70781
2017-08-04T17:27:52.253Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:52.517Z
68973
2017-08-04T17:27:54.061Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:54.147Z
66956
2017-08-04T17:27:56.078Z
2017-08-04T17:29:03.034Z
2017-08-04T17:27:56.078Z
63815
2017-08-04T17:27:59.219Z
2017-08-04T17:29:03.034Z
2017-08-04T17:28:00.008Z
58791
2017-08-04T17:28:04.243Z
2017-08-04T17:29:03.034Z
2017-08-04T17:28:05.797Z
56065
2017-08-04T17:28:06.969Z
2017-08-04T17:29:03.034Z
2017-08-04T17:28:07.358Z
49702
2017-08-04T17:28:13.332Z
2017-08-04T17:29:03.034Z
2017-08-04T17:28:13.673Z
33511
2017-08-04T17:28:29.523Z
2017-08-04T17:29:03.034Z
2017-08-04T17:28:29.567Z
24243
2017-08-04T17:28:38.791Z
2017-08-04T17:29:03.034Z
2017-08-04T17:28:38.962Z
18237
2017-08-04T17:28:44.797Z
2017-08-04T17:29:03.034Z
2017-08-04T17:28:44.797Z
7313
2017-08-04T17:28:55.721Z
2017-08-04T17:29:03.034Z
2017-08-04T17:28:55.721Z
4224
2017-08-04T17:28:58.810Z
2017-08-04T17:29:03.034Z
2017-08-04T17:28:58.810Z
2982
2017-08-04T17:29:00.052Z
2017-08-04T17:29:03.034Z
2017-08-04T17:29:00.095Z
0
2017-08-04T17:29:03.034Z
2017-08-04T17:29:03.034Z
2017-08-04T17:29:03.131Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 68
5169056
2017-08-04T16:02:53.992Z
2017-08-04T17:29:03.048Z
2017-08-04T16:02:55.016Z
5094836
2017-08-04T16:04:08.212Z
2017-08-04T17:29:03.048Z
2017-08-04T16:04:09.113Z
5083112
2017-08-04T16:04:19.936Z
2017-08-04T17:29:03.048Z
2017-08-04T16:04:19.936Z
5061515
2017-08-04T16:04:41.533Z
2017-08-04T17:29:03.048Z
2017-08-04T16:04:41.533Z
5031811
2017-08-04T16:05:11.237Z
2017-08-04T17:29:03.048Z
2017-08-04T16:05:11.842Z
3467296
2017-08-04T16:31:15.752Z
2017-08-04T17:29:03.048Z
2017-08-04T16:31:16.861Z
3193489
2017-08-04T16:35:49.559Z
2017-08-04T17:29:03.048Z
2017-08-04T16:35:49.559Z
2834125
2017-08-04T16:41:48.923Z
2017-08-04T17:29:03.048Z
2017-08-04T16:41:48.923Z
2823640
2017-08-04T16:41:59.408Z
2017-08-04T17:29:03.048Z
2017-08-04T16:41:59.408Z
2806860
2017-08-04T16:42:16.188Z
2017-08-04T17:29:03.048Z
2017-08-04T16:42:16.657Z
2605278
2017-08-04T16:45:37.770Z
2017-08-04T17:29:03.048Z
2017-08-04T16:45:37.983Z
2601865
2017-08-04T16:45:41.183Z
2017-08-04T17:29:03.048Z
2017-08-04T16:45:41.268Z
2600201
2017-08-04T16:45:42.847Z
2017-08-04T17:29:03.048Z
2017-08-04T16:45:42.847Z
2598451
2017-08-04T16:45:44.597Z
2017-08-04T17:29:03.048Z
2017-08-04T16:45:44.597Z
2573879
2017-08-04T16:46:09.169Z
2017-08-04T17:29:03.048Z
2017-08-04T16:46:09.169Z
2504827
2017-08-04T16:47:18.221Z
2017-08-04T17:29:03.048Z
2017-08-04T16:47:19.117Z
2489056
2017-08-04T16:47:33.992Z
2017-08-04T17:29:03.048Z
2017-08-04T16:47:33.992Z
2488245
2017-08-04T16:47:34.803Z
2017-08-04T17:29:03.048Z
2017-08-04T16:47:35.368Z
2485077
2017-08-04T16:47:37.971Z
2017-08-04T17:29:03.048Z
2017-08-04T16:47:38.227Z
2475258
2017-08-04T16:47:47.790Z
2017-08-04T17:29:03.048Z
2017-08-04T16:47:49.155Z
2471034
2017-08-04T16:47:52.014Z
2017-08-04T17:29:03.048Z
2017-08-04T16:47:56.195Z
2465956
2017-08-04T16:47:57.092Z
2017-08-04T17:29:03.048Z
2017-08-04T16:47:57.219Z
1991438
2017-08-04T16:55:51.610Z
2017-08-04T17:29:03.048Z
2017-08-04T16:55:52.122Z
1840269
2017-08-04T16:58:22.779Z
2017-08-04T17:29:03.048Z
2017-08-04T16:58:22.779Z
1806643
2017-08-04T16:58:56.405Z
2017-08-04T17:29:03.048Z
2017-08-04T16:58:56.405Z
1009753
2017-08-04T17:12:13.295Z
2017-08-04T17:29:03.048Z
2017-08-04T17:12:13.295Z
801712
2017-08-04T17:15:41.336Z
2017-08-04T17:29:03.048Z
2017-08-04T17:15:41.336Z
629189
2017-08-04T17:18:33.859Z
2017-08-04T17:29:03.048Z
2017-08-04T17:18:33.859Z
522889
2017-08-04T17:20:20.159Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:20.202Z
521774
2017-08-04T17:20:21.274Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:21.578Z
519891
2017-08-04T17:20:23.157Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:23.200Z
519166
2017-08-04T17:20:23.882Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:25.930Z
515966
2017-08-04T17:20:27.082Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:29.472Z
512168
2017-08-04T17:20:30.880Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:34.170Z
507894
2017-08-04T17:20:35.154Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:35.154Z
504483
2017-08-04T17:20:38.565Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:38.651Z
500136
2017-08-04T17:20:42.912Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:43.040Z
496147
2017-08-04T17:20:46.901Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:47.072Z
494611
2017-08-04T17:20:48.437Z
2017-08-04T17:29:03.048Z
2017-08-04T17:20:48.522Z
482786
2017-08-04T17:21:00.262Z
2017-08-04T17:29:03.048Z
2017-08-04T17:21:00.646Z
474786
2017-08-04T17:21:08.262Z
2017-08-04T17:29:03.048Z
2017-08-04T17:21:08.304Z
88241
2017-08-04T17:27:34.807Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:34.807Z
83692
2017-08-04T17:27:39.356Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:39.356Z
81261
2017-08-04T17:27:41.787Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:42.043Z
76786
2017-08-04T17:27:46.262Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:46.306Z
75762
2017-08-04T17:27:47.286Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:47.675Z
72700
2017-08-04T17:27:50.348Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:50.348Z
70757
2017-08-04T17:27:52.291Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:52.333Z
68992
2017-08-04T17:27:54.056Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:55.438Z
66970
2017-08-04T17:27:56.078Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:56.120Z
66288
2017-08-04T17:27:56.760Z
2017-08-04T17:29:03.048Z
2017-08-04T17:27:56.760Z
65301
2017-08-04T17:27:57.747Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:00.004Z
60692
2017-08-04T17:28:02.356Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:02.569Z
58766
2017-08-04T17:28:04.282Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:05.801Z
56111
2017-08-04T17:28:06.937Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:07.150Z
51620
2017-08-04T17:28:11.428Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:11.474Z
49604
2017-08-04T17:28:13.444Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:13.444Z
42711
2017-08-04T17:28:20.337Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:20.337Z
42008
2017-08-04T17:28:21.040Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:21.040Z
29624
2017-08-04T17:28:33.424Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:33.424Z
26134
2017-08-04T17:28:36.914Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:36.958Z
23855
2017-08-04T17:28:39.193Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:39.193Z
18232
2017-08-04T17:28:44.816Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:44.855Z
7364
2017-08-04T17:28:55.684Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:55.727Z
4281
2017-08-04T17:28:58.767Z
2017-08-04T17:29:03.048Z
2017-08-04T17:28:58.810Z
2991
2017-08-04T17:29:00.057Z
2017-08-04T17:29:03.048Z
2017-08-04T17:29:00.357Z
1871
2017-08-04T17:29:01.177Z
2017-08-04T17:29:03.048Z
2017-08-04T17:29:01.177Z
0
2017-08-04T17:29:03.048Z
2017-08-04T17:29:03.048Z
2017-08-04T17:29:03.142Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 69
5170014
2017-08-04T16:02:53.992Z
2017-08-04T17:29:04.006Z
2017-08-04T16:02:55.016Z
5095794
2017-08-04T16:04:08.212Z
2017-08-04T17:29:04.006Z
2017-08-04T16:04:09.113Z
5084070
2017-08-04T16:04:19.936Z
2017-08-04T17:29:04.006Z
2017-08-04T16:04:19.936Z
5062473
2017-08-04T16:04:41.533Z
2017-08-04T17:29:04.006Z
2017-08-04T16:04:41.533Z
5032769
2017-08-04T16:05:11.237Z
2017-08-04T17:29:04.006Z
2017-08-04T16:05:11.842Z
3468254
2017-08-04T16:31:15.752Z
2017-08-04T17:29:04.006Z
2017-08-04T16:31:16.861Z
3194447
2017-08-04T16:35:49.559Z
2017-08-04T17:29:04.006Z
2017-08-04T16:35:49.559Z
2835083
2017-08-04T16:41:48.923Z
2017-08-04T17:29:04.006Z
2017-08-04T16:41:48.923Z
2824598
2017-08-04T16:41:59.408Z
2017-08-04T17:29:04.006Z
2017-08-04T16:41:59.408Z
2807818
2017-08-04T16:42:16.188Z
2017-08-04T17:29:04.006Z
2017-08-04T16:42:16.657Z
2606236
2017-08-04T16:45:37.770Z
2017-08-04T17:29:04.006Z
2017-08-04T16:45:37.983Z
2602823
2017-08-04T16:45:41.183Z
2017-08-04T17:29:04.006Z
2017-08-04T16:45:41.268Z
2601159
2017-08-04T16:45:42.847Z
2017-08-04T17:29:04.006Z
2017-08-04T16:45:42.847Z
2599409
2017-08-04T16:45:44.597Z
2017-08-04T17:29:04.006Z
2017-08-04T16:45:44.597Z
2574837
2017-08-04T16:46:09.169Z
2017-08-04T17:29:04.006Z
2017-08-04T16:46:09.169Z
2505785
2017-08-04T16:47:18.221Z
2017-08-04T17:29:04.006Z
2017-08-04T16:47:19.117Z
2490014
2017-08-04T16:47:33.992Z
2017-08-04T17:29:04.006Z
2017-08-04T16:47:33.992Z
2489203
2017-08-04T16:47:34.803Z
2017-08-04T17:29:04.006Z
2017-08-04T16:47:35.368Z
2486035
2017-08-04T16:47:37.971Z
2017-08-04T17:29:04.006Z
2017-08-04T16:47:38.227Z
2476216
2017-08-04T16:47:47.790Z
2017-08-04T17:29:04.006Z
2017-08-04T16:47:49.155Z
2471992
2017-08-04T16:47:52.014Z
2017-08-04T17:29:04.006Z
2017-08-04T16:47:56.195Z
2466914
2017-08-04T16:47:57.092Z
2017-08-04T17:29:04.006Z
2017-08-04T16:47:57.219Z
1992396
2017-08-04T16:55:51.610Z
2017-08-04T17:29:04.006Z
2017-08-04T16:55:52.122Z
1841227
2017-08-04T16:58:22.779Z
2017-08-04T17:29:04.006Z
2017-08-04T16:58:22.779Z
1807601
2017-08-04T16:58:56.405Z
2017-08-04T17:29:04.006Z
2017-08-04T16:58:56.405Z
1010711
2017-08-04T17:12:13.295Z
2017-08-04T17:29:04.006Z
2017-08-04T17:12:13.295Z
802670
2017-08-04T17:15:41.336Z
2017-08-04T17:29:04.006Z
2017-08-04T17:15:41.336Z
630147
2017-08-04T17:18:33.859Z
2017-08-04T17:29:04.006Z
2017-08-04T17:18:33.859Z
523847
2017-08-04T17:20:20.159Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:20.202Z
522732
2017-08-04T17:20:21.274Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:21.578Z
520849
2017-08-04T17:20:23.157Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:23.200Z
520124
2017-08-04T17:20:23.882Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:25.930Z
516924
2017-08-04T17:20:27.082Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:29.472Z
513126
2017-08-04T17:20:30.880Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:34.170Z
508852
2017-08-04T17:20:35.154Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:35.154Z
505441
2017-08-04T17:20:38.565Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:38.651Z
501094
2017-08-04T17:20:42.912Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:43.040Z
497105
2017-08-04T17:20:46.901Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:47.072Z
495569
2017-08-04T17:20:48.437Z
2017-08-04T17:29:04.006Z
2017-08-04T17:20:48.522Z
483744
2017-08-04T17:21:00.262Z
2017-08-04T17:29:04.006Z
2017-08-04T17:21:00.646Z
475744
2017-08-04T17:21:08.262Z
2017-08-04T17:29:04.006Z
2017-08-04T17:21:08.304Z
89199
2017-08-04T17:27:34.807Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:34.807Z
84650
2017-08-04T17:27:39.356Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:39.356Z
82219
2017-08-04T17:27:41.787Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:42.043Z
77744
2017-08-04T17:27:46.262Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:46.306Z
76720
2017-08-04T17:27:47.286Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:47.675Z
73658
2017-08-04T17:27:50.348Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:50.348Z
71715
2017-08-04T17:27:52.291Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:52.333Z
69950
2017-08-04T17:27:54.056Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:55.438Z
67928
2017-08-04T17:27:56.078Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:56.120Z
67246
2017-08-04T17:27:56.760Z
2017-08-04T17:29:04.006Z
2017-08-04T17:27:56.760Z
66259
2017-08-04T17:27:57.747Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:00.004Z
61650
2017-08-04T17:28:02.356Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:02.569Z
59724
2017-08-04T17:28:04.282Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:05.801Z
57069
2017-08-04T17:28:06.937Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:07.150Z
52578
2017-08-04T17:28:11.428Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:11.474Z
50562
2017-08-04T17:28:13.444Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:13.444Z
43669
2017-08-04T17:28:20.337Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:20.337Z
42966
2017-08-04T17:28:21.040Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:21.040Z
30582
2017-08-04T17:28:33.424Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:33.424Z
27092
2017-08-04T17:28:36.914Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:36.958Z
24813
2017-08-04T17:28:39.193Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:39.193Z
19190
2017-08-04T17:28:44.816Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:44.855Z
8322
2017-08-04T17:28:55.684Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:55.727Z
5239
2017-08-04T17:28:58.767Z
2017-08-04T17:29:04.006Z
2017-08-04T17:28:58.810Z
3949
2017-08-04T17:29:00.057Z
2017-08-04T17:29:04.006Z
2017-08-04T17:29:00.357Z
2829
2017-08-04T17:29:01.177Z
2017-08-04T17:29:04.006Z
2017-08-04T17:29:01.177Z
958
2017-08-04T17:29:03.048Z
2017-08-04T17:29:04.006Z
2017-08-04T17:29:03.142Z
0
2017-08-04T17:29:04.006Z
2017-08-04T17:29:04.006Z
2017-08-04T17:29:04.006Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:24:05.112Z 2017-08-04T17:29:05.112Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aee13fdd10ba54f6f9e5,
       participant: 'dog',
       turns: 0.42 },
     { _id: 5984aee13fdd10ba54f6f9e4,
       participant: 'jordan',
       turns: 0.56 },
     { _id: 5984aee13fdd10ba54f6f9e3,
       participant: 'meep',
       turns: 0.02 } ],
  meeting: 'no',
  transitions: 38,
  timestamp: 2017-08-04T17:29:05.144Z,
  from: 2017-08-04T17:24:05.112Z,
  to: 2017-08-04T17:29:05.112Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aee13fdd10ba54f6f9e5,
       participant: 'dog',
       turns: 0.42 },
     { _id: 5984aee13fdd10ba54f6f9e4,
       participant: 'jordan',
       turns: 0.56 },
     { _id: 5984aee13fdd10ba54f6f9e3,
       participant: 'meep',
       turns: 0.02 } ],
  meeting: 'no',
  transitions: 38,
  timestamp: 2017-08-04T17:29:05.144Z,
  from: 2017-08-04T17:24:05.112Z,
  to: 2017-08-04T17:29:05.112Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aee13fdd10ba54f6f9e5,
       participant: 'dog',
       turns: 0.42 },
     { _id: 5984aee13fdd10ba54f6f9e4,
       participant: 'jordan',
       turns: 0.56 },
     { _id: 5984aee13fdd10ba54f6f9e3,
       participant: 'meep',
       turns: 0.02 } ],
  meeting: 'no',
  transitions: 38,
  timestamp: 2017-08-04T17:29:05.144Z,
  from: 2017-08-04T17:24:05.112Z,
  to: 2017-08-04T17:29:05.112Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 70
5170973
2017-08-04T16:02:53.992Z
2017-08-04T17:29:04.965Z
2017-08-04T16:02:55.016Z
5096753
2017-08-04T16:04:08.212Z
2017-08-04T17:29:04.965Z
2017-08-04T16:04:09.113Z
5085029
2017-08-04T16:04:19.936Z
2017-08-04T17:29:04.965Z
2017-08-04T16:04:19.936Z
5063432
2017-08-04T16:04:41.533Z
2017-08-04T17:29:04.965Z
2017-08-04T16:04:41.533Z
5033728
2017-08-04T16:05:11.237Z
2017-08-04T17:29:04.965Z
2017-08-04T16:05:11.842Z
3469213
2017-08-04T16:31:15.752Z
2017-08-04T17:29:04.965Z
2017-08-04T16:31:16.861Z
3195406
2017-08-04T16:35:49.559Z
2017-08-04T17:29:04.965Z
2017-08-04T16:35:49.559Z
2836042
2017-08-04T16:41:48.923Z
2017-08-04T17:29:04.965Z
2017-08-04T16:41:48.923Z
2825557
2017-08-04T16:41:59.408Z
2017-08-04T17:29:04.965Z
2017-08-04T16:41:59.408Z
2808777
2017-08-04T16:42:16.188Z
2017-08-04T17:29:04.965Z
2017-08-04T16:42:16.657Z
2607195
2017-08-04T16:45:37.770Z
2017-08-04T17:29:04.965Z
2017-08-04T16:45:37.983Z
2603782
2017-08-04T16:45:41.183Z
2017-08-04T17:29:04.965Z
2017-08-04T16:45:41.268Z
2602118
2017-08-04T16:45:42.847Z
2017-08-04T17:29:04.965Z
2017-08-04T16:45:42.847Z
2600368
2017-08-04T16:45:44.597Z
2017-08-04T17:29:04.965Z
2017-08-04T16:45:44.597Z
2575796
2017-08-04T16:46:09.169Z
2017-08-04T17:29:04.965Z
2017-08-04T16:46:09.169Z
2506744
2017-08-04T16:47:18.221Z
2017-08-04T17:29:04.965Z
2017-08-04T16:47:19.117Z
2490973
2017-08-04T16:47:33.992Z
2017-08-04T17:29:04.965Z
2017-08-04T16:47:33.992Z
2490162
2017-08-04T16:47:34.803Z
2017-08-04T17:29:04.965Z
2017-08-04T16:47:35.368Z
2486994
2017-08-04T16:47:37.971Z
2017-08-04T17:29:04.965Z
2017-08-04T16:47:38.227Z
2477175
2017-08-04T16:47:47.790Z
2017-08-04T17:29:04.965Z
2017-08-04T16:47:49.155Z
2472951
2017-08-04T16:47:52.014Z
2017-08-04T17:29:04.965Z
2017-08-04T16:47:56.195Z
2467873
2017-08-04T16:47:57.092Z
2017-08-04T17:29:04.965Z
2017-08-04T16:47:57.219Z
1993355
2017-08-04T16:55:51.610Z
2017-08-04T17:29:04.965Z
2017-08-04T16:55:52.122Z
1842186
2017-08-04T16:58:22.779Z
2017-08-04T17:29:04.965Z
2017-08-04T16:58:22.779Z
1808560
2017-08-04T16:58:56.405Z
2017-08-04T17:29:04.965Z
2017-08-04T16:58:56.405Z
1011670
2017-08-04T17:12:13.295Z
2017-08-04T17:29:04.965Z
2017-08-04T17:12:13.295Z
803629
2017-08-04T17:15:41.336Z
2017-08-04T17:29:04.965Z
2017-08-04T17:15:41.336Z
631106
2017-08-04T17:18:33.859Z
2017-08-04T17:29:04.965Z
2017-08-04T17:18:33.859Z
524806
2017-08-04T17:20:20.159Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:20.202Z
523691
2017-08-04T17:20:21.274Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:21.578Z
521808
2017-08-04T17:20:23.157Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:23.200Z
521083
2017-08-04T17:20:23.882Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:25.930Z
517883
2017-08-04T17:20:27.082Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:29.472Z
514085
2017-08-04T17:20:30.880Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:34.170Z
509811
2017-08-04T17:20:35.154Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:35.154Z
506400
2017-08-04T17:20:38.565Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:38.651Z
502053
2017-08-04T17:20:42.912Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:43.040Z
498064
2017-08-04T17:20:46.901Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:47.072Z
496528
2017-08-04T17:20:48.437Z
2017-08-04T17:29:04.965Z
2017-08-04T17:20:48.522Z
484703
2017-08-04T17:21:00.262Z
2017-08-04T17:29:04.965Z
2017-08-04T17:21:00.646Z
476703
2017-08-04T17:21:08.262Z
2017-08-04T17:29:04.965Z
2017-08-04T17:21:08.304Z
90158
2017-08-04T17:27:34.807Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:34.807Z
85609
2017-08-04T17:27:39.356Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:39.356Z
83178
2017-08-04T17:27:41.787Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:42.043Z
78703
2017-08-04T17:27:46.262Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:46.306Z
77679
2017-08-04T17:27:47.286Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:47.675Z
74617
2017-08-04T17:27:50.348Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:50.348Z
72674
2017-08-04T17:27:52.291Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:52.333Z
70909
2017-08-04T17:27:54.056Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:55.438Z
68887
2017-08-04T17:27:56.078Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:56.120Z
68205
2017-08-04T17:27:56.760Z
2017-08-04T17:29:04.965Z
2017-08-04T17:27:56.760Z
67218
2017-08-04T17:27:57.747Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:00.004Z
62609
2017-08-04T17:28:02.356Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:02.569Z
60683
2017-08-04T17:28:04.282Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:05.801Z
58028
2017-08-04T17:28:06.937Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:07.150Z
53537
2017-08-04T17:28:11.428Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:11.474Z
51521
2017-08-04T17:28:13.444Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:13.444Z
44628
2017-08-04T17:28:20.337Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:20.337Z
43925
2017-08-04T17:28:21.040Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:21.040Z
31541
2017-08-04T17:28:33.424Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:33.424Z
28051
2017-08-04T17:28:36.914Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:36.958Z
25772
2017-08-04T17:28:39.193Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:39.193Z
20149
2017-08-04T17:28:44.816Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:44.855Z
9281
2017-08-04T17:28:55.684Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:55.727Z
6198
2017-08-04T17:28:58.767Z
2017-08-04T17:29:04.965Z
2017-08-04T17:28:58.810Z
4908
2017-08-04T17:29:00.057Z
2017-08-04T17:29:04.965Z
2017-08-04T17:29:00.357Z
3788
2017-08-04T17:29:01.177Z
2017-08-04T17:29:04.965Z
2017-08-04T17:29:01.177Z
1917
2017-08-04T17:29:03.048Z
2017-08-04T17:29:04.965Z
2017-08-04T17:29:03.142Z
959
2017-08-04T17:29:04.006Z
2017-08-04T17:29:04.965Z
2017-08-04T17:29:04.006Z
0
2017-08-04T17:29:04.965Z
2017-08-04T17:29:04.965Z
2017-08-04T17:29:04.965Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 22
91113
2017-08-04T17:27:33.842Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:33.842Z
85579
2017-08-04T17:27:39.376Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:39.975Z
83531
2017-08-04T17:27:41.424Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:42.961Z
81354
2017-08-04T17:27:43.601Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:45.489Z
78645
2017-08-04T17:27:46.310Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:46.397Z
77486
2017-08-04T17:27:47.469Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:47.723Z
74602
2017-08-04T17:27:50.353Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:51.128Z
72702
2017-08-04T17:27:52.253Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:52.517Z
70894
2017-08-04T17:27:54.061Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:54.147Z
68877
2017-08-04T17:27:56.078Z
2017-08-04T17:29:04.955Z
2017-08-04T17:27:56.078Z
65736
2017-08-04T17:27:59.219Z
2017-08-04T17:29:04.955Z
2017-08-04T17:28:00.008Z
60712
2017-08-04T17:28:04.243Z
2017-08-04T17:29:04.955Z
2017-08-04T17:28:05.797Z
57986
2017-08-04T17:28:06.969Z
2017-08-04T17:29:04.955Z
2017-08-04T17:28:07.358Z
51623
2017-08-04T17:28:13.332Z
2017-08-04T17:29:04.955Z
2017-08-04T17:28:13.673Z
35432
2017-08-04T17:28:29.523Z
2017-08-04T17:29:04.955Z
2017-08-04T17:28:29.567Z
26164
2017-08-04T17:28:38.791Z
2017-08-04T17:29:04.955Z
2017-08-04T17:28:38.962Z
20158
2017-08-04T17:28:44.797Z
2017-08-04T17:29:04.955Z
2017-08-04T17:28:44.797Z
9234
2017-08-04T17:28:55.721Z
2017-08-04T17:29:04.955Z
2017-08-04T17:28:55.721Z
6145
2017-08-04T17:28:58.810Z
2017-08-04T17:29:04.955Z
2017-08-04T17:28:58.810Z
4903
2017-08-04T17:29:00.052Z
2017-08-04T17:29:04.955Z
2017-08-04T17:29:00.095Z
1921
2017-08-04T17:29:03.034Z
2017-08-04T17:29:04.955Z
2017-08-04T17:29:03.131Z
0
2017-08-04T17:29:04.955Z
2017-08-04T17:29:04.955Z
2017-08-04T17:29:05.041Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 3
5037758
2017-08-04T16:05:08.844Z
2017-08-04T17:29:06.602Z
2017-08-04T16:05:09.099Z
3584
2017-08-04T17:29:03.018Z
2017-08-04T17:29:06.602Z
2017-08-04T17:29:03.103Z
0
2017-08-04T17:29:06.602Z
2017-08-04T17:29:06.602Z
2017-08-04T17:29:06.645Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 71
5172399
2017-08-04T16:02:53.992Z
2017-08-04T17:29:06.391Z
2017-08-04T16:02:55.016Z
5098179
2017-08-04T16:04:08.212Z
2017-08-04T17:29:06.391Z
2017-08-04T16:04:09.113Z
5086455
2017-08-04T16:04:19.936Z
2017-08-04T17:29:06.391Z
2017-08-04T16:04:19.936Z
5064858
2017-08-04T16:04:41.533Z
2017-08-04T17:29:06.391Z
2017-08-04T16:04:41.533Z
5035154
2017-08-04T16:05:11.237Z
2017-08-04T17:29:06.391Z
2017-08-04T16:05:11.842Z
3470639
2017-08-04T16:31:15.752Z
2017-08-04T17:29:06.391Z
2017-08-04T16:31:16.861Z
3196832
2017-08-04T16:35:49.559Z
2017-08-04T17:29:06.391Z
2017-08-04T16:35:49.559Z
2837468
2017-08-04T16:41:48.923Z
2017-08-04T17:29:06.391Z
2017-08-04T16:41:48.923Z
2826983
2017-08-04T16:41:59.408Z
2017-08-04T17:29:06.391Z
2017-08-04T16:41:59.408Z
2810203
2017-08-04T16:42:16.188Z
2017-08-04T17:29:06.391Z
2017-08-04T16:42:16.657Z
2608621
2017-08-04T16:45:37.770Z
2017-08-04T17:29:06.391Z
2017-08-04T16:45:37.983Z
2605208
2017-08-04T16:45:41.183Z
2017-08-04T17:29:06.391Z
2017-08-04T16:45:41.268Z
2603544
2017-08-04T16:45:42.847Z
2017-08-04T17:29:06.391Z
2017-08-04T16:45:42.847Z
2601794
2017-08-04T16:45:44.597Z
2017-08-04T17:29:06.391Z
2017-08-04T16:45:44.597Z
2577222
2017-08-04T16:46:09.169Z
2017-08-04T17:29:06.391Z
2017-08-04T16:46:09.169Z
2508170
2017-08-04T16:47:18.221Z
2017-08-04T17:29:06.391Z
2017-08-04T16:47:19.117Z
2492399
2017-08-04T16:47:33.992Z
2017-08-04T17:29:06.391Z
2017-08-04T16:47:33.992Z
2491588
2017-08-04T16:47:34.803Z
2017-08-04T17:29:06.391Z
2017-08-04T16:47:35.368Z
2488420
2017-08-04T16:47:37.971Z
2017-08-04T17:29:06.391Z
2017-08-04T16:47:38.227Z
2478601
2017-08-04T16:47:47.790Z
2017-08-04T17:29:06.391Z
2017-08-04T16:47:49.155Z
2474377
2017-08-04T16:47:52.014Z
2017-08-04T17:29:06.391Z
2017-08-04T16:47:56.195Z
2469299
2017-08-04T16:47:57.092Z
2017-08-04T17:29:06.391Z
2017-08-04T16:47:57.219Z
1994781
2017-08-04T16:55:51.610Z
2017-08-04T17:29:06.391Z
2017-08-04T16:55:52.122Z
1843612
2017-08-04T16:58:22.779Z
2017-08-04T17:29:06.391Z
2017-08-04T16:58:22.779Z
1809986
2017-08-04T16:58:56.405Z
2017-08-04T17:29:06.391Z
2017-08-04T16:58:56.405Z
1013096
2017-08-04T17:12:13.295Z
2017-08-04T17:29:06.391Z
2017-08-04T17:12:13.295Z
805055
2017-08-04T17:15:41.336Z
2017-08-04T17:29:06.391Z
2017-08-04T17:15:41.336Z
632532
2017-08-04T17:18:33.859Z
2017-08-04T17:29:06.391Z
2017-08-04T17:18:33.859Z
526232
2017-08-04T17:20:20.159Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:20.202Z
525117
2017-08-04T17:20:21.274Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:21.578Z
523234
2017-08-04T17:20:23.157Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:23.200Z
522509
2017-08-04T17:20:23.882Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:25.930Z
519309
2017-08-04T17:20:27.082Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:29.472Z
515511
2017-08-04T17:20:30.880Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:34.170Z
511237
2017-08-04T17:20:35.154Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:35.154Z
507826
2017-08-04T17:20:38.565Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:38.651Z
503479
2017-08-04T17:20:42.912Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:43.040Z
499490
2017-08-04T17:20:46.901Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:47.072Z
497954
2017-08-04T17:20:48.437Z
2017-08-04T17:29:06.391Z
2017-08-04T17:20:48.522Z
486129
2017-08-04T17:21:00.262Z
2017-08-04T17:29:06.391Z
2017-08-04T17:21:00.646Z
478129
2017-08-04T17:21:08.262Z
2017-08-04T17:29:06.391Z
2017-08-04T17:21:08.304Z
91584
2017-08-04T17:27:34.807Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:34.807Z
87035
2017-08-04T17:27:39.356Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:39.356Z
84604
2017-08-04T17:27:41.787Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:42.043Z
80129
2017-08-04T17:27:46.262Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:46.306Z
79105
2017-08-04T17:27:47.286Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:47.675Z
76043
2017-08-04T17:27:50.348Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:50.348Z
74100
2017-08-04T17:27:52.291Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:52.333Z
72335
2017-08-04T17:27:54.056Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:55.438Z
70313
2017-08-04T17:27:56.078Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:56.120Z
69631
2017-08-04T17:27:56.760Z
2017-08-04T17:29:06.391Z
2017-08-04T17:27:56.760Z
68644
2017-08-04T17:27:57.747Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:00.004Z
64035
2017-08-04T17:28:02.356Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:02.569Z
62109
2017-08-04T17:28:04.282Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:05.801Z
59454
2017-08-04T17:28:06.937Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:07.150Z
54963
2017-08-04T17:28:11.428Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:11.474Z
52947
2017-08-04T17:28:13.444Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:13.444Z
46054
2017-08-04T17:28:20.337Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:20.337Z
45351
2017-08-04T17:28:21.040Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:21.040Z
32967
2017-08-04T17:28:33.424Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:33.424Z
29477
2017-08-04T17:28:36.914Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:36.958Z
27198
2017-08-04T17:28:39.193Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:39.193Z
21575
2017-08-04T17:28:44.816Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:44.855Z
10707
2017-08-04T17:28:55.684Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:55.727Z
7624
2017-08-04T17:28:58.767Z
2017-08-04T17:29:06.391Z
2017-08-04T17:28:58.810Z
6334
2017-08-04T17:29:00.057Z
2017-08-04T17:29:06.391Z
2017-08-04T17:29:00.357Z
5214
2017-08-04T17:29:01.177Z
2017-08-04T17:29:06.391Z
2017-08-04T17:29:01.177Z
3343
2017-08-04T17:29:03.048Z
2017-08-04T17:29:06.391Z
2017-08-04T17:29:03.142Z
2385
2017-08-04T17:29:04.006Z
2017-08-04T17:29:06.391Z
2017-08-04T17:29:04.006Z
1426
2017-08-04T17:29:04.965Z
2017-08-04T17:29:06.391Z
2017-08-04T17:29:04.965Z
0
2017-08-04T17:29:06.391Z
2017-08-04T17:29:06.391Z
2017-08-04T17:29:07.295Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 23
92622
2017-08-04T17:27:33.842Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:33.842Z
87088
2017-08-04T17:27:39.376Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:39.975Z
85040
2017-08-04T17:27:41.424Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:42.961Z
82863
2017-08-04T17:27:43.601Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:45.489Z
80154
2017-08-04T17:27:46.310Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:46.397Z
78995
2017-08-04T17:27:47.469Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:47.723Z
76111
2017-08-04T17:27:50.353Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:51.128Z
74211
2017-08-04T17:27:52.253Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:52.517Z
72403
2017-08-04T17:27:54.061Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:54.147Z
70386
2017-08-04T17:27:56.078Z
2017-08-04T17:29:06.464Z
2017-08-04T17:27:56.078Z
67245
2017-08-04T17:27:59.219Z
2017-08-04T17:29:06.464Z
2017-08-04T17:28:00.008Z
62221
2017-08-04T17:28:04.243Z
2017-08-04T17:29:06.464Z
2017-08-04T17:28:05.797Z
59495
2017-08-04T17:28:06.969Z
2017-08-04T17:29:06.464Z
2017-08-04T17:28:07.358Z
53132
2017-08-04T17:28:13.332Z
2017-08-04T17:29:06.464Z
2017-08-04T17:28:13.673Z
36941
2017-08-04T17:28:29.523Z
2017-08-04T17:29:06.464Z
2017-08-04T17:28:29.567Z
27673
2017-08-04T17:28:38.791Z
2017-08-04T17:29:06.464Z
2017-08-04T17:28:38.962Z
21667
2017-08-04T17:28:44.797Z
2017-08-04T17:29:06.464Z
2017-08-04T17:28:44.797Z
10743
2017-08-04T17:28:55.721Z
2017-08-04T17:29:06.464Z
2017-08-04T17:28:55.721Z
7654
2017-08-04T17:28:58.810Z
2017-08-04T17:29:06.464Z
2017-08-04T17:28:58.810Z
6412
2017-08-04T17:29:00.052Z
2017-08-04T17:29:06.464Z
2017-08-04T17:29:00.095Z
3430
2017-08-04T17:29:03.034Z
2017-08-04T17:29:06.464Z
2017-08-04T17:29:03.131Z
1509
2017-08-04T17:29:04.955Z
2017-08-04T17:29:06.464Z
2017-08-04T17:29:05.041Z
0
2017-08-04T17:29:06.464Z
2017-08-04T17:29:06.464Z
2017-08-04T17:29:07.295Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 24
94095
2017-08-04T17:27:33.842Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:33.842Z
88561
2017-08-04T17:27:39.376Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:39.975Z
86513
2017-08-04T17:27:41.424Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:42.961Z
84336
2017-08-04T17:27:43.601Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:45.489Z
81627
2017-08-04T17:27:46.310Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:46.397Z
80468
2017-08-04T17:27:47.469Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:47.723Z
77584
2017-08-04T17:27:50.353Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:51.128Z
75684
2017-08-04T17:27:52.253Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:52.517Z
73876
2017-08-04T17:27:54.061Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:54.147Z
71859
2017-08-04T17:27:56.078Z
2017-08-04T17:29:07.937Z
2017-08-04T17:27:56.078Z
68718
2017-08-04T17:27:59.219Z
2017-08-04T17:29:07.937Z
2017-08-04T17:28:00.008Z
63694
2017-08-04T17:28:04.243Z
2017-08-04T17:29:07.937Z
2017-08-04T17:28:05.797Z
60968
2017-08-04T17:28:06.969Z
2017-08-04T17:29:07.937Z
2017-08-04T17:28:07.358Z
54605
2017-08-04T17:28:13.332Z
2017-08-04T17:29:07.937Z
2017-08-04T17:28:13.673Z
38414
2017-08-04T17:28:29.523Z
2017-08-04T17:29:07.937Z
2017-08-04T17:28:29.567Z
29146
2017-08-04T17:28:38.791Z
2017-08-04T17:29:07.937Z
2017-08-04T17:28:38.962Z
23140
2017-08-04T17:28:44.797Z
2017-08-04T17:29:07.937Z
2017-08-04T17:28:44.797Z
12216
2017-08-04T17:28:55.721Z
2017-08-04T17:29:07.937Z
2017-08-04T17:28:55.721Z
9127
2017-08-04T17:28:58.810Z
2017-08-04T17:29:07.937Z
2017-08-04T17:28:58.810Z
7885
2017-08-04T17:29:00.052Z
2017-08-04T17:29:07.937Z
2017-08-04T17:29:00.095Z
4903
2017-08-04T17:29:03.034Z
2017-08-04T17:29:07.937Z
2017-08-04T17:29:03.131Z
2982
2017-08-04T17:29:04.955Z
2017-08-04T17:29:07.937Z
2017-08-04T17:29:05.041Z
1473
2017-08-04T17:29:06.464Z
2017-08-04T17:29:07.937Z
2017-08-04T17:29:07.295Z
0
2017-08-04T17:29:07.937Z
2017-08-04T17:29:07.937Z
2017-08-04T17:29:08.021Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 72
5173944
2017-08-04T16:02:53.992Z
2017-08-04T17:29:07.936Z
2017-08-04T16:02:55.016Z
5099724
2017-08-04T16:04:08.212Z
2017-08-04T17:29:07.936Z
2017-08-04T16:04:09.113Z
5088000
2017-08-04T16:04:19.936Z
2017-08-04T17:29:07.936Z
2017-08-04T16:04:19.936Z
5066403
2017-08-04T16:04:41.533Z
2017-08-04T17:29:07.936Z
2017-08-04T16:04:41.533Z
5036699
2017-08-04T16:05:11.237Z
2017-08-04T17:29:07.936Z
2017-08-04T16:05:11.842Z
3472184
2017-08-04T16:31:15.752Z
2017-08-04T17:29:07.936Z
2017-08-04T16:31:16.861Z
3198377
2017-08-04T16:35:49.559Z
2017-08-04T17:29:07.936Z
2017-08-04T16:35:49.559Z
2839013
2017-08-04T16:41:48.923Z
2017-08-04T17:29:07.936Z
2017-08-04T16:41:48.923Z
2828528
2017-08-04T16:41:59.408Z
2017-08-04T17:29:07.936Z
2017-08-04T16:41:59.408Z
2811748
2017-08-04T16:42:16.188Z
2017-08-04T17:29:07.936Z
2017-08-04T16:42:16.657Z
2610166
2017-08-04T16:45:37.770Z
2017-08-04T17:29:07.936Z
2017-08-04T16:45:37.983Z
2606753
2017-08-04T16:45:41.183Z
2017-08-04T17:29:07.936Z
2017-08-04T16:45:41.268Z
2605089
2017-08-04T16:45:42.847Z
2017-08-04T17:29:07.936Z
2017-08-04T16:45:42.847Z
2603339
2017-08-04T16:45:44.597Z
2017-08-04T17:29:07.936Z
2017-08-04T16:45:44.597Z
2578767
2017-08-04T16:46:09.169Z
2017-08-04T17:29:07.936Z
2017-08-04T16:46:09.169Z
2509715
2017-08-04T16:47:18.221Z
2017-08-04T17:29:07.936Z
2017-08-04T16:47:19.117Z
2493944
2017-08-04T16:47:33.992Z
2017-08-04T17:29:07.936Z
2017-08-04T16:47:33.992Z
2493133
2017-08-04T16:47:34.803Z
2017-08-04T17:29:07.936Z
2017-08-04T16:47:35.368Z
2489965
2017-08-04T16:47:37.971Z
2017-08-04T17:29:07.936Z
2017-08-04T16:47:38.227Z
2480146
2017-08-04T16:47:47.790Z
2017-08-04T17:29:07.936Z
2017-08-04T16:47:49.155Z
2475922
2017-08-04T16:47:52.014Z
2017-08-04T17:29:07.936Z
2017-08-04T16:47:56.195Z
2470844
2017-08-04T16:47:57.092Z
2017-08-04T17:29:07.936Z
2017-08-04T16:47:57.219Z
1996326
2017-08-04T16:55:51.610Z
2017-08-04T17:29:07.936Z
2017-08-04T16:55:52.122Z
1845157
2017-08-04T16:58:22.779Z
2017-08-04T17:29:07.936Z
2017-08-04T16:58:22.779Z
1811531
2017-08-04T16:58:56.405Z
2017-08-04T17:29:07.936Z
2017-08-04T16:58:56.405Z
1014641
2017-08-04T17:12:13.295Z
2017-08-04T17:29:07.936Z
2017-08-04T17:12:13.295Z
806600
2017-08-04T17:15:41.336Z
2017-08-04T17:29:07.936Z
2017-08-04T17:15:41.336Z
634077
2017-08-04T17:18:33.859Z
2017-08-04T17:29:07.936Z
2017-08-04T17:18:33.859Z
527777
2017-08-04T17:20:20.159Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:20.202Z
526662
2017-08-04T17:20:21.274Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:21.578Z
524779
2017-08-04T17:20:23.157Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:23.200Z
524054
2017-08-04T17:20:23.882Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:25.930Z
520854
2017-08-04T17:20:27.082Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:29.472Z
517056
2017-08-04T17:20:30.880Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:34.170Z
512782
2017-08-04T17:20:35.154Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:35.154Z
509371
2017-08-04T17:20:38.565Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:38.651Z
505024
2017-08-04T17:20:42.912Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:43.040Z
501035
2017-08-04T17:20:46.901Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:47.072Z
499499
2017-08-04T17:20:48.437Z
2017-08-04T17:29:07.936Z
2017-08-04T17:20:48.522Z
487674
2017-08-04T17:21:00.262Z
2017-08-04T17:29:07.936Z
2017-08-04T17:21:00.646Z
479674
2017-08-04T17:21:08.262Z
2017-08-04T17:29:07.936Z
2017-08-04T17:21:08.304Z
93129
2017-08-04T17:27:34.807Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:34.807Z
88580
2017-08-04T17:27:39.356Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:39.356Z
86149
2017-08-04T17:27:41.787Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:42.043Z
81674
2017-08-04T17:27:46.262Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:46.306Z
80650
2017-08-04T17:27:47.286Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:47.675Z
77588
2017-08-04T17:27:50.348Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:50.348Z
75645
2017-08-04T17:27:52.291Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:52.333Z
73880
2017-08-04T17:27:54.056Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:55.438Z
71858
2017-08-04T17:27:56.078Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:56.120Z
71176
2017-08-04T17:27:56.760Z
2017-08-04T17:29:07.936Z
2017-08-04T17:27:56.760Z
70189
2017-08-04T17:27:57.747Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:00.004Z
65580
2017-08-04T17:28:02.356Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:02.569Z
63654
2017-08-04T17:28:04.282Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:05.801Z
60999
2017-08-04T17:28:06.937Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:07.150Z
56508
2017-08-04T17:28:11.428Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:11.474Z
54492
2017-08-04T17:28:13.444Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:13.444Z
47599
2017-08-04T17:28:20.337Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:20.337Z
46896
2017-08-04T17:28:21.040Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:21.040Z
34512
2017-08-04T17:28:33.424Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:33.424Z
31022
2017-08-04T17:28:36.914Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:36.958Z
28743
2017-08-04T17:28:39.193Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:39.193Z
23120
2017-08-04T17:28:44.816Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:44.855Z
12252
2017-08-04T17:28:55.684Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:55.727Z
9169
2017-08-04T17:28:58.767Z
2017-08-04T17:29:07.936Z
2017-08-04T17:28:58.810Z
7879
2017-08-04T17:29:00.057Z
2017-08-04T17:29:07.936Z
2017-08-04T17:29:00.357Z
6759
2017-08-04T17:29:01.177Z
2017-08-04T17:29:07.936Z
2017-08-04T17:29:01.177Z
4888
2017-08-04T17:29:03.048Z
2017-08-04T17:29:07.936Z
2017-08-04T17:29:03.142Z
3930
2017-08-04T17:29:04.006Z
2017-08-04T17:29:07.936Z
2017-08-04T17:29:04.006Z
2971
2017-08-04T17:29:04.965Z
2017-08-04T17:29:07.936Z
2017-08-04T17:29:04.965Z
1545
2017-08-04T17:29:06.391Z
2017-08-04T17:29:07.936Z
2017-08-04T17:29:07.295Z
0
2017-08-04T17:29:07.936Z
2017-08-04T17:29:07.936Z
2017-08-04T17:29:08.064Z
info: Tried to insert repeat talking history data! Nuh-Uh
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-04T17:24:10.226Z 2017-08-04T17:29:10.226Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aee63fdd10ba54f6f9ef,
       participant: 'dog',
       turns: 0.42105263157894735 },
     { _id: 5984aee63fdd10ba54f6f9ee,
       participant: 'jordan',
       turns: 0.543859649122807 },
     { _id: 5984aee63fdd10ba54f6f9ed,
       participant: 'meep',
       turns: 0.03508771929824561 } ],
  meeting: 'no',
  transitions: 43,
  timestamp: 2017-08-04T17:29:10.403Z,
  from: 2017-08-04T17:24:10.226Z,
  to: 2017-08-04T17:29:10.226Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aee63fdd10ba54f6f9ef,
       participant: 'dog',
       turns: 0.42105263157894735 },
     { _id: 5984aee63fdd10ba54f6f9ee,
       participant: 'jordan',
       turns: 0.543859649122807 },
     { _id: 5984aee63fdd10ba54f6f9ed,
       participant: 'meep',
       turns: 0.03508771929824561 } ],
  meeting: 'no',
  transitions: 43,
  timestamp: 2017-08-04T17:29:10.403Z,
  from: 2017-08-04T17:24:10.226Z,
  to: 2017-08-04T17:29:10.226Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aee63fdd10ba54f6f9ef,
       participant: 'dog',
       turns: 0.42105263157894735 },
     { _id: 5984aee63fdd10ba54f6f9ee,
       participant: 'jordan',
       turns: 0.543859649122807 },
     { _id: 5984aee63fdd10ba54f6f9ed,
       participant: 'meep',
       turns: 0.03508771929824561 } ],
  meeting: 'no',
  transitions: 43,
  timestamp: 2017-08-04T17:29:10.403Z,
  from: 2017-08-04T17:24:10.226Z,
  to: 2017-08-04T17:29:10.226Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aee63fdd10ba54f6f9ef,
       participant: 'dog',
       turns: 0.42105263157894735 },
     { _id: 5984aee63fdd10ba54f6f9ee,
       participant: 'jordan',
       turns: 0.543859649122807 },
     { _id: 5984aee63fdd10ba54f6f9ed,
       participant: 'meep',
       turns: 0.03508771929824561 } ],
  meeting: 'no',
  transitions: 43,
  timestamp: 2017-08-04T17:29:10.403Z,
  from: 2017-08-04T17:24:10.226Z,
  to: 2017-08-04T17:29:10.226Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=mep, name=mep, participants=[participant=jordan, participant=dog, participant=meep, participant=mep], meeting=no, meetingUrl=http://localhost:3001/?user=mep&room=no, consent=true, consentDate=2017-08-04T17:29:11.372Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2Nzc1MSwiZXhwIjoxNTg4MjY3NzUxLCJpc3MiOiJmZWF0aGVycyJ9.ySXE1Vh8_hhsHMAtfg-RdoghtoEFXuluh-ZM4fJOud0
info: creating a new participant... NotFound: No record found for id 'mep'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Fri Aug 04 2017 13:29:14 GMT-0400 (EDT), updatedAt=Fri Aug 04 2017 13:29:14 GMT-0400 (EDT), consentDate=Fri Aug 04 2017 13:29:11 GMT-0400 (EDT), consent=true, name=mep, _id=mep, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'mep',
     name: 'mep',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=mep&room=no',
     consent: true,
     consentDate: '2017-08-04T17:29:11.372Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMTg2Nzc1MSwiZXhwIjoxNTg4MjY3NzUxLCJpc3MiOiJmZWF0aGVycyJ9.ySXE1Vh8_hhsHMAtfg-RdoghtoEFXuluh-ZM4fJOud0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'dog', 'meep', 'mep' ]
info: utterances found: 25
97646
2017-08-04T17:27:33.842Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:33.842Z
92112
2017-08-04T17:27:39.376Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:39.975Z
90064
2017-08-04T17:27:41.424Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:42.961Z
87887
2017-08-04T17:27:43.601Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:45.489Z
85178
2017-08-04T17:27:46.310Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:46.397Z
84019
2017-08-04T17:27:47.469Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:47.723Z
81135
2017-08-04T17:27:50.353Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:51.128Z
79235
2017-08-04T17:27:52.253Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:52.517Z
77427
2017-08-04T17:27:54.061Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:54.147Z
75410
2017-08-04T17:27:56.078Z
2017-08-04T17:29:11.488Z
2017-08-04T17:27:56.078Z
72269
2017-08-04T17:27:59.219Z
2017-08-04T17:29:11.488Z
2017-08-04T17:28:00.008Z
67245
2017-08-04T17:28:04.243Z
2017-08-04T17:29:11.488Z
2017-08-04T17:28:05.797Z
64519
2017-08-04T17:28:06.969Z
2017-08-04T17:29:11.488Z
2017-08-04T17:28:07.358Z
58156
2017-08-04T17:28:13.332Z
2017-08-04T17:29:11.488Z
2017-08-04T17:28:13.673Z
41965
2017-08-04T17:28:29.523Z
2017-08-04T17:29:11.488Z
2017-08-04T17:28:29.567Z
32697
2017-08-04T17:28:38.791Z
2017-08-04T17:29:11.488Z
2017-08-04T17:28:38.962Z
26691
2017-08-04T17:28:44.797Z
2017-08-04T17:29:11.488Z
2017-08-04T17:28:44.797Z
15767
2017-08-04T17:28:55.721Z
2017-08-04T17:29:11.488Z
2017-08-04T17:28:55.721Z
12678
2017-08-04T17:28:58.810Z
2017-08-04T17:29:11.488Z
2017-08-04T17:28:58.810Z
11436
2017-08-04T17:29:00.052Z
2017-08-04T17:29:11.488Z
2017-08-04T17:29:00.095Z
8454
2017-08-04T17:29:03.034Z
2017-08-04T17:29:11.488Z
2017-08-04T17:29:03.131Z
6533
2017-08-04T17:29:04.955Z
2017-08-04T17:29:11.488Z
2017-08-04T17:29:05.041Z
5024
2017-08-04T17:29:06.464Z
2017-08-04T17:29:11.488Z
2017-08-04T17:29:07.295Z
3551
2017-08-04T17:29:07.937Z
2017-08-04T17:29:11.488Z
2017-08-04T17:29:08.021Z
0
2017-08-04T17:29:11.488Z
2017-08-04T17:29:11.488Z
2017-08-04T17:29:11.488Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 4
5042644
2017-08-04T16:05:08.844Z
2017-08-04T17:29:11.488Z
2017-08-04T16:05:09.099Z
8470
2017-08-04T17:29:03.018Z
2017-08-04T17:29:11.488Z
2017-08-04T17:29:03.103Z
4886
2017-08-04T17:29:06.602Z
2017-08-04T17:29:11.488Z
2017-08-04T17:29:06.645Z
0
2017-08-04T17:29:11.488Z
2017-08-04T17:29:11.488Z
2017-08-04T17:29:11.488Z
info: Tried to insert repeat talking history data! Nuh-Uh
patching meeting { participants: [ 'dog', 'jordan', 'meep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'dog', 'meep', 'mep' ]
info: utterances found: 73
5178573
2017-08-04T16:02:53.992Z
2017-08-04T17:29:12.565Z
2017-08-04T16:02:55.016Z
5104353
2017-08-04T16:04:08.212Z
2017-08-04T17:29:12.565Z
2017-08-04T16:04:09.113Z
5092629
2017-08-04T16:04:19.936Z
2017-08-04T17:29:12.565Z
2017-08-04T16:04:19.936Z
5071032
2017-08-04T16:04:41.533Z
2017-08-04T17:29:12.565Z
2017-08-04T16:04:41.533Z
5041328
2017-08-04T16:05:11.237Z
2017-08-04T17:29:12.565Z
2017-08-04T16:05:11.842Z
3476813
2017-08-04T16:31:15.752Z
2017-08-04T17:29:12.565Z
2017-08-04T16:31:16.861Z
3203006
2017-08-04T16:35:49.559Z
2017-08-04T17:29:12.565Z
2017-08-04T16:35:49.559Z
2843642
2017-08-04T16:41:48.923Z
2017-08-04T17:29:12.565Z
2017-08-04T16:41:48.923Z
2833157
2017-08-04T16:41:59.408Z
2017-08-04T17:29:12.565Z
2017-08-04T16:41:59.408Z
2816377
2017-08-04T16:42:16.188Z
2017-08-04T17:29:12.565Z
2017-08-04T16:42:16.657Z
2614795
2017-08-04T16:45:37.770Z
2017-08-04T17:29:12.565Z
2017-08-04T16:45:37.983Z
2611382
2017-08-04T16:45:41.183Z
2017-08-04T17:29:12.565Z
2017-08-04T16:45:41.268Z
2609718
2017-08-04T16:45:42.847Z
2017-08-04T17:29:12.565Z
2017-08-04T16:45:42.847Z
2607968
2017-08-04T16:45:44.597Z
2017-08-04T17:29:12.565Z
2017-08-04T16:45:44.597Z
2583396
2017-08-04T16:46:09.169Z
2017-08-04T17:29:12.565Z
2017-08-04T16:46:09.169Z
2514344
2017-08-04T16:47:18.221Z
2017-08-04T17:29:12.565Z
2017-08-04T16:47:19.117Z
2498573
2017-08-04T16:47:33.992Z
2017-08-04T17:29:12.565Z
2017-08-04T16:47:33.992Z
2497762
2017-08-04T16:47:34.803Z
2017-08-04T17:29:12.565Z
2017-08-04T16:47:35.368Z
2494594
2017-08-04T16:47:37.971Z
2017-08-04T17:29:12.565Z
2017-08-04T16:47:38.227Z
2484775
2017-08-04T16:47:47.790Z
2017-08-04T17:29:12.565Z
2017-08-04T16:47:49.155Z
2480551
2017-08-04T16:47:52.014Z
2017-08-04T17:29:12.565Z
2017-08-04T16:47:56.195Z
2475473
2017-08-04T16:47:57.092Z
2017-08-04T17:29:12.565Z
2017-08-04T16:47:57.219Z
2000955
2017-08-04T16:55:51.610Z
2017-08-04T17:29:12.565Z
2017-08-04T16:55:52.122Z
1849786
2017-08-04T16:58:22.779Z
2017-08-04T17:29:12.565Z
2017-08-04T16:58:22.779Z
1816160
2017-08-04T16:58:56.405Z
2017-08-04T17:29:12.565Z
2017-08-04T16:58:56.405Z
1019270
2017-08-04T17:12:13.295Z
2017-08-04T17:29:12.565Z
2017-08-04T17:12:13.295Z
811229
2017-08-04T17:15:41.336Z
2017-08-04T17:29:12.565Z
2017-08-04T17:15:41.336Z
638706
2017-08-04T17:18:33.859Z
2017-08-04T17:29:12.565Z
2017-08-04T17:18:33.859Z
532406
2017-08-04T17:20:20.159Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:20.202Z
531291
2017-08-04T17:20:21.274Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:21.578Z
529408
2017-08-04T17:20:23.157Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:23.200Z
528683
2017-08-04T17:20:23.882Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:25.930Z
525483
2017-08-04T17:20:27.082Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:29.472Z
521685
2017-08-04T17:20:30.880Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:34.170Z
517411
2017-08-04T17:20:35.154Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:35.154Z
514000
2017-08-04T17:20:38.565Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:38.651Z
509653
2017-08-04T17:20:42.912Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:43.040Z
505664
2017-08-04T17:20:46.901Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:47.072Z
504128
2017-08-04T17:20:48.437Z
2017-08-04T17:29:12.565Z
2017-08-04T17:20:48.522Z
492303
2017-08-04T17:21:00.262Z
2017-08-04T17:29:12.565Z
2017-08-04T17:21:00.646Z
484303
2017-08-04T17:21:08.262Z
2017-08-04T17:29:12.565Z
2017-08-04T17:21:08.304Z
97758
2017-08-04T17:27:34.807Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:34.807Z
93209
2017-08-04T17:27:39.356Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:39.356Z
90778
2017-08-04T17:27:41.787Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:42.043Z
86303
2017-08-04T17:27:46.262Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:46.306Z
85279
2017-08-04T17:27:47.286Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:47.675Z
82217
2017-08-04T17:27:50.348Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:50.348Z
80274
2017-08-04T17:27:52.291Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:52.333Z
78509
2017-08-04T17:27:54.056Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:55.438Z
76487
2017-08-04T17:27:56.078Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:56.120Z
75805
2017-08-04T17:27:56.760Z
2017-08-04T17:29:12.565Z
2017-08-04T17:27:56.760Z
74818
2017-08-04T17:27:57.747Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:00.004Z
70209
2017-08-04T17:28:02.356Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:02.569Z
68283
2017-08-04T17:28:04.282Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:05.801Z
65628
2017-08-04T17:28:06.937Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:07.150Z
61137
2017-08-04T17:28:11.428Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:11.474Z
59121
2017-08-04T17:28:13.444Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:13.444Z
52228
2017-08-04T17:28:20.337Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:20.337Z
51525
2017-08-04T17:28:21.040Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:21.040Z
39141
2017-08-04T17:28:33.424Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:33.424Z
35651
2017-08-04T17:28:36.914Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:36.958Z
33372
2017-08-04T17:28:39.193Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:39.193Z
27749
2017-08-04T17:28:44.816Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:44.855Z
16881
2017-08-04T17:28:55.684Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:55.727Z
13798
2017-08-04T17:28:58.767Z
2017-08-04T17:29:12.565Z
2017-08-04T17:28:58.810Z
12508
2017-08-04T17:29:00.057Z
2017-08-04T17:29:12.565Z
2017-08-04T17:29:00.357Z
11388
2017-08-04T17:29:01.177Z
2017-08-04T17:29:12.565Z
2017-08-04T17:29:01.177Z
9517
2017-08-04T17:29:03.048Z
2017-08-04T17:29:12.565Z
2017-08-04T17:29:03.142Z
8559
2017-08-04T17:29:04.006Z
2017-08-04T17:29:12.565Z
2017-08-04T17:29:04.006Z
7600
2017-08-04T17:29:04.965Z
2017-08-04T17:29:12.565Z
2017-08-04T17:29:04.965Z
6174
2017-08-04T17:29:06.391Z
2017-08-04T17:29:12.565Z
2017-08-04T17:29:07.295Z
4629
2017-08-04T17:29:07.936Z
2017-08-04T17:29:12.565Z
2017-08-04T17:29:08.064Z
0
2017-08-04T17:29:12.565Z
2017-08-04T17:29:12.565Z
2017-08-04T17:29:13.430Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 1
0
2017-08-04T17:29:12.517Z
2017-08-04T17:29:12.517Z
2017-08-04T17:29:12.651Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 26
98718
2017-08-04T17:27:33.842Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:33.842Z
93184
2017-08-04T17:27:39.376Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:39.975Z
91136
2017-08-04T17:27:41.424Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:42.961Z
88959
2017-08-04T17:27:43.601Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:45.489Z
86250
2017-08-04T17:27:46.310Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:46.397Z
85091
2017-08-04T17:27:47.469Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:47.723Z
82207
2017-08-04T17:27:50.353Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:51.128Z
80307
2017-08-04T17:27:52.253Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:52.517Z
78499
2017-08-04T17:27:54.061Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:54.147Z
76482
2017-08-04T17:27:56.078Z
2017-08-04T17:29:12.560Z
2017-08-04T17:27:56.078Z
73341
2017-08-04T17:27:59.219Z
2017-08-04T17:29:12.560Z
2017-08-04T17:28:00.008Z
68317
2017-08-04T17:28:04.243Z
2017-08-04T17:29:12.560Z
2017-08-04T17:28:05.797Z
65591
2017-08-04T17:28:06.969Z
2017-08-04T17:29:12.560Z
2017-08-04T17:28:07.358Z
59228
2017-08-04T17:28:13.332Z
2017-08-04T17:29:12.560Z
2017-08-04T17:28:13.673Z
43037
2017-08-04T17:28:29.523Z
2017-08-04T17:29:12.560Z
2017-08-04T17:28:29.567Z
33769
2017-08-04T17:28:38.791Z
2017-08-04T17:29:12.560Z
2017-08-04T17:28:38.962Z
27763
2017-08-04T17:28:44.797Z
2017-08-04T17:29:12.560Z
2017-08-04T17:28:44.797Z
16839
2017-08-04T17:28:55.721Z
2017-08-04T17:29:12.560Z
2017-08-04T17:28:55.721Z
13750
2017-08-04T17:28:58.810Z
2017-08-04T17:29:12.560Z
2017-08-04T17:28:58.810Z
12508
2017-08-04T17:29:00.052Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:00.095Z
9526
2017-08-04T17:29:03.034Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:03.131Z
7605
2017-08-04T17:29:04.955Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:05.041Z
6096
2017-08-04T17:29:06.464Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:07.295Z
4623
2017-08-04T17:29:07.937Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:08.021Z
1072
2017-08-04T17:29:11.488Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:11.488Z
0
2017-08-04T17:29:12.560Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:12.731Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 5
5043716
2017-08-04T16:05:08.844Z
2017-08-04T17:29:12.560Z
2017-08-04T16:05:09.099Z
9542
2017-08-04T17:29:03.018Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:03.103Z
5958
2017-08-04T17:29:06.602Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:06.645Z
1072
2017-08-04T17:29:11.488Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:11.488Z
0
2017-08-04T17:29:12.560Z
2017-08-04T17:29:12.560Z
2017-08-04T17:29:13.456Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: not adding participant: { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  lastUpdated: 2017-08-04T17:29:14.406Z } no
updated meeting with participants { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  _id: 5984aeeb3fdd10ba54f6f9f6,
  timestamp: 2017-08-04T17:29:15.047Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  _id: 5984aeeb3fdd10ba54f6f9f6,
  timestamp: 2017-08-04T17:29:15.047Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  _id: 5984aeeb3fdd10ba54f6f9f6,
  timestamp: 2017-08-04T17:29:15.047Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'dog', 'jordan', 'meep', 'mep' ],
  _id: 5984aeeb3fdd10ba54f6f9f6,
  timestamp: 2017-08-04T17:29:15.047Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:24:15.248Z 2017-08-04T17:29:15.248Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aeeb3fdd10ba54f6f9fa,
       participant: 'dog',
       turns: 0.4126984126984127 },
     { _id: 5984aeeb3fdd10ba54f6f9f9,
       participant: 'jordan',
       turns: 0.5079365079365079 },
     { _id: 5984aeeb3fdd10ba54f6f9f8,
       participant: 'meep',
       turns: 0.06349206349206349 },
     { _id: 5984aeeb3fdd10ba54f6f9f7,
       participant: 'mep',
       turns: 0.015873015873015872 } ],
  meeting: 'no',
  transitions: 49,
  timestamp: 2017-08-04T17:29:15.265Z,
  from: 2017-08-04T17:24:15.248Z,
  to: 2017-08-04T17:29:15.248Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aeeb3fdd10ba54f6f9fa,
       participant: 'dog',
       turns: 0.4126984126984127 },
     { _id: 5984aeeb3fdd10ba54f6f9f9,
       participant: 'jordan',
       turns: 0.5079365079365079 },
     { _id: 5984aeeb3fdd10ba54f6f9f8,
       participant: 'meep',
       turns: 0.06349206349206349 },
     { _id: 5984aeeb3fdd10ba54f6f9f7,
       participant: 'mep',
       turns: 0.015873015873015872 } ],
  meeting: 'no',
  transitions: 49,
  timestamp: 2017-08-04T17:29:15.265Z,
  from: 2017-08-04T17:24:15.248Z,
  to: 2017-08-04T17:29:15.248Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aeeb3fdd10ba54f6f9fa,
       participant: 'dog',
       turns: 0.4126984126984127 },
     { _id: 5984aeeb3fdd10ba54f6f9f9,
       participant: 'jordan',
       turns: 0.5079365079365079 },
     { _id: 5984aeeb3fdd10ba54f6f9f8,
       participant: 'meep',
       turns: 0.06349206349206349 },
     { _id: 5984aeeb3fdd10ba54f6f9f7,
       participant: 'mep',
       turns: 0.015873015873015872 } ],
  meeting: 'no',
  transitions: 49,
  timestamp: 2017-08-04T17:29:15.265Z,
  from: 2017-08-04T17:24:15.248Z,
  to: 2017-08-04T17:29:15.248Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aeeb3fdd10ba54f6f9fa,
       participant: 'dog',
       turns: 0.4126984126984127 },
     { _id: 5984aeeb3fdd10ba54f6f9f9,
       participant: 'jordan',
       turns: 0.5079365079365079 },
     { _id: 5984aeeb3fdd10ba54f6f9f8,
       participant: 'meep',
       turns: 0.06349206349206349 },
     { _id: 5984aeeb3fdd10ba54f6f9f7,
       participant: 'mep',
       turns: 0.015873015873015872 } ],
  meeting: 'no',
  transitions: 49,
  timestamp: 2017-08-04T17:29:15.265Z,
  from: 2017-08-04T17:24:15.248Z,
  to: 2017-08-04T17:29:15.248Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 2
3504
2017-08-04T17:29:12.517Z
2017-08-04T17:29:16.021Z
2017-08-04T17:29:12.651Z
0
2017-08-04T17:29:16.021Z
2017-08-04T17:29:16.021Z
2017-08-04T17:29:16.461Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 74
5182034
2017-08-04T16:02:53.992Z
2017-08-04T17:29:16.026Z
2017-08-04T16:02:55.016Z
5107814
2017-08-04T16:04:08.212Z
2017-08-04T17:29:16.026Z
2017-08-04T16:04:09.113Z
5096090
2017-08-04T16:04:19.936Z
2017-08-04T17:29:16.026Z
2017-08-04T16:04:19.936Z
5074493
2017-08-04T16:04:41.533Z
2017-08-04T17:29:16.026Z
2017-08-04T16:04:41.533Z
5044789
2017-08-04T16:05:11.237Z
2017-08-04T17:29:16.026Z
2017-08-04T16:05:11.842Z
3480274
2017-08-04T16:31:15.752Z
2017-08-04T17:29:16.026Z
2017-08-04T16:31:16.861Z
3206467
2017-08-04T16:35:49.559Z
2017-08-04T17:29:16.026Z
2017-08-04T16:35:49.559Z
2847103
2017-08-04T16:41:48.923Z
2017-08-04T17:29:16.026Z
2017-08-04T16:41:48.923Z
2836618
2017-08-04T16:41:59.408Z
2017-08-04T17:29:16.026Z
2017-08-04T16:41:59.408Z
2819838
2017-08-04T16:42:16.188Z
2017-08-04T17:29:16.026Z
2017-08-04T16:42:16.657Z
2618256
2017-08-04T16:45:37.770Z
2017-08-04T17:29:16.026Z
2017-08-04T16:45:37.983Z
2614843
2017-08-04T16:45:41.183Z
2017-08-04T17:29:16.026Z
2017-08-04T16:45:41.268Z
2613179
2017-08-04T16:45:42.847Z
2017-08-04T17:29:16.026Z
2017-08-04T16:45:42.847Z
2611429
2017-08-04T16:45:44.597Z
2017-08-04T17:29:16.026Z
2017-08-04T16:45:44.597Z
2586857
2017-08-04T16:46:09.169Z
2017-08-04T17:29:16.026Z
2017-08-04T16:46:09.169Z
2517805
2017-08-04T16:47:18.221Z
2017-08-04T17:29:16.026Z
2017-08-04T16:47:19.117Z
2502034
2017-08-04T16:47:33.992Z
2017-08-04T17:29:16.026Z
2017-08-04T16:47:33.992Z
2501223
2017-08-04T16:47:34.803Z
2017-08-04T17:29:16.026Z
2017-08-04T16:47:35.368Z
2498055
2017-08-04T16:47:37.971Z
2017-08-04T17:29:16.026Z
2017-08-04T16:47:38.227Z
2488236
2017-08-04T16:47:47.790Z
2017-08-04T17:29:16.026Z
2017-08-04T16:47:49.155Z
2484012
2017-08-04T16:47:52.014Z
2017-08-04T17:29:16.026Z
2017-08-04T16:47:56.195Z
2478934
2017-08-04T16:47:57.092Z
2017-08-04T17:29:16.026Z
2017-08-04T16:47:57.219Z
2004416
2017-08-04T16:55:51.610Z
2017-08-04T17:29:16.026Z
2017-08-04T16:55:52.122Z
1853247
2017-08-04T16:58:22.779Z
2017-08-04T17:29:16.026Z
2017-08-04T16:58:22.779Z
1819621
2017-08-04T16:58:56.405Z
2017-08-04T17:29:16.026Z
2017-08-04T16:58:56.405Z
1022731
2017-08-04T17:12:13.295Z
2017-08-04T17:29:16.026Z
2017-08-04T17:12:13.295Z
814690
2017-08-04T17:15:41.336Z
2017-08-04T17:29:16.026Z
2017-08-04T17:15:41.336Z
642167
2017-08-04T17:18:33.859Z
2017-08-04T17:29:16.026Z
2017-08-04T17:18:33.859Z
535867
2017-08-04T17:20:20.159Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:20.202Z
534752
2017-08-04T17:20:21.274Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:21.578Z
532869
2017-08-04T17:20:23.157Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:23.200Z
532144
2017-08-04T17:20:23.882Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:25.930Z
528944
2017-08-04T17:20:27.082Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:29.472Z
525146
2017-08-04T17:20:30.880Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:34.170Z
520872
2017-08-04T17:20:35.154Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:35.154Z
517461
2017-08-04T17:20:38.565Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:38.651Z
513114
2017-08-04T17:20:42.912Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:43.040Z
509125
2017-08-04T17:20:46.901Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:47.072Z
507589
2017-08-04T17:20:48.437Z
2017-08-04T17:29:16.026Z
2017-08-04T17:20:48.522Z
495764
2017-08-04T17:21:00.262Z
2017-08-04T17:29:16.026Z
2017-08-04T17:21:00.646Z
487764
2017-08-04T17:21:08.262Z
2017-08-04T17:29:16.026Z
2017-08-04T17:21:08.304Z
101219
2017-08-04T17:27:34.807Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:34.807Z
96670
2017-08-04T17:27:39.356Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:39.356Z
94239
2017-08-04T17:27:41.787Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:42.043Z
89764
2017-08-04T17:27:46.262Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:46.306Z
88740
2017-08-04T17:27:47.286Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:47.675Z
85678
2017-08-04T17:27:50.348Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:50.348Z
83735
2017-08-04T17:27:52.291Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:52.333Z
81970
2017-08-04T17:27:54.056Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:55.438Z
79948
2017-08-04T17:27:56.078Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:56.120Z
79266
2017-08-04T17:27:56.760Z
2017-08-04T17:29:16.026Z
2017-08-04T17:27:56.760Z
78279
2017-08-04T17:27:57.747Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:00.004Z
73670
2017-08-04T17:28:02.356Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:02.569Z
71744
2017-08-04T17:28:04.282Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:05.801Z
69089
2017-08-04T17:28:06.937Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:07.150Z
64598
2017-08-04T17:28:11.428Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:11.474Z
62582
2017-08-04T17:28:13.444Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:13.444Z
55689
2017-08-04T17:28:20.337Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:20.337Z
54986
2017-08-04T17:28:21.040Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:21.040Z
42602
2017-08-04T17:28:33.424Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:33.424Z
39112
2017-08-04T17:28:36.914Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:36.958Z
36833
2017-08-04T17:28:39.193Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:39.193Z
31210
2017-08-04T17:28:44.816Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:44.855Z
20342
2017-08-04T17:28:55.684Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:55.727Z
17259
2017-08-04T17:28:58.767Z
2017-08-04T17:29:16.026Z
2017-08-04T17:28:58.810Z
15969
2017-08-04T17:29:00.057Z
2017-08-04T17:29:16.026Z
2017-08-04T17:29:00.357Z
14849
2017-08-04T17:29:01.177Z
2017-08-04T17:29:16.026Z
2017-08-04T17:29:01.177Z
12978
2017-08-04T17:29:03.048Z
2017-08-04T17:29:16.026Z
2017-08-04T17:29:03.142Z
12020
2017-08-04T17:29:04.006Z
2017-08-04T17:29:16.026Z
2017-08-04T17:29:04.006Z
11061
2017-08-04T17:29:04.965Z
2017-08-04T17:29:16.026Z
2017-08-04T17:29:04.965Z
9635
2017-08-04T17:29:06.391Z
2017-08-04T17:29:16.026Z
2017-08-04T17:29:07.295Z
8090
2017-08-04T17:29:07.936Z
2017-08-04T17:29:16.026Z
2017-08-04T17:29:08.064Z
3461
2017-08-04T17:29:12.565Z
2017-08-04T17:29:16.026Z
2017-08-04T17:29:13.430Z
0
2017-08-04T17:29:16.026Z
2017-08-04T17:29:16.026Z
2017-08-04T17:29:16.668Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 27
102222
2017-08-04T17:27:33.842Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:33.842Z
96688
2017-08-04T17:27:39.376Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:39.975Z
94640
2017-08-04T17:27:41.424Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:42.961Z
92463
2017-08-04T17:27:43.601Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:45.489Z
89754
2017-08-04T17:27:46.310Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:46.397Z
88595
2017-08-04T17:27:47.469Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:47.723Z
85711
2017-08-04T17:27:50.353Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:51.128Z
83811
2017-08-04T17:27:52.253Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:52.517Z
82003
2017-08-04T17:27:54.061Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:54.147Z
79986
2017-08-04T17:27:56.078Z
2017-08-04T17:29:16.064Z
2017-08-04T17:27:56.078Z
76845
2017-08-04T17:27:59.219Z
2017-08-04T17:29:16.064Z
2017-08-04T17:28:00.008Z
71821
2017-08-04T17:28:04.243Z
2017-08-04T17:29:16.064Z
2017-08-04T17:28:05.797Z
69095
2017-08-04T17:28:06.969Z
2017-08-04T17:29:16.064Z
2017-08-04T17:28:07.358Z
62732
2017-08-04T17:28:13.332Z
2017-08-04T17:29:16.064Z
2017-08-04T17:28:13.673Z
46541
2017-08-04T17:28:29.523Z
2017-08-04T17:29:16.064Z
2017-08-04T17:28:29.567Z
37273
2017-08-04T17:28:38.791Z
2017-08-04T17:29:16.064Z
2017-08-04T17:28:38.962Z
31267
2017-08-04T17:28:44.797Z
2017-08-04T17:29:16.064Z
2017-08-04T17:28:44.797Z
20343
2017-08-04T17:28:55.721Z
2017-08-04T17:29:16.064Z
2017-08-04T17:28:55.721Z
17254
2017-08-04T17:28:58.810Z
2017-08-04T17:29:16.064Z
2017-08-04T17:28:58.810Z
16012
2017-08-04T17:29:00.052Z
2017-08-04T17:29:16.064Z
2017-08-04T17:29:00.095Z
13030
2017-08-04T17:29:03.034Z
2017-08-04T17:29:16.064Z
2017-08-04T17:29:03.131Z
11109
2017-08-04T17:29:04.955Z
2017-08-04T17:29:16.064Z
2017-08-04T17:29:05.041Z
9600
2017-08-04T17:29:06.464Z
2017-08-04T17:29:16.064Z
2017-08-04T17:29:07.295Z
8127
2017-08-04T17:29:07.937Z
2017-08-04T17:29:16.064Z
2017-08-04T17:29:08.021Z
4576
2017-08-04T17:29:11.488Z
2017-08-04T17:29:16.064Z
2017-08-04T17:29:11.488Z
3504
2017-08-04T17:29:12.560Z
2017-08-04T17:29:16.064Z
2017-08-04T17:29:12.731Z
0
2017-08-04T17:29:16.064Z
2017-08-04T17:29:16.064Z
2017-08-04T17:29:17.100Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:24:24.495Z 2017-08-04T17:29:24.495Z
info: utterances found: 6
5047204
2017-08-04T16:05:08.844Z
2017-08-04T17:29:16.048Z
2017-08-04T16:05:09.099Z
13030
2017-08-04T17:29:03.018Z
2017-08-04T17:29:16.048Z
2017-08-04T17:29:03.103Z
9446
2017-08-04T17:29:06.602Z
2017-08-04T17:29:16.048Z
2017-08-04T17:29:06.645Z
4560
2017-08-04T17:29:11.488Z
2017-08-04T17:29:16.048Z
2017-08-04T17:29:11.488Z
3488
2017-08-04T17:29:12.560Z
2017-08-04T17:29:16.048Z
2017-08-04T17:29:13.456Z
0
2017-08-04T17:29:16.048Z
2017-08-04T17:29:16.048Z
2017-08-04T17:29:17.105Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984aef43fdd10ba54f6fa04,
       participant: 'dog',
       turns: 0.40298507462686567 },
     { _id: 5984aef43fdd10ba54f6fa03,
       participant: 'jordan',
       turns: 0.4925373134328358 },
     { _id: 5984aef43fdd10ba54f6fa02,
       participant: 'meep',
       turns: 0.07462686567164178 },
     { _id: 5984aef43fdd10ba54f6fa01,
       participant: 'mep',
       turns: 0.029850746268656716 } ],
  meeting: 'no',
  transitions: 53,
  timestamp: 2017-08-04T17:29:24.504Z,
  from: 2017-08-04T17:24:24.495Z,
  to: 2017-08-04T17:29:24.495Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aef43fdd10ba54f6fa04,
       participant: 'dog',
       turns: 0.40298507462686567 },
     { _id: 5984aef43fdd10ba54f6fa03,
       participant: 'jordan',
       turns: 0.4925373134328358 },
     { _id: 5984aef43fdd10ba54f6fa02,
       participant: 'meep',
       turns: 0.07462686567164178 },
     { _id: 5984aef43fdd10ba54f6fa01,
       participant: 'mep',
       turns: 0.029850746268656716 } ],
  meeting: 'no',
  transitions: 53,
  timestamp: 2017-08-04T17:29:24.504Z,
  from: 2017-08-04T17:24:24.495Z,
  to: 2017-08-04T17:29:24.495Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aef43fdd10ba54f6fa04,
       participant: 'dog',
       turns: 0.40298507462686567 },
     { _id: 5984aef43fdd10ba54f6fa03,
       participant: 'jordan',
       turns: 0.4925373134328358 },
     { _id: 5984aef43fdd10ba54f6fa02,
       participant: 'meep',
       turns: 0.07462686567164178 },
     { _id: 5984aef43fdd10ba54f6fa01,
       participant: 'mep',
       turns: 0.029850746268656716 } ],
  meeting: 'no',
  transitions: 53,
  timestamp: 2017-08-04T17:29:24.504Z,
  from: 2017-08-04T17:24:24.495Z,
  to: 2017-08-04T17:29:24.495Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984aef43fdd10ba54f6fa04,
       participant: 'dog',
       turns: 0.40298507462686567 },
     { _id: 5984aef43fdd10ba54f6fa03,
       participant: 'jordan',
       turns: 0.4925373134328358 },
     { _id: 5984aef43fdd10ba54f6fa02,
       participant: 'meep',
       turns: 0.07462686567164178 },
     { _id: 5984aef43fdd10ba54f6fa01,
       participant: 'mep',
       turns: 0.029850746268656716 } ],
  meeting: 'no',
  transitions: 53,
  timestamp: 2017-08-04T17:29:24.504Z,
  from: 2017-08-04T17:24:24.495Z,
  to: 2017-08-04T17:29:24.495Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 75
5183833
2017-08-04T16:02:53.992Z
2017-08-04T17:29:17.825Z
2017-08-04T16:02:55.016Z
5109613
2017-08-04T16:04:08.212Z
2017-08-04T17:29:17.825Z
2017-08-04T16:04:09.113Z
5097889
2017-08-04T16:04:19.936Z
2017-08-04T17:29:17.825Z
2017-08-04T16:04:19.936Z
5076292
2017-08-04T16:04:41.533Z
2017-08-04T17:29:17.825Z
2017-08-04T16:04:41.533Z
5046588
2017-08-04T16:05:11.237Z
2017-08-04T17:29:17.825Z
2017-08-04T16:05:11.842Z
3482073
2017-08-04T16:31:15.752Z
2017-08-04T17:29:17.825Z
2017-08-04T16:31:16.861Z
3208266
2017-08-04T16:35:49.559Z
2017-08-04T17:29:17.825Z
2017-08-04T16:35:49.559Z
2848902
2017-08-04T16:41:48.923Z
2017-08-04T17:29:17.825Z
2017-08-04T16:41:48.923Z
2838417
2017-08-04T16:41:59.408Z
2017-08-04T17:29:17.825Z
2017-08-04T16:41:59.408Z
2821637
2017-08-04T16:42:16.188Z
2017-08-04T17:29:17.825Z
2017-08-04T16:42:16.657Z
2620055
2017-08-04T16:45:37.770Z
2017-08-04T17:29:17.825Z
2017-08-04T16:45:37.983Z
2616642
2017-08-04T16:45:41.183Z
2017-08-04T17:29:17.825Z
2017-08-04T16:45:41.268Z
2614978
2017-08-04T16:45:42.847Z
2017-08-04T17:29:17.825Z
2017-08-04T16:45:42.847Z
2613228
2017-08-04T16:45:44.597Z
2017-08-04T17:29:17.825Z
2017-08-04T16:45:44.597Z
2588656
2017-08-04T16:46:09.169Z
2017-08-04T17:29:17.825Z
2017-08-04T16:46:09.169Z
2519604
2017-08-04T16:47:18.221Z
2017-08-04T17:29:17.825Z
2017-08-04T16:47:19.117Z
2503833
2017-08-04T16:47:33.992Z
2017-08-04T17:29:17.825Z
2017-08-04T16:47:33.992Z
2503022
2017-08-04T16:47:34.803Z
2017-08-04T17:29:17.825Z
2017-08-04T16:47:35.368Z
2499854
2017-08-04T16:47:37.971Z
2017-08-04T17:29:17.825Z
2017-08-04T16:47:38.227Z
2490035
2017-08-04T16:47:47.790Z
2017-08-04T17:29:17.825Z
2017-08-04T16:47:49.155Z
2485811
2017-08-04T16:47:52.014Z
2017-08-04T17:29:17.825Z
2017-08-04T16:47:56.195Z
2480733
2017-08-04T16:47:57.092Z
2017-08-04T17:29:17.825Z
2017-08-04T16:47:57.219Z
2006215
2017-08-04T16:55:51.610Z
2017-08-04T17:29:17.825Z
2017-08-04T16:55:52.122Z
1855046
2017-08-04T16:58:22.779Z
2017-08-04T17:29:17.825Z
2017-08-04T16:58:22.779Z
1821420
2017-08-04T16:58:56.405Z
2017-08-04T17:29:17.825Z
2017-08-04T16:58:56.405Z
1024530
2017-08-04T17:12:13.295Z
2017-08-04T17:29:17.825Z
2017-08-04T17:12:13.295Z
816489
2017-08-04T17:15:41.336Z
2017-08-04T17:29:17.825Z
2017-08-04T17:15:41.336Z
643966
2017-08-04T17:18:33.859Z
2017-08-04T17:29:17.825Z
2017-08-04T17:18:33.859Z
537666
2017-08-04T17:20:20.159Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:20.202Z
536551
2017-08-04T17:20:21.274Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:21.578Z
534668
2017-08-04T17:20:23.157Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:23.200Z
533943
2017-08-04T17:20:23.882Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:25.930Z
530743
2017-08-04T17:20:27.082Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:29.472Z
526945
2017-08-04T17:20:30.880Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:34.170Z
522671
2017-08-04T17:20:35.154Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:35.154Z
519260
2017-08-04T17:20:38.565Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:38.651Z
514913
2017-08-04T17:20:42.912Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:43.040Z
510924
2017-08-04T17:20:46.901Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:47.072Z
509388
2017-08-04T17:20:48.437Z
2017-08-04T17:29:17.825Z
2017-08-04T17:20:48.522Z
497563
2017-08-04T17:21:00.262Z
2017-08-04T17:29:17.825Z
2017-08-04T17:21:00.646Z
489563
2017-08-04T17:21:08.262Z
2017-08-04T17:29:17.825Z
2017-08-04T17:21:08.304Z
103018
2017-08-04T17:27:34.807Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:34.807Z
98469
2017-08-04T17:27:39.356Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:39.356Z
96038
2017-08-04T17:27:41.787Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:42.043Z
91563
2017-08-04T17:27:46.262Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:46.306Z
90539
2017-08-04T17:27:47.286Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:47.675Z
87477
2017-08-04T17:27:50.348Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:50.348Z
85534
2017-08-04T17:27:52.291Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:52.333Z
83769
2017-08-04T17:27:54.056Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:55.438Z
81747
2017-08-04T17:27:56.078Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:56.120Z
81065
2017-08-04T17:27:56.760Z
2017-08-04T17:29:17.825Z
2017-08-04T17:27:56.760Z
80078
2017-08-04T17:27:57.747Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:00.004Z
75469
2017-08-04T17:28:02.356Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:02.569Z
73543
2017-08-04T17:28:04.282Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:05.801Z
70888
2017-08-04T17:28:06.937Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:07.150Z
66397
2017-08-04T17:28:11.428Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:11.474Z
64381
2017-08-04T17:28:13.444Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:13.444Z
57488
2017-08-04T17:28:20.337Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:20.337Z
56785
2017-08-04T17:28:21.040Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:21.040Z
44401
2017-08-04T17:28:33.424Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:33.424Z
40911
2017-08-04T17:28:36.914Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:36.958Z
38632
2017-08-04T17:28:39.193Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:39.193Z
33009
2017-08-04T17:28:44.816Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:44.855Z
22141
2017-08-04T17:28:55.684Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:55.727Z
19058
2017-08-04T17:28:58.767Z
2017-08-04T17:29:17.825Z
2017-08-04T17:28:58.810Z
17768
2017-08-04T17:29:00.057Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:00.357Z
16648
2017-08-04T17:29:01.177Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:01.177Z
14777
2017-08-04T17:29:03.048Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:03.142Z
13819
2017-08-04T17:29:04.006Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:04.006Z
12860
2017-08-04T17:29:04.965Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:04.965Z
11434
2017-08-04T17:29:06.391Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:07.295Z
9889
2017-08-04T17:29:07.936Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:08.064Z
5260
2017-08-04T17:29:12.565Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:13.430Z
1799
2017-08-04T17:29:16.026Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:16.668Z
0
2017-08-04T17:29:17.825Z
2017-08-04T17:29:17.825Z
2017-08-04T17:29:17.867Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 3
5361
2017-08-04T17:29:12.517Z
2017-08-04T17:29:17.878Z
2017-08-04T17:29:12.651Z
1857
2017-08-04T17:29:16.021Z
2017-08-04T17:29:17.878Z
2017-08-04T17:29:16.461Z
0
2017-08-04T17:29:17.878Z
2017-08-04T17:29:17.878Z
2017-08-04T17:29:17.878Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 28
104031
2017-08-04T17:27:33.842Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:33.842Z
98497
2017-08-04T17:27:39.376Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:39.975Z
96449
2017-08-04T17:27:41.424Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:42.961Z
94272
2017-08-04T17:27:43.601Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:45.489Z
91563
2017-08-04T17:27:46.310Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:46.397Z
90404
2017-08-04T17:27:47.469Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:47.723Z
87520
2017-08-04T17:27:50.353Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:51.128Z
85620
2017-08-04T17:27:52.253Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:52.517Z
83812
2017-08-04T17:27:54.061Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:54.147Z
81795
2017-08-04T17:27:56.078Z
2017-08-04T17:29:17.873Z
2017-08-04T17:27:56.078Z
78654
2017-08-04T17:27:59.219Z
2017-08-04T17:29:17.873Z
2017-08-04T17:28:00.008Z
73630
2017-08-04T17:28:04.243Z
2017-08-04T17:29:17.873Z
2017-08-04T17:28:05.797Z
70904
2017-08-04T17:28:06.969Z
2017-08-04T17:29:17.873Z
2017-08-04T17:28:07.358Z
64541
2017-08-04T17:28:13.332Z
2017-08-04T17:29:17.873Z
2017-08-04T17:28:13.673Z
48350
2017-08-04T17:28:29.523Z
2017-08-04T17:29:17.873Z
2017-08-04T17:28:29.567Z
39082
2017-08-04T17:28:38.791Z
2017-08-04T17:29:17.873Z
2017-08-04T17:28:38.962Z
33076
2017-08-04T17:28:44.797Z
2017-08-04T17:29:17.873Z
2017-08-04T17:28:44.797Z
22152
2017-08-04T17:28:55.721Z
2017-08-04T17:29:17.873Z
2017-08-04T17:28:55.721Z
19063
2017-08-04T17:28:58.810Z
2017-08-04T17:29:17.873Z
2017-08-04T17:28:58.810Z
17821
2017-08-04T17:29:00.052Z
2017-08-04T17:29:17.873Z
2017-08-04T17:29:00.095Z
14839
2017-08-04T17:29:03.034Z
2017-08-04T17:29:17.873Z
2017-08-04T17:29:03.131Z
12918
2017-08-04T17:29:04.955Z
2017-08-04T17:29:17.873Z
2017-08-04T17:29:05.041Z
11409
2017-08-04T17:29:06.464Z
2017-08-04T17:29:17.873Z
2017-08-04T17:29:07.295Z
9936
2017-08-04T17:29:07.937Z
2017-08-04T17:29:17.873Z
2017-08-04T17:29:08.021Z
6385
2017-08-04T17:29:11.488Z
2017-08-04T17:29:17.873Z
2017-08-04T17:29:11.488Z
5313
2017-08-04T17:29:12.560Z
2017-08-04T17:29:17.873Z
2017-08-04T17:29:12.731Z
1809
2017-08-04T17:29:16.064Z
2017-08-04T17:29:17.873Z
2017-08-04T17:29:17.100Z
0
2017-08-04T17:29:17.873Z
2017-08-04T17:29:17.873Z
2017-08-04T17:29:17.873Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 7
5048996
2017-08-04T16:05:08.844Z
2017-08-04T17:29:17.840Z
2017-08-04T16:05:09.099Z
14822
2017-08-04T17:29:03.018Z
2017-08-04T17:29:17.840Z
2017-08-04T17:29:03.103Z
11238
2017-08-04T17:29:06.602Z
2017-08-04T17:29:17.840Z
2017-08-04T17:29:06.645Z
6352
2017-08-04T17:29:11.488Z
2017-08-04T17:29:17.840Z
2017-08-04T17:29:11.488Z
5280
2017-08-04T17:29:12.560Z
2017-08-04T17:29:17.840Z
2017-08-04T17:29:13.456Z
1792
2017-08-04T17:29:16.048Z
2017-08-04T17:29:17.840Z
2017-08-04T17:29:17.105Z
0
2017-08-04T17:29:17.840Z
2017-08-04T17:29:17.840Z
2017-08-04T17:29:17.883Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 4
6686
2017-08-04T17:29:12.517Z
2017-08-04T17:29:19.203Z
2017-08-04T17:29:12.651Z
3182
2017-08-04T17:29:16.021Z
2017-08-04T17:29:19.203Z
2017-08-04T17:29:16.461Z
1325
2017-08-04T17:29:17.878Z
2017-08-04T17:29:19.203Z
2017-08-04T17:29:17.878Z
0
2017-08-04T17:29:19.203Z
2017-08-04T17:29:19.203Z
2017-08-04T17:29:19.203Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 29
105316
2017-08-04T17:27:33.842Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:33.842Z
99782
2017-08-04T17:27:39.376Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:39.975Z
97734
2017-08-04T17:27:41.424Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:42.961Z
95557
2017-08-04T17:27:43.601Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:45.489Z
92848
2017-08-04T17:27:46.310Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:46.397Z
91689
2017-08-04T17:27:47.469Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:47.723Z
88805
2017-08-04T17:27:50.353Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:51.128Z
86905
2017-08-04T17:27:52.253Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:52.517Z
85097
2017-08-04T17:27:54.061Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:54.147Z
83080
2017-08-04T17:27:56.078Z
2017-08-04T17:29:19.158Z
2017-08-04T17:27:56.078Z
79939
2017-08-04T17:27:59.219Z
2017-08-04T17:29:19.158Z
2017-08-04T17:28:00.008Z
74915
2017-08-04T17:28:04.243Z
2017-08-04T17:29:19.158Z
2017-08-04T17:28:05.797Z
72189
2017-08-04T17:28:06.969Z
2017-08-04T17:29:19.158Z
2017-08-04T17:28:07.358Z
65826
2017-08-04T17:28:13.332Z
2017-08-04T17:29:19.158Z
2017-08-04T17:28:13.673Z
49635
2017-08-04T17:28:29.523Z
2017-08-04T17:29:19.158Z
2017-08-04T17:28:29.567Z
40367
2017-08-04T17:28:38.791Z
2017-08-04T17:29:19.158Z
2017-08-04T17:28:38.962Z
34361
2017-08-04T17:28:44.797Z
2017-08-04T17:29:19.158Z
2017-08-04T17:28:44.797Z
23437
2017-08-04T17:28:55.721Z
2017-08-04T17:29:19.158Z
2017-08-04T17:28:55.721Z
20348
2017-08-04T17:28:58.810Z
2017-08-04T17:29:19.158Z
2017-08-04T17:28:58.810Z
19106
2017-08-04T17:29:00.052Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:00.095Z
16124
2017-08-04T17:29:03.034Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:03.131Z
14203
2017-08-04T17:29:04.955Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:05.041Z
12694
2017-08-04T17:29:06.464Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:07.295Z
11221
2017-08-04T17:29:07.937Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:08.021Z
7670
2017-08-04T17:29:11.488Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:11.488Z
6598
2017-08-04T17:29:12.560Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:12.731Z
3094
2017-08-04T17:29:16.064Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:17.100Z
1285
2017-08-04T17:29:17.873Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:17.873Z
0
2017-08-04T17:29:19.158Z
2017-08-04T17:29:19.158Z
2017-08-04T17:29:20.657Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 76
5185029
2017-08-04T16:02:53.992Z
2017-08-04T17:29:19.021Z
2017-08-04T16:02:55.016Z
5110809
2017-08-04T16:04:08.212Z
2017-08-04T17:29:19.021Z
2017-08-04T16:04:09.113Z
5099085
2017-08-04T16:04:19.936Z
2017-08-04T17:29:19.021Z
2017-08-04T16:04:19.936Z
5077488
2017-08-04T16:04:41.533Z
2017-08-04T17:29:19.021Z
2017-08-04T16:04:41.533Z
5047784
2017-08-04T16:05:11.237Z
2017-08-04T17:29:19.021Z
2017-08-04T16:05:11.842Z
3483269
2017-08-04T16:31:15.752Z
2017-08-04T17:29:19.021Z
2017-08-04T16:31:16.861Z
3209462
2017-08-04T16:35:49.559Z
2017-08-04T17:29:19.021Z
2017-08-04T16:35:49.559Z
2850098
2017-08-04T16:41:48.923Z
2017-08-04T17:29:19.021Z
2017-08-04T16:41:48.923Z
2839613
2017-08-04T16:41:59.408Z
2017-08-04T17:29:19.021Z
2017-08-04T16:41:59.408Z
2822833
2017-08-04T16:42:16.188Z
2017-08-04T17:29:19.021Z
2017-08-04T16:42:16.657Z
2621251
2017-08-04T16:45:37.770Z
2017-08-04T17:29:19.021Z
2017-08-04T16:45:37.983Z
2617838
2017-08-04T16:45:41.183Z
2017-08-04T17:29:19.021Z
2017-08-04T16:45:41.268Z
2616174
2017-08-04T16:45:42.847Z
2017-08-04T17:29:19.021Z
2017-08-04T16:45:42.847Z
2614424
2017-08-04T16:45:44.597Z
2017-08-04T17:29:19.021Z
2017-08-04T16:45:44.597Z
2589852
2017-08-04T16:46:09.169Z
2017-08-04T17:29:19.021Z
2017-08-04T16:46:09.169Z
2520800
2017-08-04T16:47:18.221Z
2017-08-04T17:29:19.021Z
2017-08-04T16:47:19.117Z
2505029
2017-08-04T16:47:33.992Z
2017-08-04T17:29:19.021Z
2017-08-04T16:47:33.992Z
2504218
2017-08-04T16:47:34.803Z
2017-08-04T17:29:19.021Z
2017-08-04T16:47:35.368Z
2501050
2017-08-04T16:47:37.971Z
2017-08-04T17:29:19.021Z
2017-08-04T16:47:38.227Z
2491231
2017-08-04T16:47:47.790Z
2017-08-04T17:29:19.021Z
2017-08-04T16:47:49.155Z
2487007
2017-08-04T16:47:52.014Z
2017-08-04T17:29:19.021Z
2017-08-04T16:47:56.195Z
2481929
2017-08-04T16:47:57.092Z
2017-08-04T17:29:19.021Z
2017-08-04T16:47:57.219Z
2007411
2017-08-04T16:55:51.610Z
2017-08-04T17:29:19.021Z
2017-08-04T16:55:52.122Z
1856242
2017-08-04T16:58:22.779Z
2017-08-04T17:29:19.021Z
2017-08-04T16:58:22.779Z
1822616
2017-08-04T16:58:56.405Z
2017-08-04T17:29:19.021Z
2017-08-04T16:58:56.405Z
1025726
2017-08-04T17:12:13.295Z
2017-08-04T17:29:19.021Z
2017-08-04T17:12:13.295Z
817685
2017-08-04T17:15:41.336Z
2017-08-04T17:29:19.021Z
2017-08-04T17:15:41.336Z
645162
2017-08-04T17:18:33.859Z
2017-08-04T17:29:19.021Z
2017-08-04T17:18:33.859Z
538862
2017-08-04T17:20:20.159Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:20.202Z
537747
2017-08-04T17:20:21.274Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:21.578Z
535864
2017-08-04T17:20:23.157Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:23.200Z
535139
2017-08-04T17:20:23.882Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:25.930Z
531939
2017-08-04T17:20:27.082Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:29.472Z
528141
2017-08-04T17:20:30.880Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:34.170Z
523867
2017-08-04T17:20:35.154Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:35.154Z
520456
2017-08-04T17:20:38.565Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:38.651Z
516109
2017-08-04T17:20:42.912Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:43.040Z
512120
2017-08-04T17:20:46.901Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:47.072Z
510584
2017-08-04T17:20:48.437Z
2017-08-04T17:29:19.021Z
2017-08-04T17:20:48.522Z
498759
2017-08-04T17:21:00.262Z
2017-08-04T17:29:19.021Z
2017-08-04T17:21:00.646Z
490759
2017-08-04T17:21:08.262Z
2017-08-04T17:29:19.021Z
2017-08-04T17:21:08.304Z
104214
2017-08-04T17:27:34.807Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:34.807Z
99665
2017-08-04T17:27:39.356Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:39.356Z
97234
2017-08-04T17:27:41.787Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:42.043Z
92759
2017-08-04T17:27:46.262Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:46.306Z
91735
2017-08-04T17:27:47.286Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:47.675Z
88673
2017-08-04T17:27:50.348Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:50.348Z
86730
2017-08-04T17:27:52.291Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:52.333Z
84965
2017-08-04T17:27:54.056Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:55.438Z
82943
2017-08-04T17:27:56.078Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:56.120Z
82261
2017-08-04T17:27:56.760Z
2017-08-04T17:29:19.021Z
2017-08-04T17:27:56.760Z
81274
2017-08-04T17:27:57.747Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:00.004Z
76665
2017-08-04T17:28:02.356Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:02.569Z
74739
2017-08-04T17:28:04.282Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:05.801Z
72084
2017-08-04T17:28:06.937Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:07.150Z
67593
2017-08-04T17:28:11.428Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:11.474Z
65577
2017-08-04T17:28:13.444Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:13.444Z
58684
2017-08-04T17:28:20.337Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:20.337Z
57981
2017-08-04T17:28:21.040Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:21.040Z
45597
2017-08-04T17:28:33.424Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:33.424Z
42107
2017-08-04T17:28:36.914Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:36.958Z
39828
2017-08-04T17:28:39.193Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:39.193Z
34205
2017-08-04T17:28:44.816Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:44.855Z
23337
2017-08-04T17:28:55.684Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:55.727Z
20254
2017-08-04T17:28:58.767Z
2017-08-04T17:29:19.021Z
2017-08-04T17:28:58.810Z
18964
2017-08-04T17:29:00.057Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:00.357Z
17844
2017-08-04T17:29:01.177Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:01.177Z
15973
2017-08-04T17:29:03.048Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:03.142Z
15015
2017-08-04T17:29:04.006Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:04.006Z
14056
2017-08-04T17:29:04.965Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:04.965Z
12630
2017-08-04T17:29:06.391Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:07.295Z
11085
2017-08-04T17:29:07.936Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:08.064Z
6456
2017-08-04T17:29:12.565Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:13.430Z
2995
2017-08-04T17:29:16.026Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:16.668Z
1196
2017-08-04T17:29:17.825Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:17.867Z
0
2017-08-04T17:29:19.021Z
2017-08-04T17:29:19.021Z
2017-08-04T17:29:19.021Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 77
5185839
2017-08-04T16:02:53.992Z
2017-08-04T17:29:19.831Z
2017-08-04T16:02:55.016Z
5111619
2017-08-04T16:04:08.212Z
2017-08-04T17:29:19.831Z
2017-08-04T16:04:09.113Z
5099895
2017-08-04T16:04:19.936Z
2017-08-04T17:29:19.831Z
2017-08-04T16:04:19.936Z
5078298
2017-08-04T16:04:41.533Z
2017-08-04T17:29:19.831Z
2017-08-04T16:04:41.533Z
5048594
2017-08-04T16:05:11.237Z
2017-08-04T17:29:19.831Z
2017-08-04T16:05:11.842Z
3484079
2017-08-04T16:31:15.752Z
2017-08-04T17:29:19.831Z
2017-08-04T16:31:16.861Z
3210272
2017-08-04T16:35:49.559Z
2017-08-04T17:29:19.831Z
2017-08-04T16:35:49.559Z
2850908
2017-08-04T16:41:48.923Z
2017-08-04T17:29:19.831Z
2017-08-04T16:41:48.923Z
2840423
2017-08-04T16:41:59.408Z
2017-08-04T17:29:19.831Z
2017-08-04T16:41:59.408Z
2823643
2017-08-04T16:42:16.188Z
2017-08-04T17:29:19.831Z
2017-08-04T16:42:16.657Z
2622061
2017-08-04T16:45:37.770Z
2017-08-04T17:29:19.831Z
2017-08-04T16:45:37.983Z
2618648
2017-08-04T16:45:41.183Z
2017-08-04T17:29:19.831Z
2017-08-04T16:45:41.268Z
2616984
2017-08-04T16:45:42.847Z
2017-08-04T17:29:19.831Z
2017-08-04T16:45:42.847Z
2615234
2017-08-04T16:45:44.597Z
2017-08-04T17:29:19.831Z
2017-08-04T16:45:44.597Z
2590662
2017-08-04T16:46:09.169Z
2017-08-04T17:29:19.831Z
2017-08-04T16:46:09.169Z
2521610
2017-08-04T16:47:18.221Z
2017-08-04T17:29:19.831Z
2017-08-04T16:47:19.117Z
2505839
2017-08-04T16:47:33.992Z
2017-08-04T17:29:19.831Z
2017-08-04T16:47:33.992Z
2505028
2017-08-04T16:47:34.803Z
2017-08-04T17:29:19.831Z
2017-08-04T16:47:35.368Z
2501860
2017-08-04T16:47:37.971Z
2017-08-04T17:29:19.831Z
2017-08-04T16:47:38.227Z
2492041
2017-08-04T16:47:47.790Z
2017-08-04T17:29:19.831Z
2017-08-04T16:47:49.155Z
2487817
2017-08-04T16:47:52.014Z
2017-08-04T17:29:19.831Z
2017-08-04T16:47:56.195Z
2482739
2017-08-04T16:47:57.092Z
2017-08-04T17:29:19.831Z
2017-08-04T16:47:57.219Z
2008221
2017-08-04T16:55:51.610Z
2017-08-04T17:29:19.831Z
2017-08-04T16:55:52.122Z
1857052
2017-08-04T16:58:22.779Z
2017-08-04T17:29:19.831Z
2017-08-04T16:58:22.779Z
1823426
2017-08-04T16:58:56.405Z
2017-08-04T17:29:19.831Z
2017-08-04T16:58:56.405Z
1026536
2017-08-04T17:12:13.295Z
2017-08-04T17:29:19.831Z
2017-08-04T17:12:13.295Z
818495
2017-08-04T17:15:41.336Z
2017-08-04T17:29:19.831Z
2017-08-04T17:15:41.336Z
645972
2017-08-04T17:18:33.859Z
2017-08-04T17:29:19.831Z
2017-08-04T17:18:33.859Z
539672
2017-08-04T17:20:20.159Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:20.202Z
538557
2017-08-04T17:20:21.274Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:21.578Z
536674
2017-08-04T17:20:23.157Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:23.200Z
535949
2017-08-04T17:20:23.882Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:25.930Z
532749
2017-08-04T17:20:27.082Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:29.472Z
528951
2017-08-04T17:20:30.880Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:34.170Z
524677
2017-08-04T17:20:35.154Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:35.154Z
521266
2017-08-04T17:20:38.565Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:38.651Z
516919
2017-08-04T17:20:42.912Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:43.040Z
512930
2017-08-04T17:20:46.901Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:47.072Z
511394
2017-08-04T17:20:48.437Z
2017-08-04T17:29:19.831Z
2017-08-04T17:20:48.522Z
499569
2017-08-04T17:21:00.262Z
2017-08-04T17:29:19.831Z
2017-08-04T17:21:00.646Z
491569
2017-08-04T17:21:08.262Z
2017-08-04T17:29:19.831Z
2017-08-04T17:21:08.304Z
105024
2017-08-04T17:27:34.807Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:34.807Z
100475
2017-08-04T17:27:39.356Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:39.356Z
98044
2017-08-04T17:27:41.787Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:42.043Z
93569
2017-08-04T17:27:46.262Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:46.306Z
92545
2017-08-04T17:27:47.286Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:47.675Z
89483
2017-08-04T17:27:50.348Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:50.348Z
87540
2017-08-04T17:27:52.291Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:52.333Z
85775
2017-08-04T17:27:54.056Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:55.438Z
83753
2017-08-04T17:27:56.078Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:56.120Z
83071
2017-08-04T17:27:56.760Z
2017-08-04T17:29:19.831Z
2017-08-04T17:27:56.760Z
82084
2017-08-04T17:27:57.747Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:00.004Z
77475
2017-08-04T17:28:02.356Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:02.569Z
75549
2017-08-04T17:28:04.282Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:05.801Z
72894
2017-08-04T17:28:06.937Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:07.150Z
68403
2017-08-04T17:28:11.428Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:11.474Z
66387
2017-08-04T17:28:13.444Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:13.444Z
59494
2017-08-04T17:28:20.337Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:20.337Z
58791
2017-08-04T17:28:21.040Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:21.040Z
46407
2017-08-04T17:28:33.424Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:33.424Z
42917
2017-08-04T17:28:36.914Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:36.958Z
40638
2017-08-04T17:28:39.193Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:39.193Z
35015
2017-08-04T17:28:44.816Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:44.855Z
24147
2017-08-04T17:28:55.684Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:55.727Z
21064
2017-08-04T17:28:58.767Z
2017-08-04T17:29:19.831Z
2017-08-04T17:28:58.810Z
19774
2017-08-04T17:29:00.057Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:00.357Z
18654
2017-08-04T17:29:01.177Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:01.177Z
16783
2017-08-04T17:29:03.048Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:03.142Z
15825
2017-08-04T17:29:04.006Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:04.006Z
14866
2017-08-04T17:29:04.965Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:04.965Z
13440
2017-08-04T17:29:06.391Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:07.295Z
11895
2017-08-04T17:29:07.936Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:08.064Z
7266
2017-08-04T17:29:12.565Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:13.430Z
3805
2017-08-04T17:29:16.026Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:16.668Z
2006
2017-08-04T17:29:17.825Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:17.867Z
810
2017-08-04T17:29:19.021Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:19.021Z
0
2017-08-04T17:29:19.831Z
2017-08-04T17:29:19.831Z
2017-08-04T17:29:21.357Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 30
107508
2017-08-04T17:27:33.842Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:33.842Z
101974
2017-08-04T17:27:39.376Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:39.975Z
99926
2017-08-04T17:27:41.424Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:42.961Z
97749
2017-08-04T17:27:43.601Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:45.489Z
95040
2017-08-04T17:27:46.310Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:46.397Z
93881
2017-08-04T17:27:47.469Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:47.723Z
90997
2017-08-04T17:27:50.353Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:51.128Z
89097
2017-08-04T17:27:52.253Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:52.517Z
87289
2017-08-04T17:27:54.061Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:54.147Z
85272
2017-08-04T17:27:56.078Z
2017-08-04T17:29:21.350Z
2017-08-04T17:27:56.078Z
82131
2017-08-04T17:27:59.219Z
2017-08-04T17:29:21.350Z
2017-08-04T17:28:00.008Z
77107
2017-08-04T17:28:04.243Z
2017-08-04T17:29:21.350Z
2017-08-04T17:28:05.797Z
74381
2017-08-04T17:28:06.969Z
2017-08-04T17:29:21.350Z
2017-08-04T17:28:07.358Z
68018
2017-08-04T17:28:13.332Z
2017-08-04T17:29:21.350Z
2017-08-04T17:28:13.673Z
51827
2017-08-04T17:28:29.523Z
2017-08-04T17:29:21.350Z
2017-08-04T17:28:29.567Z
42559
2017-08-04T17:28:38.791Z
2017-08-04T17:29:21.350Z
2017-08-04T17:28:38.962Z
36553
2017-08-04T17:28:44.797Z
2017-08-04T17:29:21.350Z
2017-08-04T17:28:44.797Z
25629
2017-08-04T17:28:55.721Z
2017-08-04T17:29:21.350Z
2017-08-04T17:28:55.721Z
22540
2017-08-04T17:28:58.810Z
2017-08-04T17:29:21.350Z
2017-08-04T17:28:58.810Z
21298
2017-08-04T17:29:00.052Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:00.095Z
18316
2017-08-04T17:29:03.034Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:03.131Z
16395
2017-08-04T17:29:04.955Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:05.041Z
14886
2017-08-04T17:29:06.464Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:07.295Z
13413
2017-08-04T17:29:07.937Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:08.021Z
9862
2017-08-04T17:29:11.488Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:11.488Z
8790
2017-08-04T17:29:12.560Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:12.731Z
5286
2017-08-04T17:29:16.064Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:17.100Z
3477
2017-08-04T17:29:17.873Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:17.873Z
2192
2017-08-04T17:29:19.158Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:20.657Z
0
2017-08-04T17:29:21.350Z
2017-08-04T17:29:21.350Z
2017-08-04T17:29:21.350Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 5
7323
2017-08-04T17:29:12.517Z
2017-08-04T17:29:19.840Z
2017-08-04T17:29:12.651Z
3819
2017-08-04T17:29:16.021Z
2017-08-04T17:29:19.840Z
2017-08-04T17:29:16.461Z
1962
2017-08-04T17:29:17.878Z
2017-08-04T17:29:19.840Z
2017-08-04T17:29:17.878Z
637
2017-08-04T17:29:19.203Z
2017-08-04T17:29:19.840Z
2017-08-04T17:29:19.203Z
0
2017-08-04T17:29:19.840Z
2017-08-04T17:29:19.840Z
2017-08-04T17:29:20.651Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:24:41.621Z 2017-08-04T17:29:41.621Z
info: [end-meeting-job] checking all meetings...
info: utterances found: 8
5050362
2017-08-04T16:05:08.844Z
2017-08-04T17:29:19.206Z
2017-08-04T16:05:09.099Z
16188
2017-08-04T17:29:03.018Z
2017-08-04T17:29:19.206Z
2017-08-04T17:29:03.103Z
12604
2017-08-04T17:29:06.602Z
2017-08-04T17:29:19.206Z
2017-08-04T17:29:06.645Z
7718
2017-08-04T17:29:11.488Z
2017-08-04T17:29:19.206Z
2017-08-04T17:29:11.488Z
6646
2017-08-04T17:29:12.560Z
2017-08-04T17:29:19.206Z
2017-08-04T17:29:13.456Z
3158
2017-08-04T17:29:16.048Z
2017-08-04T17:29:19.206Z
2017-08-04T17:29:17.105Z
1366
2017-08-04T17:29:17.840Z
2017-08-04T17:29:19.206Z
2017-08-04T17:29:17.883Z
0
2017-08-04T17:29:19.206Z
2017-08-04T17:29:19.206Z
2017-08-04T17:29:21.361Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan, meep, mep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984af063fdd10ba54f6fa15,
       participant: 'dog',
       turns: 0.38461538461538464 },
     { _id: 5984af063fdd10ba54f6fa14,
       participant: 'jordan',
       turns: 0.46153846153846156 },
     { _id: 5984af063fdd10ba54f6fa13,
       participant: 'meep',
       turns: 0.08974358974358974 },
     { _id: 5984af063fdd10ba54f6fa12,
       participant: 'mep',
       turns: 0.0641025641025641 } ],
  meeting: 'no',
  transitions: 64,
  timestamp: 2017-08-04T17:29:42.067Z,
  from: 2017-08-04T17:24:41.621Z,
  to: 2017-08-04T17:29:41.621Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af063fdd10ba54f6fa15,
       participant: 'dog',
       turns: 0.38461538461538464 },
     { _id: 5984af063fdd10ba54f6fa14,
       participant: 'jordan',
       turns: 0.46153846153846156 },
     { _id: 5984af063fdd10ba54f6fa13,
       participant: 'meep',
       turns: 0.08974358974358974 },
     { _id: 5984af063fdd10ba54f6fa12,
       participant: 'mep',
       turns: 0.0641025641025641 } ],
  meeting: 'no',
  transitions: 64,
  timestamp: 2017-08-04T17:29:42.067Z,
  from: 2017-08-04T17:24:41.621Z,
  to: 2017-08-04T17:29:41.621Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af063fdd10ba54f6fa15,
       participant: 'dog',
       turns: 0.38461538461538464 },
     { _id: 5984af063fdd10ba54f6fa14,
       participant: 'jordan',
       turns: 0.46153846153846156 },
     { _id: 5984af063fdd10ba54f6fa13,
       participant: 'meep',
       turns: 0.08974358974358974 },
     { _id: 5984af063fdd10ba54f6fa12,
       participant: 'mep',
       turns: 0.0641025641025641 } ],
  meeting: 'no',
  transitions: 64,
  timestamp: 2017-08-04T17:29:42.067Z,
  from: 2017-08-04T17:24:41.621Z,
  to: 2017-08-04T17:29:41.621Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af063fdd10ba54f6fa15,
       participant: 'dog',
       turns: 0.38461538461538464 },
     { _id: 5984af063fdd10ba54f6fa14,
       participant: 'jordan',
       turns: 0.46153846153846156 },
     { _id: 5984af063fdd10ba54f6fa13,
       participant: 'meep',
       turns: 0.08974358974358974 },
     { _id: 5984af063fdd10ba54f6fa12,
       participant: 'mep',
       turns: 0.0641025641025641 } ],
  meeting: 'no',
  transitions: 64,
  timestamp: 2017-08-04T17:29:42.067Z,
  from: 2017-08-04T17:24:41.621Z,
  to: 2017-08-04T17:29:41.621Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 6
8823
2017-08-04T17:29:12.517Z
2017-08-04T17:29:21.340Z
2017-08-04T17:29:12.651Z
5319
2017-08-04T17:29:16.021Z
2017-08-04T17:29:21.340Z
2017-08-04T17:29:16.461Z
3462
2017-08-04T17:29:17.878Z
2017-08-04T17:29:21.340Z
2017-08-04T17:29:17.878Z
2137
2017-08-04T17:29:19.203Z
2017-08-04T17:29:21.340Z
2017-08-04T17:29:19.203Z
1500
2017-08-04T17:29:19.840Z
2017-08-04T17:29:21.340Z
2017-08-04T17:29:20.651Z
0
2017-08-04T17:29:21.340Z
2017-08-04T17:29:21.340Z
2017-08-04T17:29:21.552Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 78
5188715
2017-08-04T16:02:53.992Z
2017-08-04T17:29:22.707Z
2017-08-04T16:02:55.016Z
5114495
2017-08-04T16:04:08.212Z
2017-08-04T17:29:22.707Z
2017-08-04T16:04:09.113Z
5102771
2017-08-04T16:04:19.936Z
2017-08-04T17:29:22.707Z
2017-08-04T16:04:19.936Z
5081174
2017-08-04T16:04:41.533Z
2017-08-04T17:29:22.707Z
2017-08-04T16:04:41.533Z
5051470
2017-08-04T16:05:11.237Z
2017-08-04T17:29:22.707Z
2017-08-04T16:05:11.842Z
3486955
2017-08-04T16:31:15.752Z
2017-08-04T17:29:22.707Z
2017-08-04T16:31:16.861Z
3213148
2017-08-04T16:35:49.559Z
2017-08-04T17:29:22.707Z
2017-08-04T16:35:49.559Z
2853784
2017-08-04T16:41:48.923Z
2017-08-04T17:29:22.707Z
2017-08-04T16:41:48.923Z
2843299
2017-08-04T16:41:59.408Z
2017-08-04T17:29:22.707Z
2017-08-04T16:41:59.408Z
2826519
2017-08-04T16:42:16.188Z
2017-08-04T17:29:22.707Z
2017-08-04T16:42:16.657Z
2624937
2017-08-04T16:45:37.770Z
2017-08-04T17:29:22.707Z
2017-08-04T16:45:37.983Z
2621524
2017-08-04T16:45:41.183Z
2017-08-04T17:29:22.707Z
2017-08-04T16:45:41.268Z
2619860
2017-08-04T16:45:42.847Z
2017-08-04T17:29:22.707Z
2017-08-04T16:45:42.847Z
2618110
2017-08-04T16:45:44.597Z
2017-08-04T17:29:22.707Z
2017-08-04T16:45:44.597Z
2593538
2017-08-04T16:46:09.169Z
2017-08-04T17:29:22.707Z
2017-08-04T16:46:09.169Z
2524486
2017-08-04T16:47:18.221Z
2017-08-04T17:29:22.707Z
2017-08-04T16:47:19.117Z
2508715
2017-08-04T16:47:33.992Z
2017-08-04T17:29:22.707Z
2017-08-04T16:47:33.992Z
2507904
2017-08-04T16:47:34.803Z
2017-08-04T17:29:22.707Z
2017-08-04T16:47:35.368Z
2504736
2017-08-04T16:47:37.971Z
2017-08-04T17:29:22.707Z
2017-08-04T16:47:38.227Z
2494917
2017-08-04T16:47:47.790Z
2017-08-04T17:29:22.707Z
2017-08-04T16:47:49.155Z
2490693
2017-08-04T16:47:52.014Z
2017-08-04T17:29:22.707Z
2017-08-04T16:47:56.195Z
2485615
2017-08-04T16:47:57.092Z
2017-08-04T17:29:22.707Z
2017-08-04T16:47:57.219Z
2011097
2017-08-04T16:55:51.610Z
2017-08-04T17:29:22.707Z
2017-08-04T16:55:52.122Z
1859928
2017-08-04T16:58:22.779Z
2017-08-04T17:29:22.707Z
2017-08-04T16:58:22.779Z
1826302
2017-08-04T16:58:56.405Z
2017-08-04T17:29:22.707Z
2017-08-04T16:58:56.405Z
1029412
2017-08-04T17:12:13.295Z
2017-08-04T17:29:22.707Z
2017-08-04T17:12:13.295Z
821371
2017-08-04T17:15:41.336Z
2017-08-04T17:29:22.707Z
2017-08-04T17:15:41.336Z
648848
2017-08-04T17:18:33.859Z
2017-08-04T17:29:22.707Z
2017-08-04T17:18:33.859Z
542548
2017-08-04T17:20:20.159Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:20.202Z
541433
2017-08-04T17:20:21.274Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:21.578Z
539550
2017-08-04T17:20:23.157Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:23.200Z
538825
2017-08-04T17:20:23.882Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:25.930Z
535625
2017-08-04T17:20:27.082Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:29.472Z
531827
2017-08-04T17:20:30.880Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:34.170Z
527553
2017-08-04T17:20:35.154Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:35.154Z
524142
2017-08-04T17:20:38.565Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:38.651Z
519795
2017-08-04T17:20:42.912Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:43.040Z
515806
2017-08-04T17:20:46.901Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:47.072Z
514270
2017-08-04T17:20:48.437Z
2017-08-04T17:29:22.707Z
2017-08-04T17:20:48.522Z
502445
2017-08-04T17:21:00.262Z
2017-08-04T17:29:22.707Z
2017-08-04T17:21:00.646Z
494445
2017-08-04T17:21:08.262Z
2017-08-04T17:29:22.707Z
2017-08-04T17:21:08.304Z
107900
2017-08-04T17:27:34.807Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:34.807Z
103351
2017-08-04T17:27:39.356Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:39.356Z
100920
2017-08-04T17:27:41.787Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:42.043Z
96445
2017-08-04T17:27:46.262Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:46.306Z
95421
2017-08-04T17:27:47.286Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:47.675Z
92359
2017-08-04T17:27:50.348Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:50.348Z
90416
2017-08-04T17:27:52.291Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:52.333Z
88651
2017-08-04T17:27:54.056Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:55.438Z
86629
2017-08-04T17:27:56.078Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:56.120Z
85947
2017-08-04T17:27:56.760Z
2017-08-04T17:29:22.707Z
2017-08-04T17:27:56.760Z
84960
2017-08-04T17:27:57.747Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:00.004Z
80351
2017-08-04T17:28:02.356Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:02.569Z
78425
2017-08-04T17:28:04.282Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:05.801Z
75770
2017-08-04T17:28:06.937Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:07.150Z
71279
2017-08-04T17:28:11.428Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:11.474Z
69263
2017-08-04T17:28:13.444Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:13.444Z
62370
2017-08-04T17:28:20.337Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:20.337Z
61667
2017-08-04T17:28:21.040Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:21.040Z
49283
2017-08-04T17:28:33.424Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:33.424Z
45793
2017-08-04T17:28:36.914Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:36.958Z
43514
2017-08-04T17:28:39.193Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:39.193Z
37891
2017-08-04T17:28:44.816Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:44.855Z
27023
2017-08-04T17:28:55.684Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:55.727Z
23940
2017-08-04T17:28:58.767Z
2017-08-04T17:29:22.707Z
2017-08-04T17:28:58.810Z
22650
2017-08-04T17:29:00.057Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:00.357Z
21530
2017-08-04T17:29:01.177Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:01.177Z
19659
2017-08-04T17:29:03.048Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:03.142Z
18701
2017-08-04T17:29:04.006Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:04.006Z
17742
2017-08-04T17:29:04.965Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:04.965Z
16316
2017-08-04T17:29:06.391Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:07.295Z
14771
2017-08-04T17:29:07.936Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:08.064Z
10142
2017-08-04T17:29:12.565Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:13.430Z
6681
2017-08-04T17:29:16.026Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:16.668Z
4882
2017-08-04T17:29:17.825Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:17.867Z
3686
2017-08-04T17:29:19.021Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:19.021Z
2876
2017-08-04T17:29:19.831Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:21.357Z
0
2017-08-04T17:29:22.707Z
2017-08-04T17:29:22.707Z
2017-08-04T17:29:22.707Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 31
108924
2017-08-04T17:27:33.842Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:33.842Z
103390
2017-08-04T17:27:39.376Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:39.975Z
101342
2017-08-04T17:27:41.424Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:42.961Z
99165
2017-08-04T17:27:43.601Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:45.489Z
96456
2017-08-04T17:27:46.310Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:46.397Z
95297
2017-08-04T17:27:47.469Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:47.723Z
92413
2017-08-04T17:27:50.353Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:51.128Z
90513
2017-08-04T17:27:52.253Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:52.517Z
88705
2017-08-04T17:27:54.061Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:54.147Z
86688
2017-08-04T17:27:56.078Z
2017-08-04T17:29:22.766Z
2017-08-04T17:27:56.078Z
83547
2017-08-04T17:27:59.219Z
2017-08-04T17:29:22.766Z
2017-08-04T17:28:00.008Z
78523
2017-08-04T17:28:04.243Z
2017-08-04T17:29:22.766Z
2017-08-04T17:28:05.797Z
75797
2017-08-04T17:28:06.969Z
2017-08-04T17:29:22.766Z
2017-08-04T17:28:07.358Z
69434
2017-08-04T17:28:13.332Z
2017-08-04T17:29:22.766Z
2017-08-04T17:28:13.673Z
53243
2017-08-04T17:28:29.523Z
2017-08-04T17:29:22.766Z
2017-08-04T17:28:29.567Z
43975
2017-08-04T17:28:38.791Z
2017-08-04T17:29:22.766Z
2017-08-04T17:28:38.962Z
37969
2017-08-04T17:28:44.797Z
2017-08-04T17:29:22.766Z
2017-08-04T17:28:44.797Z
27045
2017-08-04T17:28:55.721Z
2017-08-04T17:29:22.766Z
2017-08-04T17:28:55.721Z
23956
2017-08-04T17:28:58.810Z
2017-08-04T17:29:22.766Z
2017-08-04T17:28:58.810Z
22714
2017-08-04T17:29:00.052Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:00.095Z
19732
2017-08-04T17:29:03.034Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:03.131Z
17811
2017-08-04T17:29:04.955Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:05.041Z
16302
2017-08-04T17:29:06.464Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:07.295Z
14829
2017-08-04T17:29:07.937Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:08.021Z
11278
2017-08-04T17:29:11.488Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:11.488Z
10206
2017-08-04T17:29:12.560Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:12.731Z
6702
2017-08-04T17:29:16.064Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:17.100Z
4893
2017-08-04T17:29:17.873Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:17.873Z
3608
2017-08-04T17:29:19.158Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:20.657Z
1416
2017-08-04T17:29:21.350Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:21.350Z
0
2017-08-04T17:29:22.766Z
2017-08-04T17:29:22.766Z
2017-08-04T17:29:22.766Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 9
5054878
2017-08-04T16:05:08.844Z
2017-08-04T17:29:23.722Z
2017-08-04T16:05:09.099Z
20704
2017-08-04T17:29:03.018Z
2017-08-04T17:29:23.722Z
2017-08-04T17:29:03.103Z
17120
2017-08-04T17:29:06.602Z
2017-08-04T17:29:23.722Z
2017-08-04T17:29:06.645Z
12234
2017-08-04T17:29:11.488Z
2017-08-04T17:29:23.722Z
2017-08-04T17:29:11.488Z
11162
2017-08-04T17:29:12.560Z
2017-08-04T17:29:23.722Z
2017-08-04T17:29:13.456Z
7674
2017-08-04T17:29:16.048Z
2017-08-04T17:29:23.722Z
2017-08-04T17:29:17.105Z
5882
2017-08-04T17:29:17.840Z
2017-08-04T17:29:23.722Z
2017-08-04T17:29:17.883Z
4516
2017-08-04T17:29:19.206Z
2017-08-04T17:29:23.722Z
2017-08-04T17:29:21.361Z
0
2017-08-04T17:29:23.722Z
2017-08-04T17:29:23.722Z
2017-08-04T17:29:24.026Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: should end?: 18663 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: utterances found: 7
10165
2017-08-04T17:29:12.517Z
2017-08-04T17:29:22.682Z
2017-08-04T17:29:12.651Z
6661
2017-08-04T17:29:16.021Z
2017-08-04T17:29:22.682Z
2017-08-04T17:29:16.461Z
4804
2017-08-04T17:29:17.878Z
2017-08-04T17:29:22.682Z
2017-08-04T17:29:17.878Z
3479
2017-08-04T17:29:19.203Z
2017-08-04T17:29:22.682Z
2017-08-04T17:29:19.203Z
2842
2017-08-04T17:29:19.840Z
2017-08-04T17:29:22.682Z
2017-08-04T17:29:20.651Z
1342
2017-08-04T17:29:21.340Z
2017-08-04T17:29:22.682Z
2017-08-04T17:29:21.552Z
0
2017-08-04T17:29:22.682Z
2017-08-04T17:29:22.682Z
2017-08-04T17:29:22.682Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 79
5189580
2017-08-04T16:02:53.992Z
2017-08-04T17:29:23.572Z
2017-08-04T16:02:55.016Z
5115360
2017-08-04T16:04:08.212Z
2017-08-04T17:29:23.572Z
2017-08-04T16:04:09.113Z
5103636
2017-08-04T16:04:19.936Z
2017-08-04T17:29:23.572Z
2017-08-04T16:04:19.936Z
5082039
2017-08-04T16:04:41.533Z
2017-08-04T17:29:23.572Z
2017-08-04T16:04:41.533Z
5052335
2017-08-04T16:05:11.237Z
2017-08-04T17:29:23.572Z
2017-08-04T16:05:11.842Z
3487820
2017-08-04T16:31:15.752Z
2017-08-04T17:29:23.572Z
2017-08-04T16:31:16.861Z
3214013
2017-08-04T16:35:49.559Z
2017-08-04T17:29:23.572Z
2017-08-04T16:35:49.559Z
2854649
2017-08-04T16:41:48.923Z
2017-08-04T17:29:23.572Z
2017-08-04T16:41:48.923Z
2844164
2017-08-04T16:41:59.408Z
2017-08-04T17:29:23.572Z
2017-08-04T16:41:59.408Z
2827384
2017-08-04T16:42:16.188Z
2017-08-04T17:29:23.572Z
2017-08-04T16:42:16.657Z
2625802
2017-08-04T16:45:37.770Z
2017-08-04T17:29:23.572Z
2017-08-04T16:45:37.983Z
2622389
2017-08-04T16:45:41.183Z
2017-08-04T17:29:23.572Z
2017-08-04T16:45:41.268Z
2620725
2017-08-04T16:45:42.847Z
2017-08-04T17:29:23.572Z
2017-08-04T16:45:42.847Z
2618975
2017-08-04T16:45:44.597Z
2017-08-04T17:29:23.572Z
2017-08-04T16:45:44.597Z
2594403
2017-08-04T16:46:09.169Z
2017-08-04T17:29:23.572Z
2017-08-04T16:46:09.169Z
2525351
2017-08-04T16:47:18.221Z
2017-08-04T17:29:23.572Z
2017-08-04T16:47:19.117Z
2509580
2017-08-04T16:47:33.992Z
2017-08-04T17:29:23.572Z
2017-08-04T16:47:33.992Z
2508769
2017-08-04T16:47:34.803Z
2017-08-04T17:29:23.572Z
2017-08-04T16:47:35.368Z
2505601
2017-08-04T16:47:37.971Z
2017-08-04T17:29:23.572Z
2017-08-04T16:47:38.227Z
2495782
2017-08-04T16:47:47.790Z
2017-08-04T17:29:23.572Z
2017-08-04T16:47:49.155Z
2491558
2017-08-04T16:47:52.014Z
2017-08-04T17:29:23.572Z
2017-08-04T16:47:56.195Z
2486480
2017-08-04T16:47:57.092Z
2017-08-04T17:29:23.572Z
2017-08-04T16:47:57.219Z
2011962
2017-08-04T16:55:51.610Z
2017-08-04T17:29:23.572Z
2017-08-04T16:55:52.122Z
1860793
2017-08-04T16:58:22.779Z
2017-08-04T17:29:23.572Z
2017-08-04T16:58:22.779Z
1827167
2017-08-04T16:58:56.405Z
2017-08-04T17:29:23.572Z
2017-08-04T16:58:56.405Z
1030277
2017-08-04T17:12:13.295Z
2017-08-04T17:29:23.572Z
2017-08-04T17:12:13.295Z
822236
2017-08-04T17:15:41.336Z
2017-08-04T17:29:23.572Z
2017-08-04T17:15:41.336Z
649713
2017-08-04T17:18:33.859Z
2017-08-04T17:29:23.572Z
2017-08-04T17:18:33.859Z
543413
2017-08-04T17:20:20.159Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:20.202Z
542298
2017-08-04T17:20:21.274Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:21.578Z
540415
2017-08-04T17:20:23.157Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:23.200Z
539690
2017-08-04T17:20:23.882Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:25.930Z
536490
2017-08-04T17:20:27.082Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:29.472Z
532692
2017-08-04T17:20:30.880Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:34.170Z
528418
2017-08-04T17:20:35.154Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:35.154Z
525007
2017-08-04T17:20:38.565Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:38.651Z
520660
2017-08-04T17:20:42.912Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:43.040Z
516671
2017-08-04T17:20:46.901Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:47.072Z
515135
2017-08-04T17:20:48.437Z
2017-08-04T17:29:23.572Z
2017-08-04T17:20:48.522Z
503310
2017-08-04T17:21:00.262Z
2017-08-04T17:29:23.572Z
2017-08-04T17:21:00.646Z
495310
2017-08-04T17:21:08.262Z
2017-08-04T17:29:23.572Z
2017-08-04T17:21:08.304Z
108765
2017-08-04T17:27:34.807Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:34.807Z
104216
2017-08-04T17:27:39.356Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:39.356Z
101785
2017-08-04T17:27:41.787Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:42.043Z
97310
2017-08-04T17:27:46.262Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:46.306Z
96286
2017-08-04T17:27:47.286Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:47.675Z
93224
2017-08-04T17:27:50.348Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:50.348Z
91281
2017-08-04T17:27:52.291Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:52.333Z
89516
2017-08-04T17:27:54.056Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:55.438Z
87494
2017-08-04T17:27:56.078Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:56.120Z
86812
2017-08-04T17:27:56.760Z
2017-08-04T17:29:23.572Z
2017-08-04T17:27:56.760Z
85825
2017-08-04T17:27:57.747Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:00.004Z
81216
2017-08-04T17:28:02.356Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:02.569Z
79290
2017-08-04T17:28:04.282Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:05.801Z
76635
2017-08-04T17:28:06.937Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:07.150Z
72144
2017-08-04T17:28:11.428Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:11.474Z
70128
2017-08-04T17:28:13.444Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:13.444Z
63235
2017-08-04T17:28:20.337Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:20.337Z
62532
2017-08-04T17:28:21.040Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:21.040Z
50148
2017-08-04T17:28:33.424Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:33.424Z
46658
2017-08-04T17:28:36.914Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:36.958Z
44379
2017-08-04T17:28:39.193Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:39.193Z
38756
2017-08-04T17:28:44.816Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:44.855Z
27888
2017-08-04T17:28:55.684Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:55.727Z
24805
2017-08-04T17:28:58.767Z
2017-08-04T17:29:23.572Z
2017-08-04T17:28:58.810Z
23515
2017-08-04T17:29:00.057Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:00.357Z
22395
2017-08-04T17:29:01.177Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:01.177Z
20524
2017-08-04T17:29:03.048Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:03.142Z
19566
2017-08-04T17:29:04.006Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:04.006Z
18607
2017-08-04T17:29:04.965Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:04.965Z
17181
2017-08-04T17:29:06.391Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:07.295Z
15636
2017-08-04T17:29:07.936Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:08.064Z
11007
2017-08-04T17:29:12.565Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:13.430Z
7546
2017-08-04T17:29:16.026Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:16.668Z
5747
2017-08-04T17:29:17.825Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:17.867Z
4551
2017-08-04T17:29:19.021Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:19.021Z
3741
2017-08-04T17:29:19.831Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:21.357Z
865
2017-08-04T17:29:22.707Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:22.707Z
0
2017-08-04T17:29:23.572Z
2017-08-04T17:29:23.572Z
2017-08-04T17:29:24.016Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 32
109661
2017-08-04T17:27:33.842Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:33.842Z
104127
2017-08-04T17:27:39.376Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:39.975Z
102079
2017-08-04T17:27:41.424Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:42.961Z
99902
2017-08-04T17:27:43.601Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:45.489Z
97193
2017-08-04T17:27:46.310Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:46.397Z
96034
2017-08-04T17:27:47.469Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:47.723Z
93150
2017-08-04T17:27:50.353Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:51.128Z
91250
2017-08-04T17:27:52.253Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:52.517Z
89442
2017-08-04T17:27:54.061Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:54.147Z
87425
2017-08-04T17:27:56.078Z
2017-08-04T17:29:23.503Z
2017-08-04T17:27:56.078Z
84284
2017-08-04T17:27:59.219Z
2017-08-04T17:29:23.503Z
2017-08-04T17:28:00.008Z
79260
2017-08-04T17:28:04.243Z
2017-08-04T17:29:23.503Z
2017-08-04T17:28:05.797Z
76534
2017-08-04T17:28:06.969Z
2017-08-04T17:29:23.503Z
2017-08-04T17:28:07.358Z
70171
2017-08-04T17:28:13.332Z
2017-08-04T17:29:23.503Z
2017-08-04T17:28:13.673Z
53980
2017-08-04T17:28:29.523Z
2017-08-04T17:29:23.503Z
2017-08-04T17:28:29.567Z
44712
2017-08-04T17:28:38.791Z
2017-08-04T17:29:23.503Z
2017-08-04T17:28:38.962Z
38706
2017-08-04T17:28:44.797Z
2017-08-04T17:29:23.503Z
2017-08-04T17:28:44.797Z
27782
2017-08-04T17:28:55.721Z
2017-08-04T17:29:23.503Z
2017-08-04T17:28:55.721Z
24693
2017-08-04T17:28:58.810Z
2017-08-04T17:29:23.503Z
2017-08-04T17:28:58.810Z
23451
2017-08-04T17:29:00.052Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:00.095Z
20469
2017-08-04T17:29:03.034Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:03.131Z
18548
2017-08-04T17:29:04.955Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:05.041Z
17039
2017-08-04T17:29:06.464Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:07.295Z
15566
2017-08-04T17:29:07.937Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:08.021Z
12015
2017-08-04T17:29:11.488Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:11.488Z
10943
2017-08-04T17:29:12.560Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:12.731Z
7439
2017-08-04T17:29:16.064Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:17.100Z
5630
2017-08-04T17:29:17.873Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:17.873Z
4345
2017-08-04T17:29:19.158Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:20.657Z
2153
2017-08-04T17:29:21.350Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:21.350Z
737
2017-08-04T17:29:22.766Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:22.766Z
0
2017-08-04T17:29:23.503Z
2017-08-04T17:29:23.503Z
2017-08-04T17:29:24.026Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 10
5056238
2017-08-04T16:05:08.844Z
2017-08-04T17:29:25.082Z
2017-08-04T16:05:09.099Z
22064
2017-08-04T17:29:03.018Z
2017-08-04T17:29:25.082Z
2017-08-04T17:29:03.103Z
18480
2017-08-04T17:29:06.602Z
2017-08-04T17:29:25.082Z
2017-08-04T17:29:06.645Z
13594
2017-08-04T17:29:11.488Z
2017-08-04T17:29:25.082Z
2017-08-04T17:29:11.488Z
12522
2017-08-04T17:29:12.560Z
2017-08-04T17:29:25.082Z
2017-08-04T17:29:13.456Z
9034
2017-08-04T17:29:16.048Z
2017-08-04T17:29:25.082Z
2017-08-04T17:29:17.105Z
7242
2017-08-04T17:29:17.840Z
2017-08-04T17:29:25.082Z
2017-08-04T17:29:17.883Z
5876
2017-08-04T17:29:19.206Z
2017-08-04T17:29:25.082Z
2017-08-04T17:29:21.361Z
1360
2017-08-04T17:29:23.722Z
2017-08-04T17:29:25.082Z
2017-08-04T17:29:24.026Z
0
2017-08-04T17:29:25.082Z
2017-08-04T17:29:25.082Z
2017-08-04T17:29:25.466Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 8
11188
2017-08-04T17:29:12.517Z
2017-08-04T17:29:23.705Z
2017-08-04T17:29:12.651Z
7684
2017-08-04T17:29:16.021Z
2017-08-04T17:29:23.705Z
2017-08-04T17:29:16.461Z
5827
2017-08-04T17:29:17.878Z
2017-08-04T17:29:23.705Z
2017-08-04T17:29:17.878Z
4502
2017-08-04T17:29:19.203Z
2017-08-04T17:29:23.705Z
2017-08-04T17:29:19.203Z
3865
2017-08-04T17:29:19.840Z
2017-08-04T17:29:23.705Z
2017-08-04T17:29:20.651Z
2365
2017-08-04T17:29:21.340Z
2017-08-04T17:29:23.705Z
2017-08-04T17:29:21.552Z
1023
2017-08-04T17:29:22.682Z
2017-08-04T17:29:23.705Z
2017-08-04T17:29:22.682Z
0
2017-08-04T17:29:23.705Z
2017-08-04T17:29:23.705Z
2017-08-04T17:29:23.931Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 80
5191442
2017-08-04T16:02:53.992Z
2017-08-04T17:29:25.434Z
2017-08-04T16:02:55.016Z
5117222
2017-08-04T16:04:08.212Z
2017-08-04T17:29:25.434Z
2017-08-04T16:04:09.113Z
5105498
2017-08-04T16:04:19.936Z
2017-08-04T17:29:25.434Z
2017-08-04T16:04:19.936Z
5083901
2017-08-04T16:04:41.533Z
2017-08-04T17:29:25.434Z
2017-08-04T16:04:41.533Z
5054197
2017-08-04T16:05:11.237Z
2017-08-04T17:29:25.434Z
2017-08-04T16:05:11.842Z
3489682
2017-08-04T16:31:15.752Z
2017-08-04T17:29:25.434Z
2017-08-04T16:31:16.861Z
3215875
2017-08-04T16:35:49.559Z
2017-08-04T17:29:25.434Z
2017-08-04T16:35:49.559Z
2856511
2017-08-04T16:41:48.923Z
2017-08-04T17:29:25.434Z
2017-08-04T16:41:48.923Z
2846026
2017-08-04T16:41:59.408Z
2017-08-04T17:29:25.434Z
2017-08-04T16:41:59.408Z
2829246
2017-08-04T16:42:16.188Z
2017-08-04T17:29:25.434Z
2017-08-04T16:42:16.657Z
2627664
2017-08-04T16:45:37.770Z
2017-08-04T17:29:25.434Z
2017-08-04T16:45:37.983Z
2624251
2017-08-04T16:45:41.183Z
2017-08-04T17:29:25.434Z
2017-08-04T16:45:41.268Z
2622587
2017-08-04T16:45:42.847Z
2017-08-04T17:29:25.434Z
2017-08-04T16:45:42.847Z
2620837
2017-08-04T16:45:44.597Z
2017-08-04T17:29:25.434Z
2017-08-04T16:45:44.597Z
2596265
2017-08-04T16:46:09.169Z
2017-08-04T17:29:25.434Z
2017-08-04T16:46:09.169Z
2527213
2017-08-04T16:47:18.221Z
2017-08-04T17:29:25.434Z
2017-08-04T16:47:19.117Z
2511442
2017-08-04T16:47:33.992Z
2017-08-04T17:29:25.434Z
2017-08-04T16:47:33.992Z
2510631
2017-08-04T16:47:34.803Z
2017-08-04T17:29:25.434Z
2017-08-04T16:47:35.368Z
2507463
2017-08-04T16:47:37.971Z
2017-08-04T17:29:25.434Z
2017-08-04T16:47:38.227Z
2497644
2017-08-04T16:47:47.790Z
2017-08-04T17:29:25.434Z
2017-08-04T16:47:49.155Z
2493420
2017-08-04T16:47:52.014Z
2017-08-04T17:29:25.434Z
2017-08-04T16:47:56.195Z
2488342
2017-08-04T16:47:57.092Z
2017-08-04T17:29:25.434Z
2017-08-04T16:47:57.219Z
2013824
2017-08-04T16:55:51.610Z
2017-08-04T17:29:25.434Z
2017-08-04T16:55:52.122Z
1862655
2017-08-04T16:58:22.779Z
2017-08-04T17:29:25.434Z
2017-08-04T16:58:22.779Z
1829029
2017-08-04T16:58:56.405Z
2017-08-04T17:29:25.434Z
2017-08-04T16:58:56.405Z
1032139
2017-08-04T17:12:13.295Z
2017-08-04T17:29:25.434Z
2017-08-04T17:12:13.295Z
824098
2017-08-04T17:15:41.336Z
2017-08-04T17:29:25.434Z
2017-08-04T17:15:41.336Z
651575
2017-08-04T17:18:33.859Z
2017-08-04T17:29:25.434Z
2017-08-04T17:18:33.859Z
545275
2017-08-04T17:20:20.159Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:20.202Z
544160
2017-08-04T17:20:21.274Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:21.578Z
542277
2017-08-04T17:20:23.157Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:23.200Z
541552
2017-08-04T17:20:23.882Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:25.930Z
538352
2017-08-04T17:20:27.082Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:29.472Z
534554
2017-08-04T17:20:30.880Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:34.170Z
530280
2017-08-04T17:20:35.154Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:35.154Z
526869
2017-08-04T17:20:38.565Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:38.651Z
522522
2017-08-04T17:20:42.912Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:43.040Z
518533
2017-08-04T17:20:46.901Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:47.072Z
516997
2017-08-04T17:20:48.437Z
2017-08-04T17:29:25.434Z
2017-08-04T17:20:48.522Z
505172
2017-08-04T17:21:00.262Z
2017-08-04T17:29:25.434Z
2017-08-04T17:21:00.646Z
497172
2017-08-04T17:21:08.262Z
2017-08-04T17:29:25.434Z
2017-08-04T17:21:08.304Z
110627
2017-08-04T17:27:34.807Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:34.807Z
106078
2017-08-04T17:27:39.356Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:39.356Z
103647
2017-08-04T17:27:41.787Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:42.043Z
99172
2017-08-04T17:27:46.262Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:46.306Z
98148
2017-08-04T17:27:47.286Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:47.675Z
95086
2017-08-04T17:27:50.348Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:50.348Z
93143
2017-08-04T17:27:52.291Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:52.333Z
91378
2017-08-04T17:27:54.056Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:55.438Z
89356
2017-08-04T17:27:56.078Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:56.120Z
88674
2017-08-04T17:27:56.760Z
2017-08-04T17:29:25.434Z
2017-08-04T17:27:56.760Z
87687
2017-08-04T17:27:57.747Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:00.004Z
83078
2017-08-04T17:28:02.356Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:02.569Z
81152
2017-08-04T17:28:04.282Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:05.801Z
78497
2017-08-04T17:28:06.937Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:07.150Z
74006
2017-08-04T17:28:11.428Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:11.474Z
71990
2017-08-04T17:28:13.444Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:13.444Z
65097
2017-08-04T17:28:20.337Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:20.337Z
64394
2017-08-04T17:28:21.040Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:21.040Z
52010
2017-08-04T17:28:33.424Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:33.424Z
48520
2017-08-04T17:28:36.914Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:36.958Z
46241
2017-08-04T17:28:39.193Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:39.193Z
40618
2017-08-04T17:28:44.816Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:44.855Z
29750
2017-08-04T17:28:55.684Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:55.727Z
26667
2017-08-04T17:28:58.767Z
2017-08-04T17:29:25.434Z
2017-08-04T17:28:58.810Z
25377
2017-08-04T17:29:00.057Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:00.357Z
24257
2017-08-04T17:29:01.177Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:01.177Z
22386
2017-08-04T17:29:03.048Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:03.142Z
21428
2017-08-04T17:29:04.006Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:04.006Z
20469
2017-08-04T17:29:04.965Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:04.965Z
19043
2017-08-04T17:29:06.391Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:07.295Z
17498
2017-08-04T17:29:07.936Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:08.064Z
12869
2017-08-04T17:29:12.565Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:13.430Z
9408
2017-08-04T17:29:16.026Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:16.668Z
7609
2017-08-04T17:29:17.825Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:17.867Z
6413
2017-08-04T17:29:19.021Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:19.021Z
5603
2017-08-04T17:29:19.831Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:21.357Z
2727
2017-08-04T17:29:22.707Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:22.707Z
1862
2017-08-04T17:29:23.572Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:24.016Z
0
2017-08-04T17:29:25.434Z
2017-08-04T17:29:25.434Z
2017-08-04T17:29:25.478Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 33
111229
2017-08-04T17:27:33.842Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:33.842Z
105695
2017-08-04T17:27:39.376Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:39.975Z
103647
2017-08-04T17:27:41.424Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:42.961Z
101470
2017-08-04T17:27:43.601Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:45.489Z
98761
2017-08-04T17:27:46.310Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:46.397Z
97602
2017-08-04T17:27:47.469Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:47.723Z
94718
2017-08-04T17:27:50.353Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:51.128Z
92818
2017-08-04T17:27:52.253Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:52.517Z
91010
2017-08-04T17:27:54.061Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:54.147Z
88993
2017-08-04T17:27:56.078Z
2017-08-04T17:29:25.071Z
2017-08-04T17:27:56.078Z
85852
2017-08-04T17:27:59.219Z
2017-08-04T17:29:25.071Z
2017-08-04T17:28:00.008Z
80828
2017-08-04T17:28:04.243Z
2017-08-04T17:29:25.071Z
2017-08-04T17:28:05.797Z
78102
2017-08-04T17:28:06.969Z
2017-08-04T17:29:25.071Z
2017-08-04T17:28:07.358Z
71739
2017-08-04T17:28:13.332Z
2017-08-04T17:29:25.071Z
2017-08-04T17:28:13.673Z
55548
2017-08-04T17:28:29.523Z
2017-08-04T17:29:25.071Z
2017-08-04T17:28:29.567Z
46280
2017-08-04T17:28:38.791Z
2017-08-04T17:29:25.071Z
2017-08-04T17:28:38.962Z
40274
2017-08-04T17:28:44.797Z
2017-08-04T17:29:25.071Z
2017-08-04T17:28:44.797Z
29350
2017-08-04T17:28:55.721Z
2017-08-04T17:29:25.071Z
2017-08-04T17:28:55.721Z
26261
2017-08-04T17:28:58.810Z
2017-08-04T17:29:25.071Z
2017-08-04T17:28:58.810Z
25019
2017-08-04T17:29:00.052Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:00.095Z
22037
2017-08-04T17:29:03.034Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:03.131Z
20116
2017-08-04T17:29:04.955Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:05.041Z
18607
2017-08-04T17:29:06.464Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:07.295Z
17134
2017-08-04T17:29:07.937Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:08.021Z
13583
2017-08-04T17:29:11.488Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:11.488Z
12511
2017-08-04T17:29:12.560Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:12.731Z
9007
2017-08-04T17:29:16.064Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:17.100Z
7198
2017-08-04T17:29:17.873Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:17.873Z
5913
2017-08-04T17:29:19.158Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:20.657Z
3721
2017-08-04T17:29:21.350Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:21.350Z
2305
2017-08-04T17:29:22.766Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:22.766Z
1568
2017-08-04T17:29:23.503Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:24.026Z
0
2017-08-04T17:29:25.071Z
2017-08-04T17:29:25.071Z
2017-08-04T17:29:25.583Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 11
5060256
2017-08-04T16:05:08.844Z
2017-08-04T17:29:29.100Z
2017-08-04T16:05:09.099Z
26082
2017-08-04T17:29:03.018Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:03.103Z
22498
2017-08-04T17:29:06.602Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:06.645Z
17612
2017-08-04T17:29:11.488Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:11.488Z
16540
2017-08-04T17:29:12.560Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:13.456Z
13052
2017-08-04T17:29:16.048Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:17.105Z
11260
2017-08-04T17:29:17.840Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:17.883Z
9894
2017-08-04T17:29:19.206Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:21.361Z
5378
2017-08-04T17:29:23.722Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:24.026Z
4018
2017-08-04T17:29:25.082Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:25.466Z
0
2017-08-04T17:29:29.100Z
2017-08-04T17:29:29.100Z
2017-08-04T17:29:29.148Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 81
5193517
2017-08-04T16:02:53.992Z
2017-08-04T17:29:27.509Z
2017-08-04T16:02:55.016Z
5119297
2017-08-04T16:04:08.212Z
2017-08-04T17:29:27.509Z
2017-08-04T16:04:09.113Z
5107573
2017-08-04T16:04:19.936Z
2017-08-04T17:29:27.509Z
2017-08-04T16:04:19.936Z
5085976
2017-08-04T16:04:41.533Z
2017-08-04T17:29:27.509Z
2017-08-04T16:04:41.533Z
5056272
2017-08-04T16:05:11.237Z
2017-08-04T17:29:27.509Z
2017-08-04T16:05:11.842Z
3491757
2017-08-04T16:31:15.752Z
2017-08-04T17:29:27.509Z
2017-08-04T16:31:16.861Z
3217950
2017-08-04T16:35:49.559Z
2017-08-04T17:29:27.509Z
2017-08-04T16:35:49.559Z
2858586
2017-08-04T16:41:48.923Z
2017-08-04T17:29:27.509Z
2017-08-04T16:41:48.923Z
2848101
2017-08-04T16:41:59.408Z
2017-08-04T17:29:27.509Z
2017-08-04T16:41:59.408Z
2831321
2017-08-04T16:42:16.188Z
2017-08-04T17:29:27.509Z
2017-08-04T16:42:16.657Z
2629739
2017-08-04T16:45:37.770Z
2017-08-04T17:29:27.509Z
2017-08-04T16:45:37.983Z
2626326
2017-08-04T16:45:41.183Z
2017-08-04T17:29:27.509Z
2017-08-04T16:45:41.268Z
2624662
2017-08-04T16:45:42.847Z
2017-08-04T17:29:27.509Z
2017-08-04T16:45:42.847Z
2622912
2017-08-04T16:45:44.597Z
2017-08-04T17:29:27.509Z
2017-08-04T16:45:44.597Z
2598340
2017-08-04T16:46:09.169Z
2017-08-04T17:29:27.509Z
2017-08-04T16:46:09.169Z
2529288
2017-08-04T16:47:18.221Z
2017-08-04T17:29:27.509Z
2017-08-04T16:47:19.117Z
2513517
2017-08-04T16:47:33.992Z
2017-08-04T17:29:27.509Z
2017-08-04T16:47:33.992Z
2512706
2017-08-04T16:47:34.803Z
2017-08-04T17:29:27.509Z
2017-08-04T16:47:35.368Z
2509538
2017-08-04T16:47:37.971Z
2017-08-04T17:29:27.509Z
2017-08-04T16:47:38.227Z
2499719
2017-08-04T16:47:47.790Z
2017-08-04T17:29:27.509Z
2017-08-04T16:47:49.155Z
2495495
2017-08-04T16:47:52.014Z
2017-08-04T17:29:27.509Z
2017-08-04T16:47:56.195Z
2490417
2017-08-04T16:47:57.092Z
2017-08-04T17:29:27.509Z
2017-08-04T16:47:57.219Z
2015899
2017-08-04T16:55:51.610Z
2017-08-04T17:29:27.509Z
2017-08-04T16:55:52.122Z
1864730
2017-08-04T16:58:22.779Z
2017-08-04T17:29:27.509Z
2017-08-04T16:58:22.779Z
1831104
2017-08-04T16:58:56.405Z
2017-08-04T17:29:27.509Z
2017-08-04T16:58:56.405Z
1034214
2017-08-04T17:12:13.295Z
2017-08-04T17:29:27.509Z
2017-08-04T17:12:13.295Z
826173
2017-08-04T17:15:41.336Z
2017-08-04T17:29:27.509Z
2017-08-04T17:15:41.336Z
653650
2017-08-04T17:18:33.859Z
2017-08-04T17:29:27.509Z
2017-08-04T17:18:33.859Z
547350
2017-08-04T17:20:20.159Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:20.202Z
546235
2017-08-04T17:20:21.274Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:21.578Z
544352
2017-08-04T17:20:23.157Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:23.200Z
543627
2017-08-04T17:20:23.882Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:25.930Z
540427
2017-08-04T17:20:27.082Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:29.472Z
536629
2017-08-04T17:20:30.880Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:34.170Z
532355
2017-08-04T17:20:35.154Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:35.154Z
528944
2017-08-04T17:20:38.565Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:38.651Z
524597
2017-08-04T17:20:42.912Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:43.040Z
520608
2017-08-04T17:20:46.901Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:47.072Z
519072
2017-08-04T17:20:48.437Z
2017-08-04T17:29:27.509Z
2017-08-04T17:20:48.522Z
507247
2017-08-04T17:21:00.262Z
2017-08-04T17:29:27.509Z
2017-08-04T17:21:00.646Z
499247
2017-08-04T17:21:08.262Z
2017-08-04T17:29:27.509Z
2017-08-04T17:21:08.304Z
112702
2017-08-04T17:27:34.807Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:34.807Z
108153
2017-08-04T17:27:39.356Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:39.356Z
105722
2017-08-04T17:27:41.787Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:42.043Z
101247
2017-08-04T17:27:46.262Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:46.306Z
100223
2017-08-04T17:27:47.286Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:47.675Z
97161
2017-08-04T17:27:50.348Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:50.348Z
95218
2017-08-04T17:27:52.291Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:52.333Z
93453
2017-08-04T17:27:54.056Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:55.438Z
91431
2017-08-04T17:27:56.078Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:56.120Z
90749
2017-08-04T17:27:56.760Z
2017-08-04T17:29:27.509Z
2017-08-04T17:27:56.760Z
89762
2017-08-04T17:27:57.747Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:00.004Z
85153
2017-08-04T17:28:02.356Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:02.569Z
83227
2017-08-04T17:28:04.282Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:05.801Z
80572
2017-08-04T17:28:06.937Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:07.150Z
76081
2017-08-04T17:28:11.428Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:11.474Z
74065
2017-08-04T17:28:13.444Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:13.444Z
67172
2017-08-04T17:28:20.337Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:20.337Z
66469
2017-08-04T17:28:21.040Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:21.040Z
54085
2017-08-04T17:28:33.424Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:33.424Z
50595
2017-08-04T17:28:36.914Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:36.958Z
48316
2017-08-04T17:28:39.193Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:39.193Z
42693
2017-08-04T17:28:44.816Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:44.855Z
31825
2017-08-04T17:28:55.684Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:55.727Z
28742
2017-08-04T17:28:58.767Z
2017-08-04T17:29:27.509Z
2017-08-04T17:28:58.810Z
27452
2017-08-04T17:29:00.057Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:00.357Z
26332
2017-08-04T17:29:01.177Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:01.177Z
24461
2017-08-04T17:29:03.048Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:03.142Z
23503
2017-08-04T17:29:04.006Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:04.006Z
22544
2017-08-04T17:29:04.965Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:04.965Z
21118
2017-08-04T17:29:06.391Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:07.295Z
19573
2017-08-04T17:29:07.936Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:08.064Z
14944
2017-08-04T17:29:12.565Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:13.430Z
11483
2017-08-04T17:29:16.026Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:16.668Z
9684
2017-08-04T17:29:17.825Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:17.867Z
8488
2017-08-04T17:29:19.021Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:19.021Z
7678
2017-08-04T17:29:19.831Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:21.357Z
4802
2017-08-04T17:29:22.707Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:22.707Z
3937
2017-08-04T17:29:23.572Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:24.016Z
2075
2017-08-04T17:29:25.434Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:25.478Z
0
2017-08-04T17:29:27.509Z
2017-08-04T17:29:27.509Z
2017-08-04T17:29:27.509Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:24:48.964Z 2017-08-04T17:29:48.964Z
info: utterances found: 34
113658
2017-08-04T17:27:33.842Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:33.842Z
108124
2017-08-04T17:27:39.376Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:39.975Z
106076
2017-08-04T17:27:41.424Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:42.961Z
103899
2017-08-04T17:27:43.601Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:45.489Z
101190
2017-08-04T17:27:46.310Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:46.397Z
100031
2017-08-04T17:27:47.469Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:47.723Z
97147
2017-08-04T17:27:50.353Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:51.128Z
95247
2017-08-04T17:27:52.253Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:52.517Z
93439
2017-08-04T17:27:54.061Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:54.147Z
91422
2017-08-04T17:27:56.078Z
2017-08-04T17:29:27.500Z
2017-08-04T17:27:56.078Z
88281
2017-08-04T17:27:59.219Z
2017-08-04T17:29:27.500Z
2017-08-04T17:28:00.008Z
83257
2017-08-04T17:28:04.243Z
2017-08-04T17:29:27.500Z
2017-08-04T17:28:05.797Z
80531
2017-08-04T17:28:06.969Z
2017-08-04T17:29:27.500Z
2017-08-04T17:28:07.358Z
74168
2017-08-04T17:28:13.332Z
2017-08-04T17:29:27.500Z
2017-08-04T17:28:13.673Z
57977
2017-08-04T17:28:29.523Z
2017-08-04T17:29:27.500Z
2017-08-04T17:28:29.567Z
48709
2017-08-04T17:28:38.791Z
2017-08-04T17:29:27.500Z
2017-08-04T17:28:38.962Z
42703
2017-08-04T17:28:44.797Z
2017-08-04T17:29:27.500Z
2017-08-04T17:28:44.797Z
31779
2017-08-04T17:28:55.721Z
2017-08-04T17:29:27.500Z
2017-08-04T17:28:55.721Z
28690
2017-08-04T17:28:58.810Z
2017-08-04T17:29:27.500Z
2017-08-04T17:28:58.810Z
27448
2017-08-04T17:29:00.052Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:00.095Z
24466
2017-08-04T17:29:03.034Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:03.131Z
22545
2017-08-04T17:29:04.955Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:05.041Z
21036
2017-08-04T17:29:06.464Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:07.295Z
19563
2017-08-04T17:29:07.937Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:08.021Z
16012
2017-08-04T17:29:11.488Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:11.488Z
14940
2017-08-04T17:29:12.560Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:12.731Z
11436
2017-08-04T17:29:16.064Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:17.100Z
9627
2017-08-04T17:29:17.873Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:17.873Z
8342
2017-08-04T17:29:19.158Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:20.657Z
6150
2017-08-04T17:29:21.350Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:21.350Z
4734
2017-08-04T17:29:22.766Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:22.766Z
3997
2017-08-04T17:29:23.503Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:24.026Z
2429
2017-08-04T17:29:25.071Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:25.583Z
0
2017-08-04T17:29:27.500Z
2017-08-04T17:29:27.500Z
2017-08-04T17:29:27.500Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 9
12549
2017-08-04T17:29:12.517Z
2017-08-04T17:29:25.066Z
2017-08-04T17:29:12.651Z
9045
2017-08-04T17:29:16.021Z
2017-08-04T17:29:25.066Z
2017-08-04T17:29:16.461Z
7188
2017-08-04T17:29:17.878Z
2017-08-04T17:29:25.066Z
2017-08-04T17:29:17.878Z
5863
2017-08-04T17:29:19.203Z
2017-08-04T17:29:25.066Z
2017-08-04T17:29:19.203Z
5226
2017-08-04T17:29:19.840Z
2017-08-04T17:29:25.066Z
2017-08-04T17:29:20.651Z
3726
2017-08-04T17:29:21.340Z
2017-08-04T17:29:25.066Z
2017-08-04T17:29:21.552Z
2384
2017-08-04T17:29:22.682Z
2017-08-04T17:29:25.066Z
2017-08-04T17:29:22.682Z
1361
2017-08-04T17:29:23.705Z
2017-08-04T17:29:25.066Z
2017-08-04T17:29:23.931Z
0
2017-08-04T17:29:25.066Z
2017-08-04T17:29:25.066Z
2017-08-04T17:29:25.452Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 12
5061023
2017-08-04T16:05:08.844Z
2017-08-04T17:29:29.867Z
2017-08-04T16:05:09.099Z
26849
2017-08-04T17:29:03.018Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:03.103Z
23265
2017-08-04T17:29:06.602Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:06.645Z
18379
2017-08-04T17:29:11.488Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:11.488Z
17307
2017-08-04T17:29:12.560Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:13.456Z
13819
2017-08-04T17:29:16.048Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:17.105Z
12027
2017-08-04T17:29:17.840Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:17.883Z
10661
2017-08-04T17:29:19.206Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:21.361Z
6145
2017-08-04T17:29:23.722Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:24.026Z
4785
2017-08-04T17:29:25.082Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:25.466Z
767
2017-08-04T17:29:29.100Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:29.148Z
0
2017-08-04T17:29:29.867Z
2017-08-04T17:29:29.867Z
2017-08-04T17:29:29.953Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984af0d3fdd10ba54f6fa29,
       participant: 'dog',
       turns: 0.3617021276595745 },
     { _id: 5984af0d3fdd10ba54f6fa28,
       participant: 'jordan',
       turns: 0.425531914893617 },
     { _id: 5984af0d3fdd10ba54f6fa27,
       participant: 'meep',
       turns: 0.11702127659574468 },
     { _id: 5984af0d3fdd10ba54f6fa26,
       participant: 'mep',
       turns: 0.09574468085106383 } ],
  meeting: 'no',
  transitions: 80,
  timestamp: 2017-08-04T17:29:49.294Z,
  from: 2017-08-04T17:24:48.964Z,
  to: 2017-08-04T17:29:48.964Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af0d3fdd10ba54f6fa29,
       participant: 'dog',
       turns: 0.3617021276595745 },
     { _id: 5984af0d3fdd10ba54f6fa28,
       participant: 'jordan',
       turns: 0.425531914893617 },
     { _id: 5984af0d3fdd10ba54f6fa27,
       participant: 'meep',
       turns: 0.11702127659574468 },
     { _id: 5984af0d3fdd10ba54f6fa26,
       participant: 'mep',
       turns: 0.09574468085106383 } ],
  meeting: 'no',
  transitions: 80,
  timestamp: 2017-08-04T17:29:49.294Z,
  from: 2017-08-04T17:24:48.964Z,
  to: 2017-08-04T17:29:48.964Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af0d3fdd10ba54f6fa29,
       participant: 'dog',
       turns: 0.3617021276595745 },
     { _id: 5984af0d3fdd10ba54f6fa28,
       participant: 'jordan',
       turns: 0.425531914893617 },
     { _id: 5984af0d3fdd10ba54f6fa27,
       participant: 'meep',
       turns: 0.11702127659574468 },
     { _id: 5984af0d3fdd10ba54f6fa26,
       participant: 'mep',
       turns: 0.09574468085106383 } ],
  meeting: 'no',
  transitions: 80,
  timestamp: 2017-08-04T17:29:49.294Z,
  from: 2017-08-04T17:24:48.964Z,
  to: 2017-08-04T17:29:48.964Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af0d3fdd10ba54f6fa29,
       participant: 'dog',
       turns: 0.3617021276595745 },
     { _id: 5984af0d3fdd10ba54f6fa28,
       participant: 'jordan',
       turns: 0.425531914893617 },
     { _id: 5984af0d3fdd10ba54f6fa27,
       participant: 'meep',
       turns: 0.11702127659574468 },
     { _id: 5984af0d3fdd10ba54f6fa26,
       participant: 'mep',
       turns: 0.09574468085106383 } ],
  meeting: 'no',
  transitions: 80,
  timestamp: 2017-08-04T17:29:49.294Z,
  from: 2017-08-04T17:24:48.964Z,
  to: 2017-08-04T17:29:48.964Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 10
16603
2017-08-04T17:29:12.517Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:12.651Z
13099
2017-08-04T17:29:16.021Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:16.461Z
11242
2017-08-04T17:29:17.878Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:17.878Z
9917
2017-08-04T17:29:19.203Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:19.203Z
9280
2017-08-04T17:29:19.840Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:20.651Z
7780
2017-08-04T17:29:21.340Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:21.552Z
6438
2017-08-04T17:29:22.682Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:22.682Z
5415
2017-08-04T17:29:23.705Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:23.931Z
4054
2017-08-04T17:29:25.066Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:25.452Z
0
2017-08-04T17:29:29.120Z
2017-08-04T17:29:29.120Z
2017-08-04T17:29:29.164Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 82
5195891
2017-08-04T16:02:53.992Z
2017-08-04T17:29:29.883Z
2017-08-04T16:02:55.016Z
5121671
2017-08-04T16:04:08.212Z
2017-08-04T17:29:29.883Z
2017-08-04T16:04:09.113Z
5109947
2017-08-04T16:04:19.936Z
2017-08-04T17:29:29.883Z
2017-08-04T16:04:19.936Z
5088350
2017-08-04T16:04:41.533Z
2017-08-04T17:29:29.883Z
2017-08-04T16:04:41.533Z
5058646
2017-08-04T16:05:11.237Z
2017-08-04T17:29:29.883Z
2017-08-04T16:05:11.842Z
3494131
2017-08-04T16:31:15.752Z
2017-08-04T17:29:29.883Z
2017-08-04T16:31:16.861Z
3220324
2017-08-04T16:35:49.559Z
2017-08-04T17:29:29.883Z
2017-08-04T16:35:49.559Z
2860960
2017-08-04T16:41:48.923Z
2017-08-04T17:29:29.883Z
2017-08-04T16:41:48.923Z
2850475
2017-08-04T16:41:59.408Z
2017-08-04T17:29:29.883Z
2017-08-04T16:41:59.408Z
2833695
2017-08-04T16:42:16.188Z
2017-08-04T17:29:29.883Z
2017-08-04T16:42:16.657Z
2632113
2017-08-04T16:45:37.770Z
2017-08-04T17:29:29.883Z
2017-08-04T16:45:37.983Z
2628700
2017-08-04T16:45:41.183Z
2017-08-04T17:29:29.883Z
2017-08-04T16:45:41.268Z
2627036
2017-08-04T16:45:42.847Z
2017-08-04T17:29:29.883Z
2017-08-04T16:45:42.847Z
2625286
2017-08-04T16:45:44.597Z
2017-08-04T17:29:29.883Z
2017-08-04T16:45:44.597Z
2600714
2017-08-04T16:46:09.169Z
2017-08-04T17:29:29.883Z
2017-08-04T16:46:09.169Z
2531662
2017-08-04T16:47:18.221Z
2017-08-04T17:29:29.883Z
2017-08-04T16:47:19.117Z
2515891
2017-08-04T16:47:33.992Z
2017-08-04T17:29:29.883Z
2017-08-04T16:47:33.992Z
2515080
2017-08-04T16:47:34.803Z
2017-08-04T17:29:29.883Z
2017-08-04T16:47:35.368Z
2511912
2017-08-04T16:47:37.971Z
2017-08-04T17:29:29.883Z
2017-08-04T16:47:38.227Z
2502093
2017-08-04T16:47:47.790Z
2017-08-04T17:29:29.883Z
2017-08-04T16:47:49.155Z
2497869
2017-08-04T16:47:52.014Z
2017-08-04T17:29:29.883Z
2017-08-04T16:47:56.195Z
2492791
2017-08-04T16:47:57.092Z
2017-08-04T17:29:29.883Z
2017-08-04T16:47:57.219Z
2018273
2017-08-04T16:55:51.610Z
2017-08-04T17:29:29.883Z
2017-08-04T16:55:52.122Z
1867104
2017-08-04T16:58:22.779Z
2017-08-04T17:29:29.883Z
2017-08-04T16:58:22.779Z
1833478
2017-08-04T16:58:56.405Z
2017-08-04T17:29:29.883Z
2017-08-04T16:58:56.405Z
1036588
2017-08-04T17:12:13.295Z
2017-08-04T17:29:29.883Z
2017-08-04T17:12:13.295Z
828547
2017-08-04T17:15:41.336Z
2017-08-04T17:29:29.883Z
2017-08-04T17:15:41.336Z
656024
2017-08-04T17:18:33.859Z
2017-08-04T17:29:29.883Z
2017-08-04T17:18:33.859Z
549724
2017-08-04T17:20:20.159Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:20.202Z
548609
2017-08-04T17:20:21.274Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:21.578Z
546726
2017-08-04T17:20:23.157Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:23.200Z
546001
2017-08-04T17:20:23.882Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:25.930Z
542801
2017-08-04T17:20:27.082Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:29.472Z
539003
2017-08-04T17:20:30.880Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:34.170Z
534729
2017-08-04T17:20:35.154Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:35.154Z
531318
2017-08-04T17:20:38.565Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:38.651Z
526971
2017-08-04T17:20:42.912Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:43.040Z
522982
2017-08-04T17:20:46.901Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:47.072Z
521446
2017-08-04T17:20:48.437Z
2017-08-04T17:29:29.883Z
2017-08-04T17:20:48.522Z
509621
2017-08-04T17:21:00.262Z
2017-08-04T17:29:29.883Z
2017-08-04T17:21:00.646Z
501621
2017-08-04T17:21:08.262Z
2017-08-04T17:29:29.883Z
2017-08-04T17:21:08.304Z
115076
2017-08-04T17:27:34.807Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:34.807Z
110527
2017-08-04T17:27:39.356Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:39.356Z
108096
2017-08-04T17:27:41.787Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:42.043Z
103621
2017-08-04T17:27:46.262Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:46.306Z
102597
2017-08-04T17:27:47.286Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:47.675Z
99535
2017-08-04T17:27:50.348Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:50.348Z
97592
2017-08-04T17:27:52.291Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:52.333Z
95827
2017-08-04T17:27:54.056Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:55.438Z
93805
2017-08-04T17:27:56.078Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:56.120Z
93123
2017-08-04T17:27:56.760Z
2017-08-04T17:29:29.883Z
2017-08-04T17:27:56.760Z
92136
2017-08-04T17:27:57.747Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:00.004Z
87527
2017-08-04T17:28:02.356Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:02.569Z
85601
2017-08-04T17:28:04.282Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:05.801Z
82946
2017-08-04T17:28:06.937Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:07.150Z
78455
2017-08-04T17:28:11.428Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:11.474Z
76439
2017-08-04T17:28:13.444Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:13.444Z
69546
2017-08-04T17:28:20.337Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:20.337Z
68843
2017-08-04T17:28:21.040Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:21.040Z
56459
2017-08-04T17:28:33.424Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:33.424Z
52969
2017-08-04T17:28:36.914Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:36.958Z
50690
2017-08-04T17:28:39.193Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:39.193Z
45067
2017-08-04T17:28:44.816Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:44.855Z
34199
2017-08-04T17:28:55.684Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:55.727Z
31116
2017-08-04T17:28:58.767Z
2017-08-04T17:29:29.883Z
2017-08-04T17:28:58.810Z
29826
2017-08-04T17:29:00.057Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:00.357Z
28706
2017-08-04T17:29:01.177Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:01.177Z
26835
2017-08-04T17:29:03.048Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:03.142Z
25877
2017-08-04T17:29:04.006Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:04.006Z
24918
2017-08-04T17:29:04.965Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:04.965Z
23492
2017-08-04T17:29:06.391Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:07.295Z
21947
2017-08-04T17:29:07.936Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:08.064Z
17318
2017-08-04T17:29:12.565Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:13.430Z
13857
2017-08-04T17:29:16.026Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:16.668Z
12058
2017-08-04T17:29:17.825Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:17.867Z
10862
2017-08-04T17:29:19.021Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:19.021Z
10052
2017-08-04T17:29:19.831Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:21.357Z
7176
2017-08-04T17:29:22.707Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:22.707Z
6311
2017-08-04T17:29:23.572Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:24.016Z
4449
2017-08-04T17:29:25.434Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:25.478Z
2374
2017-08-04T17:29:27.509Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:27.509Z
0
2017-08-04T17:29:29.883Z
2017-08-04T17:29:29.883Z
2017-08-04T17:29:29.883Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 35
115337
2017-08-04T17:27:33.842Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:33.842Z
109803
2017-08-04T17:27:39.376Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:39.975Z
107755
2017-08-04T17:27:41.424Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:42.961Z
105578
2017-08-04T17:27:43.601Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:45.489Z
102869
2017-08-04T17:27:46.310Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:46.397Z
101710
2017-08-04T17:27:47.469Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:47.723Z
98826
2017-08-04T17:27:50.353Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:51.128Z
96926
2017-08-04T17:27:52.253Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:52.517Z
95118
2017-08-04T17:27:54.061Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:54.147Z
93101
2017-08-04T17:27:56.078Z
2017-08-04T17:29:29.179Z
2017-08-04T17:27:56.078Z
89960
2017-08-04T17:27:59.219Z
2017-08-04T17:29:29.179Z
2017-08-04T17:28:00.008Z
84936
2017-08-04T17:28:04.243Z
2017-08-04T17:29:29.179Z
2017-08-04T17:28:05.797Z
82210
2017-08-04T17:28:06.969Z
2017-08-04T17:29:29.179Z
2017-08-04T17:28:07.358Z
75847
2017-08-04T17:28:13.332Z
2017-08-04T17:29:29.179Z
2017-08-04T17:28:13.673Z
59656
2017-08-04T17:28:29.523Z
2017-08-04T17:29:29.179Z
2017-08-04T17:28:29.567Z
50388
2017-08-04T17:28:38.791Z
2017-08-04T17:29:29.179Z
2017-08-04T17:28:38.962Z
44382
2017-08-04T17:28:44.797Z
2017-08-04T17:29:29.179Z
2017-08-04T17:28:44.797Z
33458
2017-08-04T17:28:55.721Z
2017-08-04T17:29:29.179Z
2017-08-04T17:28:55.721Z
30369
2017-08-04T17:28:58.810Z
2017-08-04T17:29:29.179Z
2017-08-04T17:28:58.810Z
29127
2017-08-04T17:29:00.052Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:00.095Z
26145
2017-08-04T17:29:03.034Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:03.131Z
24224
2017-08-04T17:29:04.955Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:05.041Z
22715
2017-08-04T17:29:06.464Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:07.295Z
21242
2017-08-04T17:29:07.937Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:08.021Z
17691
2017-08-04T17:29:11.488Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:11.488Z
16619
2017-08-04T17:29:12.560Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:12.731Z
13115
2017-08-04T17:29:16.064Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:17.100Z
11306
2017-08-04T17:29:17.873Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:17.873Z
10021
2017-08-04T17:29:19.158Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:20.657Z
7829
2017-08-04T17:29:21.350Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:21.350Z
6413
2017-08-04T17:29:22.766Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:22.766Z
5676
2017-08-04T17:29:23.503Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:24.026Z
4108
2017-08-04T17:29:25.071Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:25.583Z
1679
2017-08-04T17:29:27.500Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:27.500Z
0
2017-08-04T17:29:29.179Z
2017-08-04T17:29:29.179Z
2017-08-04T17:29:29.179Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 13
5063936
2017-08-04T16:05:08.844Z
2017-08-04T17:29:32.780Z
2017-08-04T16:05:09.099Z
29762
2017-08-04T17:29:03.018Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:03.103Z
26178
2017-08-04T17:29:06.602Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:06.645Z
21292
2017-08-04T17:29:11.488Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:11.488Z
20220
2017-08-04T17:29:12.560Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:13.456Z
16732
2017-08-04T17:29:16.048Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:17.105Z
14940
2017-08-04T17:29:17.840Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:17.883Z
13574
2017-08-04T17:29:19.206Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:21.361Z
9058
2017-08-04T17:29:23.722Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:24.026Z
7698
2017-08-04T17:29:25.082Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:25.466Z
3680
2017-08-04T17:29:29.100Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:29.148Z
2913
2017-08-04T17:29:29.867Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:29.953Z
0
2017-08-04T17:29:32.780Z
2017-08-04T17:29:32.780Z
2017-08-04T17:29:34.715Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 83
5198760
2017-08-04T16:02:53.992Z
2017-08-04T17:29:32.752Z
2017-08-04T16:02:55.016Z
5124540
2017-08-04T16:04:08.212Z
2017-08-04T17:29:32.752Z
2017-08-04T16:04:09.113Z
5112816
2017-08-04T16:04:19.936Z
2017-08-04T17:29:32.752Z
2017-08-04T16:04:19.936Z
5091219
2017-08-04T16:04:41.533Z
2017-08-04T17:29:32.752Z
2017-08-04T16:04:41.533Z
5061515
2017-08-04T16:05:11.237Z
2017-08-04T17:29:32.752Z
2017-08-04T16:05:11.842Z
3497000
2017-08-04T16:31:15.752Z
2017-08-04T17:29:32.752Z
2017-08-04T16:31:16.861Z
3223193
2017-08-04T16:35:49.559Z
2017-08-04T17:29:32.752Z
2017-08-04T16:35:49.559Z
2863829
2017-08-04T16:41:48.923Z
2017-08-04T17:29:32.752Z
2017-08-04T16:41:48.923Z
2853344
2017-08-04T16:41:59.408Z
2017-08-04T17:29:32.752Z
2017-08-04T16:41:59.408Z
2836564
2017-08-04T16:42:16.188Z
2017-08-04T17:29:32.752Z
2017-08-04T16:42:16.657Z
2634982
2017-08-04T16:45:37.770Z
2017-08-04T17:29:32.752Z
2017-08-04T16:45:37.983Z
2631569
2017-08-04T16:45:41.183Z
2017-08-04T17:29:32.752Z
2017-08-04T16:45:41.268Z
2629905
2017-08-04T16:45:42.847Z
2017-08-04T17:29:32.752Z
2017-08-04T16:45:42.847Z
2628155
2017-08-04T16:45:44.597Z
2017-08-04T17:29:32.752Z
2017-08-04T16:45:44.597Z
2603583
2017-08-04T16:46:09.169Z
2017-08-04T17:29:32.752Z
2017-08-04T16:46:09.169Z
2534531
2017-08-04T16:47:18.221Z
2017-08-04T17:29:32.752Z
2017-08-04T16:47:19.117Z
2518760
2017-08-04T16:47:33.992Z
2017-08-04T17:29:32.752Z
2017-08-04T16:47:33.992Z
2517949
2017-08-04T16:47:34.803Z
2017-08-04T17:29:32.752Z
2017-08-04T16:47:35.368Z
2514781
2017-08-04T16:47:37.971Z
2017-08-04T17:29:32.752Z
2017-08-04T16:47:38.227Z
2504962
2017-08-04T16:47:47.790Z
2017-08-04T17:29:32.752Z
2017-08-04T16:47:49.155Z
2500738
2017-08-04T16:47:52.014Z
2017-08-04T17:29:32.752Z
2017-08-04T16:47:56.195Z
2495660
2017-08-04T16:47:57.092Z
2017-08-04T17:29:32.752Z
2017-08-04T16:47:57.219Z
2021142
2017-08-04T16:55:51.610Z
2017-08-04T17:29:32.752Z
2017-08-04T16:55:52.122Z
1869973
2017-08-04T16:58:22.779Z
2017-08-04T17:29:32.752Z
2017-08-04T16:58:22.779Z
1836347
2017-08-04T16:58:56.405Z
2017-08-04T17:29:32.752Z
2017-08-04T16:58:56.405Z
1039457
2017-08-04T17:12:13.295Z
2017-08-04T17:29:32.752Z
2017-08-04T17:12:13.295Z
831416
2017-08-04T17:15:41.336Z
2017-08-04T17:29:32.752Z
2017-08-04T17:15:41.336Z
658893
2017-08-04T17:18:33.859Z
2017-08-04T17:29:32.752Z
2017-08-04T17:18:33.859Z
552593
2017-08-04T17:20:20.159Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:20.202Z
551478
2017-08-04T17:20:21.274Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:21.578Z
549595
2017-08-04T17:20:23.157Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:23.200Z
548870
2017-08-04T17:20:23.882Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:25.930Z
545670
2017-08-04T17:20:27.082Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:29.472Z
541872
2017-08-04T17:20:30.880Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:34.170Z
537598
2017-08-04T17:20:35.154Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:35.154Z
534187
2017-08-04T17:20:38.565Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:38.651Z
529840
2017-08-04T17:20:42.912Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:43.040Z
525851
2017-08-04T17:20:46.901Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:47.072Z
524315
2017-08-04T17:20:48.437Z
2017-08-04T17:29:32.752Z
2017-08-04T17:20:48.522Z
512490
2017-08-04T17:21:00.262Z
2017-08-04T17:29:32.752Z
2017-08-04T17:21:00.646Z
504490
2017-08-04T17:21:08.262Z
2017-08-04T17:29:32.752Z
2017-08-04T17:21:08.304Z
117945
2017-08-04T17:27:34.807Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:34.807Z
113396
2017-08-04T17:27:39.356Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:39.356Z
110965
2017-08-04T17:27:41.787Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:42.043Z
106490
2017-08-04T17:27:46.262Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:46.306Z
105466
2017-08-04T17:27:47.286Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:47.675Z
102404
2017-08-04T17:27:50.348Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:50.348Z
100461
2017-08-04T17:27:52.291Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:52.333Z
98696
2017-08-04T17:27:54.056Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:55.438Z
96674
2017-08-04T17:27:56.078Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:56.120Z
95992
2017-08-04T17:27:56.760Z
2017-08-04T17:29:32.752Z
2017-08-04T17:27:56.760Z
95005
2017-08-04T17:27:57.747Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:00.004Z
90396
2017-08-04T17:28:02.356Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:02.569Z
88470
2017-08-04T17:28:04.282Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:05.801Z
85815
2017-08-04T17:28:06.937Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:07.150Z
81324
2017-08-04T17:28:11.428Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:11.474Z
79308
2017-08-04T17:28:13.444Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:13.444Z
72415
2017-08-04T17:28:20.337Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:20.337Z
71712
2017-08-04T17:28:21.040Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:21.040Z
59328
2017-08-04T17:28:33.424Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:33.424Z
55838
2017-08-04T17:28:36.914Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:36.958Z
53559
2017-08-04T17:28:39.193Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:39.193Z
47936
2017-08-04T17:28:44.816Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:44.855Z
37068
2017-08-04T17:28:55.684Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:55.727Z
33985
2017-08-04T17:28:58.767Z
2017-08-04T17:29:32.752Z
2017-08-04T17:28:58.810Z
32695
2017-08-04T17:29:00.057Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:00.357Z
31575
2017-08-04T17:29:01.177Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:01.177Z
29704
2017-08-04T17:29:03.048Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:03.142Z
28746
2017-08-04T17:29:04.006Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:04.006Z
27787
2017-08-04T17:29:04.965Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:04.965Z
26361
2017-08-04T17:29:06.391Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:07.295Z
24816
2017-08-04T17:29:07.936Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:08.064Z
20187
2017-08-04T17:29:12.565Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:13.430Z
16726
2017-08-04T17:29:16.026Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:16.668Z
14927
2017-08-04T17:29:17.825Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:17.867Z
13731
2017-08-04T17:29:19.021Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:19.021Z
12921
2017-08-04T17:29:19.831Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:21.357Z
10045
2017-08-04T17:29:22.707Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:22.707Z
9180
2017-08-04T17:29:23.572Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:24.016Z
7318
2017-08-04T17:29:25.434Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:25.478Z
5243
2017-08-04T17:29:27.509Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:27.509Z
2869
2017-08-04T17:29:29.883Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:29.883Z
0
2017-08-04T17:29:32.752Z
2017-08-04T17:29:32.752Z
2017-08-04T17:29:33.275Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 36
115977
2017-08-04T17:27:33.842Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:33.842Z
110443
2017-08-04T17:27:39.376Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:39.975Z
108395
2017-08-04T17:27:41.424Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:42.961Z
106218
2017-08-04T17:27:43.601Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:45.489Z
103509
2017-08-04T17:27:46.310Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:46.397Z
102350
2017-08-04T17:27:47.469Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:47.723Z
99466
2017-08-04T17:27:50.353Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:51.128Z
97566
2017-08-04T17:27:52.253Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:52.517Z
95758
2017-08-04T17:27:54.061Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:54.147Z
93741
2017-08-04T17:27:56.078Z
2017-08-04T17:29:29.819Z
2017-08-04T17:27:56.078Z
90600
2017-08-04T17:27:59.219Z
2017-08-04T17:29:29.819Z
2017-08-04T17:28:00.008Z
85576
2017-08-04T17:28:04.243Z
2017-08-04T17:29:29.819Z
2017-08-04T17:28:05.797Z
82850
2017-08-04T17:28:06.969Z
2017-08-04T17:29:29.819Z
2017-08-04T17:28:07.358Z
76487
2017-08-04T17:28:13.332Z
2017-08-04T17:29:29.819Z
2017-08-04T17:28:13.673Z
60296
2017-08-04T17:28:29.523Z
2017-08-04T17:29:29.819Z
2017-08-04T17:28:29.567Z
51028
2017-08-04T17:28:38.791Z
2017-08-04T17:29:29.819Z
2017-08-04T17:28:38.962Z
45022
2017-08-04T17:28:44.797Z
2017-08-04T17:29:29.819Z
2017-08-04T17:28:44.797Z
34098
2017-08-04T17:28:55.721Z
2017-08-04T17:29:29.819Z
2017-08-04T17:28:55.721Z
31009
2017-08-04T17:28:58.810Z
2017-08-04T17:29:29.819Z
2017-08-04T17:28:58.810Z
29767
2017-08-04T17:29:00.052Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:00.095Z
26785
2017-08-04T17:29:03.034Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:03.131Z
24864
2017-08-04T17:29:04.955Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:05.041Z
23355
2017-08-04T17:29:06.464Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:07.295Z
21882
2017-08-04T17:29:07.937Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:08.021Z
18331
2017-08-04T17:29:11.488Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:11.488Z
17259
2017-08-04T17:29:12.560Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:12.731Z
13755
2017-08-04T17:29:16.064Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:17.100Z
11946
2017-08-04T17:29:17.873Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:17.873Z
10661
2017-08-04T17:29:19.158Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:20.657Z
8469
2017-08-04T17:29:21.350Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:21.350Z
7053
2017-08-04T17:29:22.766Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:22.766Z
6316
2017-08-04T17:29:23.503Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:24.026Z
4748
2017-08-04T17:29:25.071Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:25.583Z
2319
2017-08-04T17:29:27.500Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:27.500Z
640
2017-08-04T17:29:29.179Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:29.179Z
0
2017-08-04T17:29:29.819Z
2017-08-04T17:29:29.819Z
2017-08-04T17:29:29.819Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:24:54.789Z 2017-08-04T17:29:54.789Z
info: utterances found: 14
5066826
2017-08-04T16:05:08.844Z
2017-08-04T17:29:35.670Z
2017-08-04T16:05:09.099Z
32652
2017-08-04T17:29:03.018Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:03.103Z
29068
2017-08-04T17:29:06.602Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:06.645Z
24182
2017-08-04T17:29:11.488Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:11.488Z
23110
2017-08-04T17:29:12.560Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:13.456Z
19622
2017-08-04T17:29:16.048Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:17.105Z
17830
2017-08-04T17:29:17.840Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:17.883Z
16464
2017-08-04T17:29:19.206Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:21.361Z
11948
2017-08-04T17:29:23.722Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:24.026Z
10588
2017-08-04T17:29:25.082Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:25.466Z
6570
2017-08-04T17:29:29.100Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:29.148Z
5803
2017-08-04T17:29:29.867Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:29.953Z
2890
2017-08-04T17:29:32.780Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:34.715Z
0
2017-08-04T17:29:35.670Z
2017-08-04T17:29:35.670Z
2017-08-04T17:29:36.168Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 11
20220
2017-08-04T17:29:12.517Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:12.651Z
16716
2017-08-04T17:29:16.021Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:16.461Z
14859
2017-08-04T17:29:17.878Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:17.878Z
13534
2017-08-04T17:29:19.203Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:19.203Z
12897
2017-08-04T17:29:19.840Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:20.651Z
11397
2017-08-04T17:29:21.340Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:21.552Z
10055
2017-08-04T17:29:22.682Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:22.682Z
9032
2017-08-04T17:29:23.705Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:23.931Z
7671
2017-08-04T17:29:25.066Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:25.452Z
3617
2017-08-04T17:29:29.120Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:29.164Z
0
2017-08-04T17:29:32.737Z
2017-08-04T17:29:32.737Z
2017-08-04T17:29:34.160Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 84
5199976
2017-08-04T16:02:53.992Z
2017-08-04T17:29:33.968Z
2017-08-04T16:02:55.016Z
5125756
2017-08-04T16:04:08.212Z
2017-08-04T17:29:33.968Z
2017-08-04T16:04:09.113Z
5114032
2017-08-04T16:04:19.936Z
2017-08-04T17:29:33.968Z
2017-08-04T16:04:19.936Z
5092435
2017-08-04T16:04:41.533Z
2017-08-04T17:29:33.968Z
2017-08-04T16:04:41.533Z
5062731
2017-08-04T16:05:11.237Z
2017-08-04T17:29:33.968Z
2017-08-04T16:05:11.842Z
3498216
2017-08-04T16:31:15.752Z
2017-08-04T17:29:33.968Z
2017-08-04T16:31:16.861Z
3224409
2017-08-04T16:35:49.559Z
2017-08-04T17:29:33.968Z
2017-08-04T16:35:49.559Z
2865045
2017-08-04T16:41:48.923Z
2017-08-04T17:29:33.968Z
2017-08-04T16:41:48.923Z
2854560
2017-08-04T16:41:59.408Z
2017-08-04T17:29:33.968Z
2017-08-04T16:41:59.408Z
2837780
2017-08-04T16:42:16.188Z
2017-08-04T17:29:33.968Z
2017-08-04T16:42:16.657Z
2636198
2017-08-04T16:45:37.770Z
2017-08-04T17:29:33.968Z
2017-08-04T16:45:37.983Z
2632785
2017-08-04T16:45:41.183Z
2017-08-04T17:29:33.968Z
2017-08-04T16:45:41.268Z
2631121
2017-08-04T16:45:42.847Z
2017-08-04T17:29:33.968Z
2017-08-04T16:45:42.847Z
2629371
2017-08-04T16:45:44.597Z
2017-08-04T17:29:33.968Z
2017-08-04T16:45:44.597Z
2604799
2017-08-04T16:46:09.169Z
2017-08-04T17:29:33.968Z
2017-08-04T16:46:09.169Z
2535747
2017-08-04T16:47:18.221Z
2017-08-04T17:29:33.968Z
2017-08-04T16:47:19.117Z
2519976
2017-08-04T16:47:33.992Z
2017-08-04T17:29:33.968Z
2017-08-04T16:47:33.992Z
2519165
2017-08-04T16:47:34.803Z
2017-08-04T17:29:33.968Z
2017-08-04T16:47:35.368Z
2515997
2017-08-04T16:47:37.971Z
2017-08-04T17:29:33.968Z
2017-08-04T16:47:38.227Z
2506178
2017-08-04T16:47:47.790Z
2017-08-04T17:29:33.968Z
2017-08-04T16:47:49.155Z
2501954
2017-08-04T16:47:52.014Z
2017-08-04T17:29:33.968Z
2017-08-04T16:47:56.195Z
2496876
2017-08-04T16:47:57.092Z
2017-08-04T17:29:33.968Z
2017-08-04T16:47:57.219Z
2022358
2017-08-04T16:55:51.610Z
2017-08-04T17:29:33.968Z
2017-08-04T16:55:52.122Z
1871189
2017-08-04T16:58:22.779Z
2017-08-04T17:29:33.968Z
2017-08-04T16:58:22.779Z
1837563
2017-08-04T16:58:56.405Z
2017-08-04T17:29:33.968Z
2017-08-04T16:58:56.405Z
1040673
2017-08-04T17:12:13.295Z
2017-08-04T17:29:33.968Z
2017-08-04T17:12:13.295Z
832632
2017-08-04T17:15:41.336Z
2017-08-04T17:29:33.968Z
2017-08-04T17:15:41.336Z
660109
2017-08-04T17:18:33.859Z
2017-08-04T17:29:33.968Z
2017-08-04T17:18:33.859Z
553809
2017-08-04T17:20:20.159Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:20.202Z
552694
2017-08-04T17:20:21.274Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:21.578Z
550811
2017-08-04T17:20:23.157Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:23.200Z
550086
2017-08-04T17:20:23.882Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:25.930Z
546886
2017-08-04T17:20:27.082Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:29.472Z
543088
2017-08-04T17:20:30.880Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:34.170Z
538814
2017-08-04T17:20:35.154Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:35.154Z
535403
2017-08-04T17:20:38.565Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:38.651Z
531056
2017-08-04T17:20:42.912Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:43.040Z
527067
2017-08-04T17:20:46.901Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:47.072Z
525531
2017-08-04T17:20:48.437Z
2017-08-04T17:29:33.968Z
2017-08-04T17:20:48.522Z
513706
2017-08-04T17:21:00.262Z
2017-08-04T17:29:33.968Z
2017-08-04T17:21:00.646Z
505706
2017-08-04T17:21:08.262Z
2017-08-04T17:29:33.968Z
2017-08-04T17:21:08.304Z
119161
2017-08-04T17:27:34.807Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:34.807Z
114612
2017-08-04T17:27:39.356Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:39.356Z
112181
2017-08-04T17:27:41.787Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:42.043Z
107706
2017-08-04T17:27:46.262Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:46.306Z
106682
2017-08-04T17:27:47.286Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:47.675Z
103620
2017-08-04T17:27:50.348Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:50.348Z
101677
2017-08-04T17:27:52.291Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:52.333Z
99912
2017-08-04T17:27:54.056Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:55.438Z
97890
2017-08-04T17:27:56.078Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:56.120Z
97208
2017-08-04T17:27:56.760Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:56.760Z
96221
2017-08-04T17:27:57.747Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:00.004Z
91612
2017-08-04T17:28:02.356Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:02.569Z
89686
2017-08-04T17:28:04.282Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:05.801Z
87031
2017-08-04T17:28:06.937Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:07.150Z
82540
2017-08-04T17:28:11.428Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:11.474Z
80524
2017-08-04T17:28:13.444Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:13.444Z
73631
2017-08-04T17:28:20.337Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:20.337Z
72928
2017-08-04T17:28:21.040Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:21.040Z
60544
2017-08-04T17:28:33.424Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:33.424Z
57054
2017-08-04T17:28:36.914Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:36.958Z
54775
2017-08-04T17:28:39.193Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:39.193Z
49152
2017-08-04T17:28:44.816Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:44.855Z
38284
2017-08-04T17:28:55.684Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:55.727Z
35201
2017-08-04T17:28:58.767Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:58.810Z
33911
2017-08-04T17:29:00.057Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:00.357Z
32791
2017-08-04T17:29:01.177Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:01.177Z
30920
2017-08-04T17:29:03.048Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:03.142Z
29962
2017-08-04T17:29:04.006Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:04.006Z
29003
2017-08-04T17:29:04.965Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:04.965Z
27577
2017-08-04T17:29:06.391Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:07.295Z
26032
2017-08-04T17:29:07.936Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:08.064Z
21403
2017-08-04T17:29:12.565Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:13.430Z
17942
2017-08-04T17:29:16.026Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:16.668Z
16143
2017-08-04T17:29:17.825Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:17.867Z
14947
2017-08-04T17:29:19.021Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:19.021Z
14137
2017-08-04T17:29:19.831Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:21.357Z
11261
2017-08-04T17:29:22.707Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:22.707Z
10396
2017-08-04T17:29:23.572Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:24.016Z
8534
2017-08-04T17:29:25.434Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:25.478Z
6459
2017-08-04T17:29:27.509Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:27.509Z
4085
2017-08-04T17:29:29.883Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:29.883Z
1216
2017-08-04T17:29:32.752Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:33.275Z
0
2017-08-04T17:29:33.968Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:34.614Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 15
5067983
2017-08-04T16:05:08.844Z
2017-08-04T17:29:36.827Z
2017-08-04T16:05:09.099Z
33809
2017-08-04T17:29:03.018Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:03.103Z
30225
2017-08-04T17:29:06.602Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:06.645Z
25339
2017-08-04T17:29:11.488Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:11.488Z
24267
2017-08-04T17:29:12.560Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:13.456Z
20779
2017-08-04T17:29:16.048Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:17.105Z
18987
2017-08-04T17:29:17.840Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:17.883Z
17621
2017-08-04T17:29:19.206Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:21.361Z
13105
2017-08-04T17:29:23.722Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:24.026Z
11745
2017-08-04T17:29:25.082Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:25.466Z
7727
2017-08-04T17:29:29.100Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:29.148Z
6960
2017-08-04T17:29:29.867Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:29.953Z
4047
2017-08-04T17:29:32.780Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:34.715Z
1157
2017-08-04T17:29:35.670Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:36.168Z
0
2017-08-04T17:29:36.827Z
2017-08-04T17:29:36.827Z
2017-08-04T17:29:36.827Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 37
118996
2017-08-04T17:27:33.842Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:33.842Z
113462
2017-08-04T17:27:39.376Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:39.975Z
111414
2017-08-04T17:27:41.424Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:42.961Z
109237
2017-08-04T17:27:43.601Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:45.489Z
106528
2017-08-04T17:27:46.310Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:46.397Z
105369
2017-08-04T17:27:47.469Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:47.723Z
102485
2017-08-04T17:27:50.353Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:51.128Z
100585
2017-08-04T17:27:52.253Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:52.517Z
98777
2017-08-04T17:27:54.061Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:54.147Z
96760
2017-08-04T17:27:56.078Z
2017-08-04T17:29:32.838Z
2017-08-04T17:27:56.078Z
93619
2017-08-04T17:27:59.219Z
2017-08-04T17:29:32.838Z
2017-08-04T17:28:00.008Z
88595
2017-08-04T17:28:04.243Z
2017-08-04T17:29:32.838Z
2017-08-04T17:28:05.797Z
85869
2017-08-04T17:28:06.969Z
2017-08-04T17:29:32.838Z
2017-08-04T17:28:07.358Z
79506
2017-08-04T17:28:13.332Z
2017-08-04T17:29:32.838Z
2017-08-04T17:28:13.673Z
63315
2017-08-04T17:28:29.523Z
2017-08-04T17:29:32.838Z
2017-08-04T17:28:29.567Z
54047
2017-08-04T17:28:38.791Z
2017-08-04T17:29:32.838Z
2017-08-04T17:28:38.962Z
48041
2017-08-04T17:28:44.797Z
2017-08-04T17:29:32.838Z
2017-08-04T17:28:44.797Z
37117
2017-08-04T17:28:55.721Z
2017-08-04T17:29:32.838Z
2017-08-04T17:28:55.721Z
34028
2017-08-04T17:28:58.810Z
2017-08-04T17:29:32.838Z
2017-08-04T17:28:58.810Z
32786
2017-08-04T17:29:00.052Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:00.095Z
29804
2017-08-04T17:29:03.034Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:03.131Z
27883
2017-08-04T17:29:04.955Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:05.041Z
26374
2017-08-04T17:29:06.464Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:07.295Z
24901
2017-08-04T17:29:07.937Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:08.021Z
21350
2017-08-04T17:29:11.488Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:11.488Z
20278
2017-08-04T17:29:12.560Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:12.731Z
16774
2017-08-04T17:29:16.064Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:17.100Z
14965
2017-08-04T17:29:17.873Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:17.873Z
13680
2017-08-04T17:29:19.158Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:20.657Z
11488
2017-08-04T17:29:21.350Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:21.350Z
10072
2017-08-04T17:29:22.766Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:22.766Z
9335
2017-08-04T17:29:23.503Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:24.026Z
7767
2017-08-04T17:29:25.071Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:25.583Z
5338
2017-08-04T17:29:27.500Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:27.500Z
3659
2017-08-04T17:29:29.179Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:29.179Z
3019
2017-08-04T17:29:29.819Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:29.819Z
0
2017-08-04T17:29:32.838Z
2017-08-04T17:29:32.838Z
2017-08-04T17:29:33.275Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984af143fdd10ba54f6fa34,
       participant: 'dog',
       turns: 0.3564356435643564 },
     { _id: 5984af143fdd10ba54f6fa33,
       participant: 'jordan',
       turns: 0.4158415841584158 },
     { _id: 5984af143fdd10ba54f6fa32,
       participant: 'meep',
       turns: 0.12871287128712872 },
     { _id: 5984af143fdd10ba54f6fa31,
       participant: 'mep',
       turns: 0.09900990099009901 } ],
  meeting: 'no',
  transitions: 87,
  timestamp: 2017-08-04T17:29:55.214Z,
  from: 2017-08-04T17:24:54.789Z,
  to: 2017-08-04T17:29:54.789Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af143fdd10ba54f6fa34,
       participant: 'dog',
       turns: 0.3564356435643564 },
     { _id: 5984af143fdd10ba54f6fa33,
       participant: 'jordan',
       turns: 0.4158415841584158 },
     { _id: 5984af143fdd10ba54f6fa32,
       participant: 'meep',
       turns: 0.12871287128712872 },
     { _id: 5984af143fdd10ba54f6fa31,
       participant: 'mep',
       turns: 0.09900990099009901 } ],
  meeting: 'no',
  transitions: 87,
  timestamp: 2017-08-04T17:29:55.214Z,
  from: 2017-08-04T17:24:54.789Z,
  to: 2017-08-04T17:29:54.789Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af143fdd10ba54f6fa34,
       participant: 'dog',
       turns: 0.3564356435643564 },
     { _id: 5984af143fdd10ba54f6fa33,
       participant: 'jordan',
       turns: 0.4158415841584158 },
     { _id: 5984af143fdd10ba54f6fa32,
       participant: 'meep',
       turns: 0.12871287128712872 },
     { _id: 5984af143fdd10ba54f6fa31,
       participant: 'mep',
       turns: 0.09900990099009901 } ],
  meeting: 'no',
  transitions: 87,
  timestamp: 2017-08-04T17:29:55.214Z,
  from: 2017-08-04T17:24:54.789Z,
  to: 2017-08-04T17:29:54.789Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af143fdd10ba54f6fa34,
       participant: 'dog',
       turns: 0.3564356435643564 },
     { _id: 5984af143fdd10ba54f6fa33,
       participant: 'jordan',
       turns: 0.4158415841584158 },
     { _id: 5984af143fdd10ba54f6fa32,
       participant: 'meep',
       turns: 0.12871287128712872 },
     { _id: 5984af143fdd10ba54f6fa31,
       participant: 'mep',
       turns: 0.09900990099009901 } ],
  meeting: 'no',
  transitions: 87,
  timestamp: 2017-08-04T17:29:55.214Z,
  from: 2017-08-04T17:24:54.789Z,
  to: 2017-08-04T17:29:54.789Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 12
23238
2017-08-04T17:29:12.517Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:12.651Z
19734
2017-08-04T17:29:16.021Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:16.461Z
17877
2017-08-04T17:29:17.878Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:17.878Z
16552
2017-08-04T17:29:19.203Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:19.203Z
15915
2017-08-04T17:29:19.840Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:20.651Z
14415
2017-08-04T17:29:21.340Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:21.552Z
13073
2017-08-04T17:29:22.682Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:22.682Z
12050
2017-08-04T17:29:23.705Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:23.931Z
10689
2017-08-04T17:29:25.066Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:25.452Z
6635
2017-08-04T17:29:29.120Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:29.164Z
3018
2017-08-04T17:29:32.737Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:34.160Z
0
2017-08-04T17:29:35.755Z
2017-08-04T17:29:35.755Z
2017-08-04T17:29:36.169Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:25:04.044Z 2017-08-04T17:30:04.044Z
info: utterances found: 85
5201400
2017-08-04T16:02:53.992Z
2017-08-04T17:29:35.392Z
2017-08-04T16:02:55.016Z
5127180
2017-08-04T16:04:08.212Z
2017-08-04T17:29:35.392Z
2017-08-04T16:04:09.113Z
5115456
2017-08-04T16:04:19.936Z
2017-08-04T17:29:35.392Z
2017-08-04T16:04:19.936Z
5093859
2017-08-04T16:04:41.533Z
2017-08-04T17:29:35.392Z
2017-08-04T16:04:41.533Z
5064155
2017-08-04T16:05:11.237Z
2017-08-04T17:29:35.392Z
2017-08-04T16:05:11.842Z
3499640
2017-08-04T16:31:15.752Z
2017-08-04T17:29:35.392Z
2017-08-04T16:31:16.861Z
3225833
2017-08-04T16:35:49.559Z
2017-08-04T17:29:35.392Z
2017-08-04T16:35:49.559Z
2866469
2017-08-04T16:41:48.923Z
2017-08-04T17:29:35.392Z
2017-08-04T16:41:48.923Z
2855984
2017-08-04T16:41:59.408Z
2017-08-04T17:29:35.392Z
2017-08-04T16:41:59.408Z
2839204
2017-08-04T16:42:16.188Z
2017-08-04T17:29:35.392Z
2017-08-04T16:42:16.657Z
2637622
2017-08-04T16:45:37.770Z
2017-08-04T17:29:35.392Z
2017-08-04T16:45:37.983Z
2634209
2017-08-04T16:45:41.183Z
2017-08-04T17:29:35.392Z
2017-08-04T16:45:41.268Z
2632545
2017-08-04T16:45:42.847Z
2017-08-04T17:29:35.392Z
2017-08-04T16:45:42.847Z
2630795
2017-08-04T16:45:44.597Z
2017-08-04T17:29:35.392Z
2017-08-04T16:45:44.597Z
2606223
2017-08-04T16:46:09.169Z
2017-08-04T17:29:35.392Z
2017-08-04T16:46:09.169Z
2537171
2017-08-04T16:47:18.221Z
2017-08-04T17:29:35.392Z
2017-08-04T16:47:19.117Z
2521400
2017-08-04T16:47:33.992Z
2017-08-04T17:29:35.392Z
2017-08-04T16:47:33.992Z
2520589
2017-08-04T16:47:34.803Z
2017-08-04T17:29:35.392Z
2017-08-04T16:47:35.368Z
2517421
2017-08-04T16:47:37.971Z
2017-08-04T17:29:35.392Z
2017-08-04T16:47:38.227Z
2507602
2017-08-04T16:47:47.790Z
2017-08-04T17:29:35.392Z
2017-08-04T16:47:49.155Z
2503378
2017-08-04T16:47:52.014Z
2017-08-04T17:29:35.392Z
2017-08-04T16:47:56.195Z
2498300
2017-08-04T16:47:57.092Z
2017-08-04T17:29:35.392Z
2017-08-04T16:47:57.219Z
2023782
2017-08-04T16:55:51.610Z
2017-08-04T17:29:35.392Z
2017-08-04T16:55:52.122Z
1872613
2017-08-04T16:58:22.779Z
2017-08-04T17:29:35.392Z
2017-08-04T16:58:22.779Z
1838987
2017-08-04T16:58:56.405Z
2017-08-04T17:29:35.392Z
2017-08-04T16:58:56.405Z
1042097
2017-08-04T17:12:13.295Z
2017-08-04T17:29:35.392Z
2017-08-04T17:12:13.295Z
834056
2017-08-04T17:15:41.336Z
2017-08-04T17:29:35.392Z
2017-08-04T17:15:41.336Z
661533
2017-08-04T17:18:33.859Z
2017-08-04T17:29:35.392Z
2017-08-04T17:18:33.859Z
555233
2017-08-04T17:20:20.159Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:20.202Z
554118
2017-08-04T17:20:21.274Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:21.578Z
552235
2017-08-04T17:20:23.157Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:23.200Z
551510
2017-08-04T17:20:23.882Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:25.930Z
548310
2017-08-04T17:20:27.082Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:29.472Z
544512
2017-08-04T17:20:30.880Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:34.170Z
540238
2017-08-04T17:20:35.154Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:35.154Z
536827
2017-08-04T17:20:38.565Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:38.651Z
532480
2017-08-04T17:20:42.912Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:43.040Z
528491
2017-08-04T17:20:46.901Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:47.072Z
526955
2017-08-04T17:20:48.437Z
2017-08-04T17:29:35.392Z
2017-08-04T17:20:48.522Z
515130
2017-08-04T17:21:00.262Z
2017-08-04T17:29:35.392Z
2017-08-04T17:21:00.646Z
507130
2017-08-04T17:21:08.262Z
2017-08-04T17:29:35.392Z
2017-08-04T17:21:08.304Z
120585
2017-08-04T17:27:34.807Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:34.807Z
116036
2017-08-04T17:27:39.356Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:39.356Z
113605
2017-08-04T17:27:41.787Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:42.043Z
109130
2017-08-04T17:27:46.262Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:46.306Z
108106
2017-08-04T17:27:47.286Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:47.675Z
105044
2017-08-04T17:27:50.348Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:50.348Z
103101
2017-08-04T17:27:52.291Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:52.333Z
101336
2017-08-04T17:27:54.056Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:55.438Z
99314
2017-08-04T17:27:56.078Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:56.120Z
98632
2017-08-04T17:27:56.760Z
2017-08-04T17:29:35.392Z
2017-08-04T17:27:56.760Z
97645
2017-08-04T17:27:57.747Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:00.004Z
93036
2017-08-04T17:28:02.356Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:02.569Z
91110
2017-08-04T17:28:04.282Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:05.801Z
88455
2017-08-04T17:28:06.937Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:07.150Z
83964
2017-08-04T17:28:11.428Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:11.474Z
81948
2017-08-04T17:28:13.444Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:13.444Z
75055
2017-08-04T17:28:20.337Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:20.337Z
74352
2017-08-04T17:28:21.040Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:21.040Z
61968
2017-08-04T17:28:33.424Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:33.424Z
58478
2017-08-04T17:28:36.914Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:36.958Z
56199
2017-08-04T17:28:39.193Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:39.193Z
50576
2017-08-04T17:28:44.816Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:44.855Z
39708
2017-08-04T17:28:55.684Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:55.727Z
36625
2017-08-04T17:28:58.767Z
2017-08-04T17:29:35.392Z
2017-08-04T17:28:58.810Z
35335
2017-08-04T17:29:00.057Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:00.357Z
34215
2017-08-04T17:29:01.177Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:01.177Z
32344
2017-08-04T17:29:03.048Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:03.142Z
31386
2017-08-04T17:29:04.006Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:04.006Z
30427
2017-08-04T17:29:04.965Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:04.965Z
29001
2017-08-04T17:29:06.391Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:07.295Z
27456
2017-08-04T17:29:07.936Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:08.064Z
22827
2017-08-04T17:29:12.565Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:13.430Z
19366
2017-08-04T17:29:16.026Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:16.668Z
17567
2017-08-04T17:29:17.825Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:17.867Z
16371
2017-08-04T17:29:19.021Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:19.021Z
15561
2017-08-04T17:29:19.831Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:21.357Z
12685
2017-08-04T17:29:22.707Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:22.707Z
11820
2017-08-04T17:29:23.572Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:24.016Z
9958
2017-08-04T17:29:25.434Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:25.478Z
7883
2017-08-04T17:29:27.509Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:27.509Z
5509
2017-08-04T17:29:29.883Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:29.883Z
2640
2017-08-04T17:29:32.752Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:33.275Z
1424
2017-08-04T17:29:33.968Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:34.614Z
0
2017-08-04T17:29:35.392Z
2017-08-04T17:29:35.392Z
2017-08-04T17:29:36.156Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 38
120126
2017-08-04T17:27:33.842Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:33.842Z
114592
2017-08-04T17:27:39.376Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:39.975Z
112544
2017-08-04T17:27:41.424Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:42.961Z
110367
2017-08-04T17:27:43.601Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:45.489Z
107658
2017-08-04T17:27:46.310Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:46.397Z
106499
2017-08-04T17:27:47.469Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:47.723Z
103615
2017-08-04T17:27:50.353Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:51.128Z
101715
2017-08-04T17:27:52.253Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:52.517Z
99907
2017-08-04T17:27:54.061Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:54.147Z
97890
2017-08-04T17:27:56.078Z
2017-08-04T17:29:33.968Z
2017-08-04T17:27:56.078Z
94749
2017-08-04T17:27:59.219Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:00.008Z
89725
2017-08-04T17:28:04.243Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:05.797Z
86999
2017-08-04T17:28:06.969Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:07.358Z
80636
2017-08-04T17:28:13.332Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:13.673Z
64445
2017-08-04T17:28:29.523Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:29.567Z
55177
2017-08-04T17:28:38.791Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:38.962Z
49171
2017-08-04T17:28:44.797Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:44.797Z
38247
2017-08-04T17:28:55.721Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:55.721Z
35158
2017-08-04T17:28:58.810Z
2017-08-04T17:29:33.968Z
2017-08-04T17:28:58.810Z
33916
2017-08-04T17:29:00.052Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:00.095Z
30934
2017-08-04T17:29:03.034Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:03.131Z
29013
2017-08-04T17:29:04.955Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:05.041Z
27504
2017-08-04T17:29:06.464Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:07.295Z
26031
2017-08-04T17:29:07.937Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:08.021Z
22480
2017-08-04T17:29:11.488Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:11.488Z
21408
2017-08-04T17:29:12.560Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:12.731Z
17904
2017-08-04T17:29:16.064Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:17.100Z
16095
2017-08-04T17:29:17.873Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:17.873Z
14810
2017-08-04T17:29:19.158Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:20.657Z
12618
2017-08-04T17:29:21.350Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:21.350Z
11202
2017-08-04T17:29:22.766Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:22.766Z
10465
2017-08-04T17:29:23.503Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:24.026Z
8897
2017-08-04T17:29:25.071Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:25.583Z
6468
2017-08-04T17:29:27.500Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:27.500Z
4789
2017-08-04T17:29:29.179Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:29.179Z
4149
2017-08-04T17:29:29.819Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:29.819Z
1130
2017-08-04T17:29:32.838Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:33.275Z
0
2017-08-04T17:29:33.968Z
2017-08-04T17:29:33.968Z
2017-08-04T17:29:34.654Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 16
5072358
2017-08-04T16:05:08.844Z
2017-08-04T17:29:41.202Z
2017-08-04T16:05:09.099Z
38184
2017-08-04T17:29:03.018Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:03.103Z
34600
2017-08-04T17:29:06.602Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:06.645Z
29714
2017-08-04T17:29:11.488Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:11.488Z
28642
2017-08-04T17:29:12.560Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:13.456Z
25154
2017-08-04T17:29:16.048Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:17.105Z
23362
2017-08-04T17:29:17.840Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:17.883Z
21996
2017-08-04T17:29:19.206Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:21.361Z
17480
2017-08-04T17:29:23.722Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:24.026Z
16120
2017-08-04T17:29:25.082Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:25.466Z
12102
2017-08-04T17:29:29.100Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:29.148Z
11335
2017-08-04T17:29:29.867Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:29.953Z
8422
2017-08-04T17:29:32.780Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:34.715Z
5532
2017-08-04T17:29:35.670Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:36.168Z
4375
2017-08-04T17:29:36.827Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:36.827Z
0
2017-08-04T17:29:41.202Z
2017-08-04T17:29:41.202Z
2017-08-04T17:29:41.729Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 13
25318
2017-08-04T17:29:12.517Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:12.651Z
21814
2017-08-04T17:29:16.021Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:16.461Z
19957
2017-08-04T17:29:17.878Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:17.878Z
18632
2017-08-04T17:29:19.203Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:19.203Z
17995
2017-08-04T17:29:19.840Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:20.651Z
16495
2017-08-04T17:29:21.340Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:21.552Z
15153
2017-08-04T17:29:22.682Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:22.682Z
14130
2017-08-04T17:29:23.705Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:23.931Z
12769
2017-08-04T17:29:25.066Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:25.452Z
8715
2017-08-04T17:29:29.120Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:29.164Z
5098
2017-08-04T17:29:32.737Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:34.160Z
2080
2017-08-04T17:29:35.755Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:36.169Z
0
2017-08-04T17:29:37.835Z
2017-08-04T17:29:37.835Z
2017-08-04T17:29:37.835Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 86
5202848
2017-08-04T16:02:53.992Z
2017-08-04T17:29:36.840Z
2017-08-04T16:02:55.016Z
5128628
2017-08-04T16:04:08.212Z
2017-08-04T17:29:36.840Z
2017-08-04T16:04:09.113Z
5116904
2017-08-04T16:04:19.936Z
2017-08-04T17:29:36.840Z
2017-08-04T16:04:19.936Z
5095307
2017-08-04T16:04:41.533Z
2017-08-04T17:29:36.840Z
2017-08-04T16:04:41.533Z
5065603
2017-08-04T16:05:11.237Z
2017-08-04T17:29:36.840Z
2017-08-04T16:05:11.842Z
3501088
2017-08-04T16:31:15.752Z
2017-08-04T17:29:36.840Z
2017-08-04T16:31:16.861Z
3227281
2017-08-04T16:35:49.559Z
2017-08-04T17:29:36.840Z
2017-08-04T16:35:49.559Z
2867917
2017-08-04T16:41:48.923Z
2017-08-04T17:29:36.840Z
2017-08-04T16:41:48.923Z
2857432
2017-08-04T16:41:59.408Z
2017-08-04T17:29:36.840Z
2017-08-04T16:41:59.408Z
2840652
2017-08-04T16:42:16.188Z
2017-08-04T17:29:36.840Z
2017-08-04T16:42:16.657Z
2639070
2017-08-04T16:45:37.770Z
2017-08-04T17:29:36.840Z
2017-08-04T16:45:37.983Z
2635657
2017-08-04T16:45:41.183Z
2017-08-04T17:29:36.840Z
2017-08-04T16:45:41.268Z
2633993
2017-08-04T16:45:42.847Z
2017-08-04T17:29:36.840Z
2017-08-04T16:45:42.847Z
2632243
2017-08-04T16:45:44.597Z
2017-08-04T17:29:36.840Z
2017-08-04T16:45:44.597Z
2607671
2017-08-04T16:46:09.169Z
2017-08-04T17:29:36.840Z
2017-08-04T16:46:09.169Z
2538619
2017-08-04T16:47:18.221Z
2017-08-04T17:29:36.840Z
2017-08-04T16:47:19.117Z
2522848
2017-08-04T16:47:33.992Z
2017-08-04T17:29:36.840Z
2017-08-04T16:47:33.992Z
2522037
2017-08-04T16:47:34.803Z
2017-08-04T17:29:36.840Z
2017-08-04T16:47:35.368Z
2518869
2017-08-04T16:47:37.971Z
2017-08-04T17:29:36.840Z
2017-08-04T16:47:38.227Z
2509050
2017-08-04T16:47:47.790Z
2017-08-04T17:29:36.840Z
2017-08-04T16:47:49.155Z
2504826
2017-08-04T16:47:52.014Z
2017-08-04T17:29:36.840Z
2017-08-04T16:47:56.195Z
2499748
2017-08-04T16:47:57.092Z
2017-08-04T17:29:36.840Z
2017-08-04T16:47:57.219Z
2025230
2017-08-04T16:55:51.610Z
2017-08-04T17:29:36.840Z
2017-08-04T16:55:52.122Z
1874061
2017-08-04T16:58:22.779Z
2017-08-04T17:29:36.840Z
2017-08-04T16:58:22.779Z
1840435
2017-08-04T16:58:56.405Z
2017-08-04T17:29:36.840Z
2017-08-04T16:58:56.405Z
1043545
2017-08-04T17:12:13.295Z
2017-08-04T17:29:36.840Z
2017-08-04T17:12:13.295Z
835504
2017-08-04T17:15:41.336Z
2017-08-04T17:29:36.840Z
2017-08-04T17:15:41.336Z
662981
2017-08-04T17:18:33.859Z
2017-08-04T17:29:36.840Z
2017-08-04T17:18:33.859Z
556681
2017-08-04T17:20:20.159Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:20.202Z
555566
2017-08-04T17:20:21.274Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:21.578Z
553683
2017-08-04T17:20:23.157Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:23.200Z
552958
2017-08-04T17:20:23.882Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:25.930Z
549758
2017-08-04T17:20:27.082Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:29.472Z
545960
2017-08-04T17:20:30.880Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:34.170Z
541686
2017-08-04T17:20:35.154Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:35.154Z
538275
2017-08-04T17:20:38.565Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:38.651Z
533928
2017-08-04T17:20:42.912Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:43.040Z
529939
2017-08-04T17:20:46.901Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:47.072Z
528403
2017-08-04T17:20:48.437Z
2017-08-04T17:29:36.840Z
2017-08-04T17:20:48.522Z
516578
2017-08-04T17:21:00.262Z
2017-08-04T17:29:36.840Z
2017-08-04T17:21:00.646Z
508578
2017-08-04T17:21:08.262Z
2017-08-04T17:29:36.840Z
2017-08-04T17:21:08.304Z
122033
2017-08-04T17:27:34.807Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:34.807Z
117484
2017-08-04T17:27:39.356Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:39.356Z
115053
2017-08-04T17:27:41.787Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:42.043Z
110578
2017-08-04T17:27:46.262Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:46.306Z
109554
2017-08-04T17:27:47.286Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:47.675Z
106492
2017-08-04T17:27:50.348Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:50.348Z
104549
2017-08-04T17:27:52.291Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:52.333Z
102784
2017-08-04T17:27:54.056Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:55.438Z
100762
2017-08-04T17:27:56.078Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:56.120Z
100080
2017-08-04T17:27:56.760Z
2017-08-04T17:29:36.840Z
2017-08-04T17:27:56.760Z
99093
2017-08-04T17:27:57.747Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:00.004Z
94484
2017-08-04T17:28:02.356Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:02.569Z
92558
2017-08-04T17:28:04.282Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:05.801Z
89903
2017-08-04T17:28:06.937Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:07.150Z
85412
2017-08-04T17:28:11.428Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:11.474Z
83396
2017-08-04T17:28:13.444Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:13.444Z
76503
2017-08-04T17:28:20.337Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:20.337Z
75800
2017-08-04T17:28:21.040Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:21.040Z
63416
2017-08-04T17:28:33.424Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:33.424Z
59926
2017-08-04T17:28:36.914Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:36.958Z
57647
2017-08-04T17:28:39.193Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:39.193Z
52024
2017-08-04T17:28:44.816Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:44.855Z
41156
2017-08-04T17:28:55.684Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:55.727Z
38073
2017-08-04T17:28:58.767Z
2017-08-04T17:29:36.840Z
2017-08-04T17:28:58.810Z
36783
2017-08-04T17:29:00.057Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:00.357Z
35663
2017-08-04T17:29:01.177Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:01.177Z
33792
2017-08-04T17:29:03.048Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:03.142Z
32834
2017-08-04T17:29:04.006Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:04.006Z
31875
2017-08-04T17:29:04.965Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:04.965Z
30449
2017-08-04T17:29:06.391Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:07.295Z
28904
2017-08-04T17:29:07.936Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:08.064Z
24275
2017-08-04T17:29:12.565Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:13.430Z
20814
2017-08-04T17:29:16.026Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:16.668Z
19015
2017-08-04T17:29:17.825Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:17.867Z
17819
2017-08-04T17:29:19.021Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:19.021Z
17009
2017-08-04T17:29:19.831Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:21.357Z
14133
2017-08-04T17:29:22.707Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:22.707Z
13268
2017-08-04T17:29:23.572Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:24.016Z
11406
2017-08-04T17:29:25.434Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:25.478Z
9331
2017-08-04T17:29:27.509Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:27.509Z
6957
2017-08-04T17:29:29.883Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:29.883Z
4088
2017-08-04T17:29:32.752Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:33.275Z
2872
2017-08-04T17:29:33.968Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:34.614Z
1448
2017-08-04T17:29:35.392Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:36.156Z
0
2017-08-04T17:29:36.840Z
2017-08-04T17:29:36.840Z
2017-08-04T17:29:37.082Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 39
121856
2017-08-04T17:27:33.842Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:33.842Z
116322
2017-08-04T17:27:39.376Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:39.975Z
114274
2017-08-04T17:27:41.424Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:42.961Z
112097
2017-08-04T17:27:43.601Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:45.489Z
109388
2017-08-04T17:27:46.310Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:46.397Z
108229
2017-08-04T17:27:47.469Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:47.723Z
105345
2017-08-04T17:27:50.353Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:51.128Z
103445
2017-08-04T17:27:52.253Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:52.517Z
101637
2017-08-04T17:27:54.061Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:54.147Z
99620
2017-08-04T17:27:56.078Z
2017-08-04T17:29:35.698Z
2017-08-04T17:27:56.078Z
96479
2017-08-04T17:27:59.219Z
2017-08-04T17:29:35.698Z
2017-08-04T17:28:00.008Z
91455
2017-08-04T17:28:04.243Z
2017-08-04T17:29:35.698Z
2017-08-04T17:28:05.797Z
88729
2017-08-04T17:28:06.969Z
2017-08-04T17:29:35.698Z
2017-08-04T17:28:07.358Z
82366
2017-08-04T17:28:13.332Z
2017-08-04T17:29:35.698Z
2017-08-04T17:28:13.673Z
66175
2017-08-04T17:28:29.523Z
2017-08-04T17:29:35.698Z
2017-08-04T17:28:29.567Z
56907
2017-08-04T17:28:38.791Z
2017-08-04T17:29:35.698Z
2017-08-04T17:28:38.962Z
50901
2017-08-04T17:28:44.797Z
2017-08-04T17:29:35.698Z
2017-08-04T17:28:44.797Z
39977
2017-08-04T17:28:55.721Z
2017-08-04T17:29:35.698Z
2017-08-04T17:28:55.721Z
36888
2017-08-04T17:28:58.810Z
2017-08-04T17:29:35.698Z
2017-08-04T17:28:58.810Z
35646
2017-08-04T17:29:00.052Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:00.095Z
32664
2017-08-04T17:29:03.034Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:03.131Z
30743
2017-08-04T17:29:04.955Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:05.041Z
29234
2017-08-04T17:29:06.464Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:07.295Z
27761
2017-08-04T17:29:07.937Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:08.021Z
24210
2017-08-04T17:29:11.488Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:11.488Z
23138
2017-08-04T17:29:12.560Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:12.731Z
19634
2017-08-04T17:29:16.064Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:17.100Z
17825
2017-08-04T17:29:17.873Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:17.873Z
16540
2017-08-04T17:29:19.158Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:20.657Z
14348
2017-08-04T17:29:21.350Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:21.350Z
12932
2017-08-04T17:29:22.766Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:22.766Z
12195
2017-08-04T17:29:23.503Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:24.026Z
10627
2017-08-04T17:29:25.071Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:25.583Z
8198
2017-08-04T17:29:27.500Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:27.500Z
6519
2017-08-04T17:29:29.179Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:29.179Z
5879
2017-08-04T17:29:29.819Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:29.819Z
2860
2017-08-04T17:29:32.838Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:33.275Z
1730
2017-08-04T17:29:33.968Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:34.654Z
0
2017-08-04T17:29:35.698Z
2017-08-04T17:29:35.698Z
2017-08-04T17:29:36.839Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 17
5073572
2017-08-04T16:05:08.844Z
2017-08-04T17:29:42.416Z
2017-08-04T16:05:09.099Z
39398
2017-08-04T17:29:03.018Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:03.103Z
35814
2017-08-04T17:29:06.602Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:06.645Z
30928
2017-08-04T17:29:11.488Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:11.488Z
29856
2017-08-04T17:29:12.560Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:13.456Z
26368
2017-08-04T17:29:16.048Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:17.105Z
24576
2017-08-04T17:29:17.840Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:17.883Z
23210
2017-08-04T17:29:19.206Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:21.361Z
18694
2017-08-04T17:29:23.722Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:24.026Z
17334
2017-08-04T17:29:25.082Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:25.466Z
13316
2017-08-04T17:29:29.100Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:29.148Z
12549
2017-08-04T17:29:29.867Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:29.953Z
9636
2017-08-04T17:29:32.780Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:34.715Z
6746
2017-08-04T17:29:35.670Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:36.168Z
5589
2017-08-04T17:29:36.827Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:36.827Z
1214
2017-08-04T17:29:41.202Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:41.729Z
0
2017-08-04T17:29:42.416Z
2017-08-04T17:29:42.416Z
2017-08-04T17:29:44.806Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984af1c3fdd10ba54f6fa40,
       participant: 'dog',
       turns: 0.3486238532110092 },
     { _id: 5984af1c3fdd10ba54f6fa3f,
       participant: 'jordan',
       turns: 0.4036697247706422 },
     { _id: 5984af1c3fdd10ba54f6fa3e,
       participant: 'meep',
       turns: 0.13761467889908258 },
     { _id: 5984af1c3fdd10ba54f6fa3d,
       participant: 'mep',
       turns: 0.11009174311926606 } ],
  meeting: 'no',
  transitions: 95,
  timestamp: 2017-08-04T17:30:04.535Z,
  from: 2017-08-04T17:25:04.044Z,
  to: 2017-08-04T17:30:04.044Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af1c3fdd10ba54f6fa40,
       participant: 'dog',
       turns: 0.3486238532110092 },
     { _id: 5984af1c3fdd10ba54f6fa3f,
       participant: 'jordan',
       turns: 0.4036697247706422 },
     { _id: 5984af1c3fdd10ba54f6fa3e,
       participant: 'meep',
       turns: 0.13761467889908258 },
     { _id: 5984af1c3fdd10ba54f6fa3d,
       participant: 'mep',
       turns: 0.11009174311926606 } ],
  meeting: 'no',
  transitions: 95,
  timestamp: 2017-08-04T17:30:04.535Z,
  from: 2017-08-04T17:25:04.044Z,
  to: 2017-08-04T17:30:04.044Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: 
   [ { _id: 5984af1c3fdd10ba54f6fa40,
       participant: 'dog',
       turns: 0.3486238532110092 },
     { _id: 5984af1c3fdd10ba54f6fa3f,
       participant: 'jordan',
       turns: 0.4036697247706422 },
     { _id: 5984af1c3fdd10ba54f6fa3e,
       participant: 'meep',
       turns: 0.13761467889908258 },
     { _id: 5984af1c3fdd10ba54f6fa3d,
       participant: 'mep',
       turns: 0.11009174311926606 } ],
  meeting: 'no',
  transitions: 95,
  timestamp: 2017-08-04T17:30:04.535Z,
  from: 2017-08-04T17:25:04.044Z,
  to: 2017-08-04T17:30:04.044Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 18
5076644
2017-08-04T16:05:08.844Z
2017-08-04T17:29:45.488Z
2017-08-04T16:05:09.099Z
42470
2017-08-04T17:29:03.018Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:03.103Z
38886
2017-08-04T17:29:06.602Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:06.645Z
34000
2017-08-04T17:29:11.488Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:11.488Z
32928
2017-08-04T17:29:12.560Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:13.456Z
29440
2017-08-04T17:29:16.048Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:17.105Z
27648
2017-08-04T17:29:17.840Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:17.883Z
26282
2017-08-04T17:29:19.206Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:21.361Z
21766
2017-08-04T17:29:23.722Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:24.026Z
20406
2017-08-04T17:29:25.082Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:25.466Z
16388
2017-08-04T17:29:29.100Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:29.148Z
15621
2017-08-04T17:29:29.867Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:29.953Z
12708
2017-08-04T17:29:32.780Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:34.715Z
9818
2017-08-04T17:29:35.670Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:36.168Z
8661
2017-08-04T17:29:36.827Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:36.827Z
4286
2017-08-04T17:29:41.202Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:41.729Z
3072
2017-08-04T17:29:42.416Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:44.806Z
0
2017-08-04T17:29:45.488Z
2017-08-04T17:29:45.488Z
2017-08-04T17:29:45.702Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 40
127365
2017-08-04T17:27:33.842Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:33.842Z
121831
2017-08-04T17:27:39.376Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:39.975Z
119783
2017-08-04T17:27:41.424Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:42.961Z
117606
2017-08-04T17:27:43.601Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:45.489Z
114897
2017-08-04T17:27:46.310Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:46.397Z
113738
2017-08-04T17:27:47.469Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:47.723Z
110854
2017-08-04T17:27:50.353Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:51.128Z
108954
2017-08-04T17:27:52.253Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:52.517Z
107146
2017-08-04T17:27:54.061Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:54.147Z
105129
2017-08-04T17:27:56.078Z
2017-08-04T17:29:41.207Z
2017-08-04T17:27:56.078Z
101988
2017-08-04T17:27:59.219Z
2017-08-04T17:29:41.207Z
2017-08-04T17:28:00.008Z
96964
2017-08-04T17:28:04.243Z
2017-08-04T17:29:41.207Z
2017-08-04T17:28:05.797Z
94238
2017-08-04T17:28:06.969Z
2017-08-04T17:29:41.207Z
2017-08-04T17:28:07.358Z
87875
2017-08-04T17:28:13.332Z
2017-08-04T17:29:41.207Z
2017-08-04T17:28:13.673Z
71684
2017-08-04T17:28:29.523Z
2017-08-04T17:29:41.207Z
2017-08-04T17:28:29.567Z
62416
2017-08-04T17:28:38.791Z
2017-08-04T17:29:41.207Z
2017-08-04T17:28:38.962Z
56410
2017-08-04T17:28:44.797Z
2017-08-04T17:29:41.207Z
2017-08-04T17:28:44.797Z
45486
2017-08-04T17:28:55.721Z
2017-08-04T17:29:41.207Z
2017-08-04T17:28:55.721Z
42397
2017-08-04T17:28:58.810Z
2017-08-04T17:29:41.207Z
2017-08-04T17:28:58.810Z
41155
2017-08-04T17:29:00.052Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:00.095Z
38173
2017-08-04T17:29:03.034Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:03.131Z
36252
2017-08-04T17:29:04.955Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:05.041Z
34743
2017-08-04T17:29:06.464Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:07.295Z
33270
2017-08-04T17:29:07.937Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:08.021Z
29719
2017-08-04T17:29:11.488Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:11.488Z
28647
2017-08-04T17:29:12.560Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:12.731Z
25143
2017-08-04T17:29:16.064Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:17.100Z
23334
2017-08-04T17:29:17.873Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:17.873Z
22049
2017-08-04T17:29:19.158Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:20.657Z
19857
2017-08-04T17:29:21.350Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:21.350Z
18441
2017-08-04T17:29:22.766Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:22.766Z
17704
2017-08-04T17:29:23.503Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:24.026Z
16136
2017-08-04T17:29:25.071Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:25.583Z
13707
2017-08-04T17:29:27.500Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:27.500Z
12028
2017-08-04T17:29:29.179Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:29.179Z
11388
2017-08-04T17:29:29.819Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:29.819Z
8369
2017-08-04T17:29:32.838Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:33.275Z
7239
2017-08-04T17:29:33.968Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:34.654Z
5509
2017-08-04T17:29:35.698Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:36.839Z
0
2017-08-04T17:29:41.207Z
2017-08-04T17:29:41.207Z
2017-08-04T17:29:41.564Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 87
5207226
2017-08-04T16:02:53.992Z
2017-08-04T17:29:41.218Z
2017-08-04T16:02:55.016Z
5133006
2017-08-04T16:04:08.212Z
2017-08-04T17:29:41.218Z
2017-08-04T16:04:09.113Z
5121282
2017-08-04T16:04:19.936Z
2017-08-04T17:29:41.218Z
2017-08-04T16:04:19.936Z
5099685
2017-08-04T16:04:41.533Z
2017-08-04T17:29:41.218Z
2017-08-04T16:04:41.533Z
5069981
2017-08-04T16:05:11.237Z
2017-08-04T17:29:41.218Z
2017-08-04T16:05:11.842Z
3505466
2017-08-04T16:31:15.752Z
2017-08-04T17:29:41.218Z
2017-08-04T16:31:16.861Z
3231659
2017-08-04T16:35:49.559Z
2017-08-04T17:29:41.218Z
2017-08-04T16:35:49.559Z
2872295
2017-08-04T16:41:48.923Z
2017-08-04T17:29:41.218Z
2017-08-04T16:41:48.923Z
2861810
2017-08-04T16:41:59.408Z
2017-08-04T17:29:41.218Z
2017-08-04T16:41:59.408Z
2845030
2017-08-04T16:42:16.188Z
2017-08-04T17:29:41.218Z
2017-08-04T16:42:16.657Z
2643448
2017-08-04T16:45:37.770Z
2017-08-04T17:29:41.218Z
2017-08-04T16:45:37.983Z
2640035
2017-08-04T16:45:41.183Z
2017-08-04T17:29:41.218Z
2017-08-04T16:45:41.268Z
2638371
2017-08-04T16:45:42.847Z
2017-08-04T17:29:41.218Z
2017-08-04T16:45:42.847Z
2636621
2017-08-04T16:45:44.597Z
2017-08-04T17:29:41.218Z
2017-08-04T16:45:44.597Z
2612049
2017-08-04T16:46:09.169Z
2017-08-04T17:29:41.218Z
2017-08-04T16:46:09.169Z
2542997
2017-08-04T16:47:18.221Z
2017-08-04T17:29:41.218Z
2017-08-04T16:47:19.117Z
2527226
2017-08-04T16:47:33.992Z
2017-08-04T17:29:41.218Z
2017-08-04T16:47:33.992Z
2526415
2017-08-04T16:47:34.803Z
2017-08-04T17:29:41.218Z
2017-08-04T16:47:35.368Z
2523247
2017-08-04T16:47:37.971Z
2017-08-04T17:29:41.218Z
2017-08-04T16:47:38.227Z
2513428
2017-08-04T16:47:47.790Z
2017-08-04T17:29:41.218Z
2017-08-04T16:47:49.155Z
2509204
2017-08-04T16:47:52.014Z
2017-08-04T17:29:41.218Z
2017-08-04T16:47:56.195Z
2504126
2017-08-04T16:47:57.092Z
2017-08-04T17:29:41.218Z
2017-08-04T16:47:57.219Z
2029608
2017-08-04T16:55:51.610Z
2017-08-04T17:29:41.218Z
2017-08-04T16:55:52.122Z
1878439
2017-08-04T16:58:22.779Z
2017-08-04T17:29:41.218Z
2017-08-04T16:58:22.779Z
1844813
2017-08-04T16:58:56.405Z
2017-08-04T17:29:41.218Z
2017-08-04T16:58:56.405Z
1047923
2017-08-04T17:12:13.295Z
2017-08-04T17:29:41.218Z
2017-08-04T17:12:13.295Z
839882
2017-08-04T17:15:41.336Z
2017-08-04T17:29:41.218Z
2017-08-04T17:15:41.336Z
667359
2017-08-04T17:18:33.859Z
2017-08-04T17:29:41.218Z
2017-08-04T17:18:33.859Z
561059
2017-08-04T17:20:20.159Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:20.202Z
559944
2017-08-04T17:20:21.274Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:21.578Z
558061
2017-08-04T17:20:23.157Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:23.200Z
557336
2017-08-04T17:20:23.882Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:25.930Z
554136
2017-08-04T17:20:27.082Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:29.472Z
550338
2017-08-04T17:20:30.880Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:34.170Z
546064
2017-08-04T17:20:35.154Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:35.154Z
542653
2017-08-04T17:20:38.565Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:38.651Z
538306
2017-08-04T17:20:42.912Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:43.040Z
534317
2017-08-04T17:20:46.901Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:47.072Z
532781
2017-08-04T17:20:48.437Z
2017-08-04T17:29:41.218Z
2017-08-04T17:20:48.522Z
520956
2017-08-04T17:21:00.262Z
2017-08-04T17:29:41.218Z
2017-08-04T17:21:00.646Z
512956
2017-08-04T17:21:08.262Z
2017-08-04T17:29:41.218Z
2017-08-04T17:21:08.304Z
126411
2017-08-04T17:27:34.807Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:34.807Z
121862
2017-08-04T17:27:39.356Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:39.356Z
119431
2017-08-04T17:27:41.787Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:42.043Z
114956
2017-08-04T17:27:46.262Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:46.306Z
113932
2017-08-04T17:27:47.286Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:47.675Z
110870
2017-08-04T17:27:50.348Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:50.348Z
108927
2017-08-04T17:27:52.291Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:52.333Z
107162
2017-08-04T17:27:54.056Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:55.438Z
105140
2017-08-04T17:27:56.078Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:56.120Z
104458
2017-08-04T17:27:56.760Z
2017-08-04T17:29:41.218Z
2017-08-04T17:27:56.760Z
103471
2017-08-04T17:27:57.747Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:00.004Z
98862
2017-08-04T17:28:02.356Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:02.569Z
96936
2017-08-04T17:28:04.282Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:05.801Z
94281
2017-08-04T17:28:06.937Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:07.150Z
89790
2017-08-04T17:28:11.428Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:11.474Z
87774
2017-08-04T17:28:13.444Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:13.444Z
80881
2017-08-04T17:28:20.337Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:20.337Z
80178
2017-08-04T17:28:21.040Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:21.040Z
67794
2017-08-04T17:28:33.424Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:33.424Z
64304
2017-08-04T17:28:36.914Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:36.958Z
62025
2017-08-04T17:28:39.193Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:39.193Z
56402
2017-08-04T17:28:44.816Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:44.855Z
45534
2017-08-04T17:28:55.684Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:55.727Z
42451
2017-08-04T17:28:58.767Z
2017-08-04T17:29:41.218Z
2017-08-04T17:28:58.810Z
41161
2017-08-04T17:29:00.057Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:00.357Z
40041
2017-08-04T17:29:01.177Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:01.177Z
38170
2017-08-04T17:29:03.048Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:03.142Z
37212
2017-08-04T17:29:04.006Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:04.006Z
36253
2017-08-04T17:29:04.965Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:04.965Z
34827
2017-08-04T17:29:06.391Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:07.295Z
33282
2017-08-04T17:29:07.936Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:08.064Z
28653
2017-08-04T17:29:12.565Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:13.430Z
25192
2017-08-04T17:29:16.026Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:16.668Z
23393
2017-08-04T17:29:17.825Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:17.867Z
22197
2017-08-04T17:29:19.021Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:19.021Z
21387
2017-08-04T17:29:19.831Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:21.357Z
18511
2017-08-04T17:29:22.707Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:22.707Z
17646
2017-08-04T17:29:23.572Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:24.016Z
15784
2017-08-04T17:29:25.434Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:25.478Z
13709
2017-08-04T17:29:27.509Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:27.509Z
11335
2017-08-04T17:29:29.883Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:29.883Z
8466
2017-08-04T17:29:32.752Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:33.275Z
7250
2017-08-04T17:29:33.968Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:34.614Z
5826
2017-08-04T17:29:35.392Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:36.156Z
4378
2017-08-04T17:29:36.840Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:37.082Z
0
2017-08-04T17:29:41.218Z
2017-08-04T17:29:41.218Z
2017-08-04T17:29:41.666Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 19
5077585
2017-08-04T16:05:08.844Z
2017-08-04T17:29:46.429Z
2017-08-04T16:05:09.099Z
43411
2017-08-04T17:29:03.018Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:03.103Z
39827
2017-08-04T17:29:06.602Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:06.645Z
34941
2017-08-04T17:29:11.488Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:11.488Z
33869
2017-08-04T17:29:12.560Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:13.456Z
30381
2017-08-04T17:29:16.048Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:17.105Z
28589
2017-08-04T17:29:17.840Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:17.883Z
27223
2017-08-04T17:29:19.206Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:21.361Z
22707
2017-08-04T17:29:23.722Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:24.026Z
21347
2017-08-04T17:29:25.082Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:25.466Z
17329
2017-08-04T17:29:29.100Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:29.148Z
16562
2017-08-04T17:29:29.867Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:29.953Z
13649
2017-08-04T17:29:32.780Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:34.715Z
10759
2017-08-04T17:29:35.670Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:36.168Z
9602
2017-08-04T17:29:36.827Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:36.827Z
5227
2017-08-04T17:29:41.202Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:41.729Z
4013
2017-08-04T17:29:42.416Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:44.806Z
941
2017-08-04T17:29:45.488Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:45.702Z
0
2017-08-04T17:29:46.429Z
2017-08-04T17:29:46.429Z
2017-08-04T17:29:47.292Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 41
128495
2017-08-04T17:27:33.842Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:33.842Z
122961
2017-08-04T17:27:39.376Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:39.975Z
120913
2017-08-04T17:27:41.424Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:42.961Z
118736
2017-08-04T17:27:43.601Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:45.489Z
116027
2017-08-04T17:27:46.310Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:46.397Z
114868
2017-08-04T17:27:47.469Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:47.723Z
111984
2017-08-04T17:27:50.353Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:51.128Z
110084
2017-08-04T17:27:52.253Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:52.517Z
108276
2017-08-04T17:27:54.061Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:54.147Z
106259
2017-08-04T17:27:56.078Z
2017-08-04T17:29:42.337Z
2017-08-04T17:27:56.078Z
103118
2017-08-04T17:27:59.219Z
2017-08-04T17:29:42.337Z
2017-08-04T17:28:00.008Z
98094
2017-08-04T17:28:04.243Z
2017-08-04T17:29:42.337Z
2017-08-04T17:28:05.797Z
95368
2017-08-04T17:28:06.969Z
2017-08-04T17:29:42.337Z
2017-08-04T17:28:07.358Z
89005
2017-08-04T17:28:13.332Z
2017-08-04T17:29:42.337Z
2017-08-04T17:28:13.673Z
72814
2017-08-04T17:28:29.523Z
2017-08-04T17:29:42.337Z
2017-08-04T17:28:29.567Z
63546
2017-08-04T17:28:38.791Z
2017-08-04T17:29:42.337Z
2017-08-04T17:28:38.962Z
57540
2017-08-04T17:28:44.797Z
2017-08-04T17:29:42.337Z
2017-08-04T17:28:44.797Z
46616
2017-08-04T17:28:55.721Z
2017-08-04T17:29:42.337Z
2017-08-04T17:28:55.721Z
43527
2017-08-04T17:28:58.810Z
2017-08-04T17:29:42.337Z
2017-08-04T17:28:58.810Z
42285
2017-08-04T17:29:00.052Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:00.095Z
39303
2017-08-04T17:29:03.034Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:03.131Z
37382
2017-08-04T17:29:04.955Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:05.041Z
35873
2017-08-04T17:29:06.464Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:07.295Z
34400
2017-08-04T17:29:07.937Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:08.021Z
30849
2017-08-04T17:29:11.488Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:11.488Z
29777
2017-08-04T17:29:12.560Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:12.731Z
26273
2017-08-04T17:29:16.064Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:17.100Z
24464
2017-08-04T17:29:17.873Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:17.873Z
23179
2017-08-04T17:29:19.158Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:20.657Z
20987
2017-08-04T17:29:21.350Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:21.350Z
19571
2017-08-04T17:29:22.766Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:22.766Z
18834
2017-08-04T17:29:23.503Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:24.026Z
17266
2017-08-04T17:29:25.071Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:25.583Z
14837
2017-08-04T17:29:27.500Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:27.500Z
13158
2017-08-04T17:29:29.179Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:29.179Z
12518
2017-08-04T17:29:29.819Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:29.819Z
9499
2017-08-04T17:29:32.838Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:33.275Z
8369
2017-08-04T17:29:33.968Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:34.654Z
6639
2017-08-04T17:29:35.698Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:36.839Z
1130
2017-08-04T17:29:41.207Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:41.564Z
0
2017-08-04T17:29:42.337Z
2017-08-04T17:29:42.337Z
2017-08-04T17:29:47.302Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 88
5208403
2017-08-04T16:02:53.992Z
2017-08-04T17:29:42.395Z
2017-08-04T16:02:55.016Z
5134183
2017-08-04T16:04:08.212Z
2017-08-04T17:29:42.395Z
2017-08-04T16:04:09.113Z
5122459
2017-08-04T16:04:19.936Z
2017-08-04T17:29:42.395Z
2017-08-04T16:04:19.936Z
5100862
2017-08-04T16:04:41.533Z
2017-08-04T17:29:42.395Z
2017-08-04T16:04:41.533Z
5071158
2017-08-04T16:05:11.237Z
2017-08-04T17:29:42.395Z
2017-08-04T16:05:11.842Z
3506643
2017-08-04T16:31:15.752Z
2017-08-04T17:29:42.395Z
2017-08-04T16:31:16.861Z
3232836
2017-08-04T16:35:49.559Z
2017-08-04T17:29:42.395Z
2017-08-04T16:35:49.559Z
2873472
2017-08-04T16:41:48.923Z
2017-08-04T17:29:42.395Z
2017-08-04T16:41:48.923Z
2862987
2017-08-04T16:41:59.408Z
2017-08-04T17:29:42.395Z
2017-08-04T16:41:59.408Z
2846207
2017-08-04T16:42:16.188Z
2017-08-04T17:29:42.395Z
2017-08-04T16:42:16.657Z
2644625
2017-08-04T16:45:37.770Z
2017-08-04T17:29:42.395Z
2017-08-04T16:45:37.983Z
2641212
2017-08-04T16:45:41.183Z
2017-08-04T17:29:42.395Z
2017-08-04T16:45:41.268Z
2639548
2017-08-04T16:45:42.847Z
2017-08-04T17:29:42.395Z
2017-08-04T16:45:42.847Z
2637798
2017-08-04T16:45:44.597Z
2017-08-04T17:29:42.395Z
2017-08-04T16:45:44.597Z
2613226
2017-08-04T16:46:09.169Z
2017-08-04T17:29:42.395Z
2017-08-04T16:46:09.169Z
2544174
2017-08-04T16:47:18.221Z
2017-08-04T17:29:42.395Z
2017-08-04T16:47:19.117Z
2528403
2017-08-04T16:47:33.992Z
2017-08-04T17:29:42.395Z
2017-08-04T16:47:33.992Z
2527592
2017-08-04T16:47:34.803Z
2017-08-04T17:29:42.395Z
2017-08-04T16:47:35.368Z
2524424
2017-08-04T16:47:37.971Z
2017-08-04T17:29:42.395Z
2017-08-04T16:47:38.227Z
2514605
2017-08-04T16:47:47.790Z
2017-08-04T17:29:42.395Z
2017-08-04T16:47:49.155Z
2510381
2017-08-04T16:47:52.014Z
2017-08-04T17:29:42.395Z
2017-08-04T16:47:56.195Z
2505303
2017-08-04T16:47:57.092Z
2017-08-04T17:29:42.395Z
2017-08-04T16:47:57.219Z
2030785
2017-08-04T16:55:51.610Z
2017-08-04T17:29:42.395Z
2017-08-04T16:55:52.122Z
1879616
2017-08-04T16:58:22.779Z
2017-08-04T17:29:42.395Z
2017-08-04T16:58:22.779Z
1845990
2017-08-04T16:58:56.405Z
2017-08-04T17:29:42.395Z
2017-08-04T16:58:56.405Z
1049100
2017-08-04T17:12:13.295Z
2017-08-04T17:29:42.395Z
2017-08-04T17:12:13.295Z
841059
2017-08-04T17:15:41.336Z
2017-08-04T17:29:42.395Z
2017-08-04T17:15:41.336Z
668536
2017-08-04T17:18:33.859Z
2017-08-04T17:29:42.395Z
2017-08-04T17:18:33.859Z
562236
2017-08-04T17:20:20.159Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:20.202Z
561121
2017-08-04T17:20:21.274Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:21.578Z
559238
2017-08-04T17:20:23.157Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:23.200Z
558513
2017-08-04T17:20:23.882Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:25.930Z
555313
2017-08-04T17:20:27.082Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:29.472Z
551515
2017-08-04T17:20:30.880Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:34.170Z
547241
2017-08-04T17:20:35.154Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:35.154Z
543830
2017-08-04T17:20:38.565Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:38.651Z
539483
2017-08-04T17:20:42.912Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:43.040Z
535494
2017-08-04T17:20:46.901Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:47.072Z
533958
2017-08-04T17:20:48.437Z
2017-08-04T17:29:42.395Z
2017-08-04T17:20:48.522Z
522133
2017-08-04T17:21:00.262Z
2017-08-04T17:29:42.395Z
2017-08-04T17:21:00.646Z
514133
2017-08-04T17:21:08.262Z
2017-08-04T17:29:42.395Z
2017-08-04T17:21:08.304Z
127588
2017-08-04T17:27:34.807Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:34.807Z
123039
2017-08-04T17:27:39.356Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:39.356Z
120608
2017-08-04T17:27:41.787Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:42.043Z
116133
2017-08-04T17:27:46.262Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:46.306Z
115109
2017-08-04T17:27:47.286Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:47.675Z
112047
2017-08-04T17:27:50.348Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:50.348Z
110104
2017-08-04T17:27:52.291Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:52.333Z
108339
2017-08-04T17:27:54.056Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:55.438Z
106317
2017-08-04T17:27:56.078Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:56.120Z
105635
2017-08-04T17:27:56.760Z
2017-08-04T17:29:42.395Z
2017-08-04T17:27:56.760Z
104648
2017-08-04T17:27:57.747Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:00.004Z
100039
2017-08-04T17:28:02.356Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:02.569Z
98113
2017-08-04T17:28:04.282Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:05.801Z
95458
2017-08-04T17:28:06.937Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:07.150Z
90967
2017-08-04T17:28:11.428Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:11.474Z
88951
2017-08-04T17:28:13.444Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:13.444Z
82058
2017-08-04T17:28:20.337Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:20.337Z
81355
2017-08-04T17:28:21.040Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:21.040Z
68971
2017-08-04T17:28:33.424Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:33.424Z
65481
2017-08-04T17:28:36.914Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:36.958Z
63202
2017-08-04T17:28:39.193Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:39.193Z
57579
2017-08-04T17:28:44.816Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:44.855Z
46711
2017-08-04T17:28:55.684Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:55.727Z
43628
2017-08-04T17:28:58.767Z
2017-08-04T17:29:42.395Z
2017-08-04T17:28:58.810Z
42338
2017-08-04T17:29:00.057Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:00.357Z
41218
2017-08-04T17:29:01.177Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:01.177Z
39347
2017-08-04T17:29:03.048Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:03.142Z
38389
2017-08-04T17:29:04.006Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:04.006Z
37430
2017-08-04T17:29:04.965Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:04.965Z
36004
2017-08-04T17:29:06.391Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:07.295Z
34459
2017-08-04T17:29:07.936Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:08.064Z
29830
2017-08-04T17:29:12.565Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:13.430Z
26369
2017-08-04T17:29:16.026Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:16.668Z
24570
2017-08-04T17:29:17.825Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:17.867Z
23374
2017-08-04T17:29:19.021Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:19.021Z
22564
2017-08-04T17:29:19.831Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:21.357Z
19688
2017-08-04T17:29:22.707Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:22.707Z
18823
2017-08-04T17:29:23.572Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:24.016Z
16961
2017-08-04T17:29:25.434Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:25.478Z
14886
2017-08-04T17:29:27.509Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:27.509Z
12512
2017-08-04T17:29:29.883Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:29.883Z
9643
2017-08-04T17:29:32.752Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:33.275Z
8427
2017-08-04T17:29:33.968Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:34.614Z
7003
2017-08-04T17:29:35.392Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:36.156Z
5555
2017-08-04T17:29:36.840Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:37.082Z
1177
2017-08-04T17:29:41.218Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:41.666Z
0
2017-08-04T17:29:42.395Z
2017-08-04T17:29:42.395Z
2017-08-04T17:29:46.065Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 20
5079701
2017-08-04T16:05:08.844Z
2017-08-04T17:29:48.545Z
2017-08-04T16:05:09.099Z
45527
2017-08-04T17:29:03.018Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:03.103Z
41943
2017-08-04T17:29:06.602Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:06.645Z
37057
2017-08-04T17:29:11.488Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:11.488Z
35985
2017-08-04T17:29:12.560Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:13.456Z
32497
2017-08-04T17:29:16.048Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:17.105Z
30705
2017-08-04T17:29:17.840Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:17.883Z
29339
2017-08-04T17:29:19.206Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:21.361Z
24823
2017-08-04T17:29:23.722Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:24.026Z
23463
2017-08-04T17:29:25.082Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:25.466Z
19445
2017-08-04T17:29:29.100Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:29.148Z
18678
2017-08-04T17:29:29.867Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:29.953Z
15765
2017-08-04T17:29:32.780Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:34.715Z
12875
2017-08-04T17:29:35.670Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:36.168Z
11718
2017-08-04T17:29:36.827Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:36.827Z
7343
2017-08-04T17:29:41.202Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:41.729Z
6129
2017-08-04T17:29:42.416Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:44.806Z
3057
2017-08-04T17:29:45.488Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:45.702Z
2116
2017-08-04T17:29:46.429Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:47.292Z
0
2017-08-04T17:29:48.545Z
2017-08-04T17:29:48.545Z
2017-08-04T17:29:48.758Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 89
5212713
2017-08-04T16:02:53.992Z
2017-08-04T17:29:46.705Z
2017-08-04T16:02:55.016Z
5138493
2017-08-04T16:04:08.212Z
2017-08-04T17:29:46.705Z
2017-08-04T16:04:09.113Z
5126769
2017-08-04T16:04:19.936Z
2017-08-04T17:29:46.705Z
2017-08-04T16:04:19.936Z
5105172
2017-08-04T16:04:41.533Z
2017-08-04T17:29:46.705Z
2017-08-04T16:04:41.533Z
5075468
2017-08-04T16:05:11.237Z
2017-08-04T17:29:46.705Z
2017-08-04T16:05:11.842Z
3510953
2017-08-04T16:31:15.752Z
2017-08-04T17:29:46.705Z
2017-08-04T16:31:16.861Z
3237146
2017-08-04T16:35:49.559Z
2017-08-04T17:29:46.705Z
2017-08-04T16:35:49.559Z
2877782
2017-08-04T16:41:48.923Z
2017-08-04T17:29:46.705Z
2017-08-04T16:41:48.923Z
2867297
2017-08-04T16:41:59.408Z
2017-08-04T17:29:46.705Z
2017-08-04T16:41:59.408Z
2850517
2017-08-04T16:42:16.188Z
2017-08-04T17:29:46.705Z
2017-08-04T16:42:16.657Z
2648935
2017-08-04T16:45:37.770Z
2017-08-04T17:29:46.705Z
2017-08-04T16:45:37.983Z
2645522
2017-08-04T16:45:41.183Z
2017-08-04T17:29:46.705Z
2017-08-04T16:45:41.268Z
2643858
2017-08-04T16:45:42.847Z
2017-08-04T17:29:46.705Z
2017-08-04T16:45:42.847Z
2642108
2017-08-04T16:45:44.597Z
2017-08-04T17:29:46.705Z
2017-08-04T16:45:44.597Z
2617536
2017-08-04T16:46:09.169Z
2017-08-04T17:29:46.705Z
2017-08-04T16:46:09.169Z
2548484
2017-08-04T16:47:18.221Z
2017-08-04T17:29:46.705Z
2017-08-04T16:47:19.117Z
2532713
2017-08-04T16:47:33.992Z
2017-08-04T17:29:46.705Z
2017-08-04T16:47:33.992Z
2531902
2017-08-04T16:47:34.803Z
2017-08-04T17:29:46.705Z
2017-08-04T16:47:35.368Z
2528734
2017-08-04T16:47:37.971Z
2017-08-04T17:29:46.705Z
2017-08-04T16:47:38.227Z
2518915
2017-08-04T16:47:47.790Z
2017-08-04T17:29:46.705Z
2017-08-04T16:47:49.155Z
2514691
2017-08-04T16:47:52.014Z
2017-08-04T17:29:46.705Z
2017-08-04T16:47:56.195Z
2509613
2017-08-04T16:47:57.092Z
2017-08-04T17:29:46.705Z
2017-08-04T16:47:57.219Z
2035095
2017-08-04T16:55:51.610Z
2017-08-04T17:29:46.705Z
2017-08-04T16:55:52.122Z
1883926
2017-08-04T16:58:22.779Z
2017-08-04T17:29:46.705Z
2017-08-04T16:58:22.779Z
1850300
2017-08-04T16:58:56.405Z
2017-08-04T17:29:46.705Z
2017-08-04T16:58:56.405Z
1053410
2017-08-04T17:12:13.295Z
2017-08-04T17:29:46.705Z
2017-08-04T17:12:13.295Z
845369
2017-08-04T17:15:41.336Z
2017-08-04T17:29:46.705Z
2017-08-04T17:15:41.336Z
672846
2017-08-04T17:18:33.859Z
2017-08-04T17:29:46.705Z
2017-08-04T17:18:33.859Z
566546
2017-08-04T17:20:20.159Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:20.202Z
565431
2017-08-04T17:20:21.274Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:21.578Z
563548
2017-08-04T17:20:23.157Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:23.200Z
562823
2017-08-04T17:20:23.882Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:25.930Z
559623
2017-08-04T17:20:27.082Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:29.472Z
555825
2017-08-04T17:20:30.880Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:34.170Z
551551
2017-08-04T17:20:35.154Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:35.154Z
548140
2017-08-04T17:20:38.565Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:38.651Z
543793
2017-08-04T17:20:42.912Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:43.040Z
539804
2017-08-04T17:20:46.901Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:47.072Z
538268
2017-08-04T17:20:48.437Z
2017-08-04T17:29:46.705Z
2017-08-04T17:20:48.522Z
526443
2017-08-04T17:21:00.262Z
2017-08-04T17:29:46.705Z
2017-08-04T17:21:00.646Z
518443
2017-08-04T17:21:08.262Z
2017-08-04T17:29:46.705Z
2017-08-04T17:21:08.304Z
131898
2017-08-04T17:27:34.807Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:34.807Z
127349
2017-08-04T17:27:39.356Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:39.356Z
124918
2017-08-04T17:27:41.787Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:42.043Z
120443
2017-08-04T17:27:46.262Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:46.306Z
119419
2017-08-04T17:27:47.286Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:47.675Z
116357
2017-08-04T17:27:50.348Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:50.348Z
114414
2017-08-04T17:27:52.291Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:52.333Z
112649
2017-08-04T17:27:54.056Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:55.438Z
110627
2017-08-04T17:27:56.078Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:56.120Z
109945
2017-08-04T17:27:56.760Z
2017-08-04T17:29:46.705Z
2017-08-04T17:27:56.760Z
108958
2017-08-04T17:27:57.747Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:00.004Z
104349
2017-08-04T17:28:02.356Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:02.569Z
102423
2017-08-04T17:28:04.282Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:05.801Z
99768
2017-08-04T17:28:06.937Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:07.150Z
95277
2017-08-04T17:28:11.428Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:11.474Z
93261
2017-08-04T17:28:13.444Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:13.444Z
86368
2017-08-04T17:28:20.337Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:20.337Z
85665
2017-08-04T17:28:21.040Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:21.040Z
73281
2017-08-04T17:28:33.424Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:33.424Z
69791
2017-08-04T17:28:36.914Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:36.958Z
67512
2017-08-04T17:28:39.193Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:39.193Z
61889
2017-08-04T17:28:44.816Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:44.855Z
51021
2017-08-04T17:28:55.684Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:55.727Z
47938
2017-08-04T17:28:58.767Z
2017-08-04T17:29:46.705Z
2017-08-04T17:28:58.810Z
46648
2017-08-04T17:29:00.057Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:00.357Z
45528
2017-08-04T17:29:01.177Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:01.177Z
43657
2017-08-04T17:29:03.048Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:03.142Z
42699
2017-08-04T17:29:04.006Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:04.006Z
41740
2017-08-04T17:29:04.965Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:04.965Z
40314
2017-08-04T17:29:06.391Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:07.295Z
38769
2017-08-04T17:29:07.936Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:08.064Z
34140
2017-08-04T17:29:12.565Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:13.430Z
30679
2017-08-04T17:29:16.026Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:16.668Z
28880
2017-08-04T17:29:17.825Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:17.867Z
27684
2017-08-04T17:29:19.021Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:19.021Z
26874
2017-08-04T17:29:19.831Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:21.357Z
23998
2017-08-04T17:29:22.707Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:22.707Z
23133
2017-08-04T17:29:23.572Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:24.016Z
21271
2017-08-04T17:29:25.434Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:25.478Z
19196
2017-08-04T17:29:27.509Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:27.509Z
16822
2017-08-04T17:29:29.883Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:29.883Z
13953
2017-08-04T17:29:32.752Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:33.275Z
12737
2017-08-04T17:29:33.968Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:34.614Z
11313
2017-08-04T17:29:35.392Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:36.156Z
9865
2017-08-04T17:29:36.840Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:37.082Z
5487
2017-08-04T17:29:41.218Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:41.666Z
4310
2017-08-04T17:29:42.395Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:46.065Z
0
2017-08-04T17:29:46.705Z
2017-08-04T17:29:46.705Z
2017-08-04T17:29:47.058Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 42
134719
2017-08-04T17:27:33.842Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:33.842Z
129185
2017-08-04T17:27:39.376Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:39.975Z
127137
2017-08-04T17:27:41.424Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:42.961Z
124960
2017-08-04T17:27:43.601Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:45.489Z
122251
2017-08-04T17:27:46.310Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:46.397Z
121092
2017-08-04T17:27:47.469Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:47.723Z
118208
2017-08-04T17:27:50.353Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:51.128Z
116308
2017-08-04T17:27:52.253Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:52.517Z
114500
2017-08-04T17:27:54.061Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:54.147Z
112483
2017-08-04T17:27:56.078Z
2017-08-04T17:29:48.561Z
2017-08-04T17:27:56.078Z
109342
2017-08-04T17:27:59.219Z
2017-08-04T17:29:48.561Z
2017-08-04T17:28:00.008Z
104318
2017-08-04T17:28:04.243Z
2017-08-04T17:29:48.561Z
2017-08-04T17:28:05.797Z
101592
2017-08-04T17:28:06.969Z
2017-08-04T17:29:48.561Z
2017-08-04T17:28:07.358Z
95229
2017-08-04T17:28:13.332Z
2017-08-04T17:29:48.561Z
2017-08-04T17:28:13.673Z
79038
2017-08-04T17:28:29.523Z
2017-08-04T17:29:48.561Z
2017-08-04T17:28:29.567Z
69770
2017-08-04T17:28:38.791Z
2017-08-04T17:29:48.561Z
2017-08-04T17:28:38.962Z
63764
2017-08-04T17:28:44.797Z
2017-08-04T17:29:48.561Z
2017-08-04T17:28:44.797Z
52840
2017-08-04T17:28:55.721Z
2017-08-04T17:29:48.561Z
2017-08-04T17:28:55.721Z
49751
2017-08-04T17:28:58.810Z
2017-08-04T17:29:48.561Z
2017-08-04T17:28:58.810Z
48509
2017-08-04T17:29:00.052Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:00.095Z
45527
2017-08-04T17:29:03.034Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:03.131Z
43606
2017-08-04T17:29:04.955Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:05.041Z
42097
2017-08-04T17:29:06.464Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:07.295Z
40624
2017-08-04T17:29:07.937Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:08.021Z
37073
2017-08-04T17:29:11.488Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:11.488Z
36001
2017-08-04T17:29:12.560Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:12.731Z
32497
2017-08-04T17:29:16.064Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:17.100Z
30688
2017-08-04T17:29:17.873Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:17.873Z
29403
2017-08-04T17:29:19.158Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:20.657Z
27211
2017-08-04T17:29:21.350Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:21.350Z
25795
2017-08-04T17:29:22.766Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:22.766Z
25058
2017-08-04T17:29:23.503Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:24.026Z
23490
2017-08-04T17:29:25.071Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:25.583Z
21061
2017-08-04T17:29:27.500Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:27.500Z
19382
2017-08-04T17:29:29.179Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:29.179Z
18742
2017-08-04T17:29:29.819Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:29.819Z
15723
2017-08-04T17:29:32.838Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:33.275Z
14593
2017-08-04T17:29:33.968Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:34.654Z
12863
2017-08-04T17:29:35.698Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:36.839Z
7354
2017-08-04T17:29:41.207Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:41.564Z
6224
2017-08-04T17:29:42.337Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:47.302Z
0
2017-08-04T17:29:48.561Z
2017-08-04T17:29:48.561Z
2017-08-04T17:29:48.822Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 90
5216837
2017-08-04T16:02:53.992Z
2017-08-04T17:29:50.829Z
2017-08-04T16:02:55.016Z
5142617
2017-08-04T16:04:08.212Z
2017-08-04T17:29:50.829Z
2017-08-04T16:04:09.113Z
5130893
2017-08-04T16:04:19.936Z
2017-08-04T17:29:50.829Z
2017-08-04T16:04:19.936Z
5109296
2017-08-04T16:04:41.533Z
2017-08-04T17:29:50.829Z
2017-08-04T16:04:41.533Z
5079592
2017-08-04T16:05:11.237Z
2017-08-04T17:29:50.829Z
2017-08-04T16:05:11.842Z
3515077
2017-08-04T16:31:15.752Z
2017-08-04T17:29:50.829Z
2017-08-04T16:31:16.861Z
3241270
2017-08-04T16:35:49.559Z
2017-08-04T17:29:50.829Z
2017-08-04T16:35:49.559Z
2881906
2017-08-04T16:41:48.923Z
2017-08-04T17:29:50.829Z
2017-08-04T16:41:48.923Z
2871421
2017-08-04T16:41:59.408Z
2017-08-04T17:29:50.829Z
2017-08-04T16:41:59.408Z
2854641
2017-08-04T16:42:16.188Z
2017-08-04T17:29:50.829Z
2017-08-04T16:42:16.657Z
2653059
2017-08-04T16:45:37.770Z
2017-08-04T17:29:50.829Z
2017-08-04T16:45:37.983Z
2649646
2017-08-04T16:45:41.183Z
2017-08-04T17:29:50.829Z
2017-08-04T16:45:41.268Z
2647982
2017-08-04T16:45:42.847Z
2017-08-04T17:29:50.829Z
2017-08-04T16:45:42.847Z
2646232
2017-08-04T16:45:44.597Z
2017-08-04T17:29:50.829Z
2017-08-04T16:45:44.597Z
2621660
2017-08-04T16:46:09.169Z
2017-08-04T17:29:50.829Z
2017-08-04T16:46:09.169Z
2552608
2017-08-04T16:47:18.221Z
2017-08-04T17:29:50.829Z
2017-08-04T16:47:19.117Z
2536837
2017-08-04T16:47:33.992Z
2017-08-04T17:29:50.829Z
2017-08-04T16:47:33.992Z
2536026
2017-08-04T16:47:34.803Z
2017-08-04T17:29:50.829Z
2017-08-04T16:47:35.368Z
2532858
2017-08-04T16:47:37.971Z
2017-08-04T17:29:50.829Z
2017-08-04T16:47:38.227Z
2523039
2017-08-04T16:47:47.790Z
2017-08-04T17:29:50.829Z
2017-08-04T16:47:49.155Z
2518815
2017-08-04T16:47:52.014Z
2017-08-04T17:29:50.829Z
2017-08-04T16:47:56.195Z
2513737
2017-08-04T16:47:57.092Z
2017-08-04T17:29:50.829Z
2017-08-04T16:47:57.219Z
2039219
2017-08-04T16:55:51.610Z
2017-08-04T17:29:50.829Z
2017-08-04T16:55:52.122Z
1888050
2017-08-04T16:58:22.779Z
2017-08-04T17:29:50.829Z
2017-08-04T16:58:22.779Z
1854424
2017-08-04T16:58:56.405Z
2017-08-04T17:29:50.829Z
2017-08-04T16:58:56.405Z
1057534
2017-08-04T17:12:13.295Z
2017-08-04T17:29:50.829Z
2017-08-04T17:12:13.295Z
849493
2017-08-04T17:15:41.336Z
2017-08-04T17:29:50.829Z
2017-08-04T17:15:41.336Z
676970
2017-08-04T17:18:33.859Z
2017-08-04T17:29:50.829Z
2017-08-04T17:18:33.859Z
570670
2017-08-04T17:20:20.159Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:20.202Z
569555
2017-08-04T17:20:21.274Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:21.578Z
567672
2017-08-04T17:20:23.157Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:23.200Z
566947
2017-08-04T17:20:23.882Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:25.930Z
563747
2017-08-04T17:20:27.082Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:29.472Z
559949
2017-08-04T17:20:30.880Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:34.170Z
555675
2017-08-04T17:20:35.154Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:35.154Z
552264
2017-08-04T17:20:38.565Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:38.651Z
547917
2017-08-04T17:20:42.912Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:43.040Z
543928
2017-08-04T17:20:46.901Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:47.072Z
542392
2017-08-04T17:20:48.437Z
2017-08-04T17:29:50.829Z
2017-08-04T17:20:48.522Z
530567
2017-08-04T17:21:00.262Z
2017-08-04T17:29:50.829Z
2017-08-04T17:21:00.646Z
522567
2017-08-04T17:21:08.262Z
2017-08-04T17:29:50.829Z
2017-08-04T17:21:08.304Z
136022
2017-08-04T17:27:34.807Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:34.807Z
131473
2017-08-04T17:27:39.356Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:39.356Z
129042
2017-08-04T17:27:41.787Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:42.043Z
124567
2017-08-04T17:27:46.262Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:46.306Z
123543
2017-08-04T17:27:47.286Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:47.675Z
120481
2017-08-04T17:27:50.348Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:50.348Z
118538
2017-08-04T17:27:52.291Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:52.333Z
116773
2017-08-04T17:27:54.056Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:55.438Z
114751
2017-08-04T17:27:56.078Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:56.120Z
114069
2017-08-04T17:27:56.760Z
2017-08-04T17:29:50.829Z
2017-08-04T17:27:56.760Z
113082
2017-08-04T17:27:57.747Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:00.004Z
108473
2017-08-04T17:28:02.356Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:02.569Z
106547
2017-08-04T17:28:04.282Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:05.801Z
103892
2017-08-04T17:28:06.937Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:07.150Z
99401
2017-08-04T17:28:11.428Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:11.474Z
97385
2017-08-04T17:28:13.444Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:13.444Z
90492
2017-08-04T17:28:20.337Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:20.337Z
89789
2017-08-04T17:28:21.040Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:21.040Z
77405
2017-08-04T17:28:33.424Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:33.424Z
73915
2017-08-04T17:28:36.914Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:36.958Z
71636
2017-08-04T17:28:39.193Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:39.193Z
66013
2017-08-04T17:28:44.816Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:44.855Z
55145
2017-08-04T17:28:55.684Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:55.727Z
52062
2017-08-04T17:28:58.767Z
2017-08-04T17:29:50.829Z
2017-08-04T17:28:58.810Z
50772
2017-08-04T17:29:00.057Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:00.357Z
49652
2017-08-04T17:29:01.177Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:01.177Z
47781
2017-08-04T17:29:03.048Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:03.142Z
46823
2017-08-04T17:29:04.006Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:04.006Z
45864
2017-08-04T17:29:04.965Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:04.965Z
44438
2017-08-04T17:29:06.391Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:07.295Z
42893
2017-08-04T17:29:07.936Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:08.064Z
38264
2017-08-04T17:29:12.565Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:13.430Z
34803
2017-08-04T17:29:16.026Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:16.668Z
33004
2017-08-04T17:29:17.825Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:17.867Z
31808
2017-08-04T17:29:19.021Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:19.021Z
30998
2017-08-04T17:29:19.831Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:21.357Z
28122
2017-08-04T17:29:22.707Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:22.707Z
27257
2017-08-04T17:29:23.572Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:24.016Z
25395
2017-08-04T17:29:25.434Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:25.478Z
23320
2017-08-04T17:29:27.509Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:27.509Z
20946
2017-08-04T17:29:29.883Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:29.883Z
18077
2017-08-04T17:29:32.752Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:33.275Z
16861
2017-08-04T17:29:33.968Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:34.614Z
15437
2017-08-04T17:29:35.392Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:36.156Z
13989
2017-08-04T17:29:36.840Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:37.082Z
9611
2017-08-04T17:29:41.218Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:41.666Z
8434
2017-08-04T17:29:42.395Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:46.065Z
4124
2017-08-04T17:29:46.705Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:47.058Z
0
2017-08-04T17:29:50.829Z
2017-08-04T17:29:50.829Z
2017-08-04T17:29:50.829Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:25:15.080Z 2017-08-04T17:30:15.080Z
info: utterances found: 21
5082038
2017-08-04T16:05:08.844Z
2017-08-04T17:29:50.882Z
2017-08-04T16:05:09.099Z
47864
2017-08-04T17:29:03.018Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:03.103Z
44280
2017-08-04T17:29:06.602Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:06.645Z
39394
2017-08-04T17:29:11.488Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:11.488Z
38322
2017-08-04T17:29:12.560Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:13.456Z
34834
2017-08-04T17:29:16.048Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:17.105Z
33042
2017-08-04T17:29:17.840Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:17.883Z
31676
2017-08-04T17:29:19.206Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:21.361Z
27160
2017-08-04T17:29:23.722Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:24.026Z
25800
2017-08-04T17:29:25.082Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:25.466Z
21782
2017-08-04T17:29:29.100Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:29.148Z
21015
2017-08-04T17:29:29.867Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:29.953Z
18102
2017-08-04T17:29:32.780Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:34.715Z
15212
2017-08-04T17:29:35.670Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:36.168Z
14055
2017-08-04T17:29:36.827Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:36.827Z
9680
2017-08-04T17:29:41.202Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:41.729Z
8466
2017-08-04T17:29:42.416Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:44.806Z
5394
2017-08-04T17:29:45.488Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:45.702Z
4453
2017-08-04T17:29:46.429Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:47.292Z
2337
2017-08-04T17:29:48.545Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:48.758Z
0
2017-08-04T17:29:50.882Z
2017-08-04T17:29:50.882Z
2017-08-04T17:29:50.925Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 43
136918
2017-08-04T17:27:33.842Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:33.842Z
131384
2017-08-04T17:27:39.376Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:39.975Z
129336
2017-08-04T17:27:41.424Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:42.961Z
127159
2017-08-04T17:27:43.601Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:45.489Z
124450
2017-08-04T17:27:46.310Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:46.397Z
123291
2017-08-04T17:27:47.469Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:47.723Z
120407
2017-08-04T17:27:50.353Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:51.128Z
118507
2017-08-04T17:27:52.253Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:52.517Z
116699
2017-08-04T17:27:54.061Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:54.147Z
114682
2017-08-04T17:27:56.078Z
2017-08-04T17:29:50.760Z
2017-08-04T17:27:56.078Z
111541
2017-08-04T17:27:59.219Z
2017-08-04T17:29:50.760Z
2017-08-04T17:28:00.008Z
106517
2017-08-04T17:28:04.243Z
2017-08-04T17:29:50.760Z
2017-08-04T17:28:05.797Z
103791
2017-08-04T17:28:06.969Z
2017-08-04T17:29:50.760Z
2017-08-04T17:28:07.358Z
97428
2017-08-04T17:28:13.332Z
2017-08-04T17:29:50.760Z
2017-08-04T17:28:13.673Z
81237
2017-08-04T17:28:29.523Z
2017-08-04T17:29:50.760Z
2017-08-04T17:28:29.567Z
71969
2017-08-04T17:28:38.791Z
2017-08-04T17:29:50.760Z
2017-08-04T17:28:38.962Z
65963
2017-08-04T17:28:44.797Z
2017-08-04T17:29:50.760Z
2017-08-04T17:28:44.797Z
55039
2017-08-04T17:28:55.721Z
2017-08-04T17:29:50.760Z
2017-08-04T17:28:55.721Z
51950
2017-08-04T17:28:58.810Z
2017-08-04T17:29:50.760Z
2017-08-04T17:28:58.810Z
50708
2017-08-04T17:29:00.052Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:00.095Z
47726
2017-08-04T17:29:03.034Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:03.131Z
45805
2017-08-04T17:29:04.955Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:05.041Z
44296
2017-08-04T17:29:06.464Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:07.295Z
42823
2017-08-04T17:29:07.937Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:08.021Z
39272
2017-08-04T17:29:11.488Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:11.488Z
38200
2017-08-04T17:29:12.560Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:12.731Z
34696
2017-08-04T17:29:16.064Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:17.100Z
32887
2017-08-04T17:29:17.873Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:17.873Z
31602
2017-08-04T17:29:19.158Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:20.657Z
29410
2017-08-04T17:29:21.350Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:21.350Z
27994
2017-08-04T17:29:22.766Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:22.766Z
27257
2017-08-04T17:29:23.503Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:24.026Z
25689
2017-08-04T17:29:25.071Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:25.583Z
23260
2017-08-04T17:29:27.500Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:27.500Z
21581
2017-08-04T17:29:29.179Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:29.179Z
20941
2017-08-04T17:29:29.819Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:29.819Z
17922
2017-08-04T17:29:32.838Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:33.275Z
16792
2017-08-04T17:29:33.968Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:34.654Z
15062
2017-08-04T17:29:35.698Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:36.839Z
9553
2017-08-04T17:29:41.207Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:41.564Z
8423
2017-08-04T17:29:42.337Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:47.302Z
2199
2017-08-04T17:29:48.561Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:48.822Z
0
2017-08-04T17:29:50.760Z
2017-08-04T17:29:50.760Z
2017-08-04T17:29:50.887Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 44
138865
2017-08-04T17:27:33.842Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:33.842Z
133331
2017-08-04T17:27:39.376Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:39.975Z
131283
2017-08-04T17:27:41.424Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:42.961Z
129106
2017-08-04T17:27:43.601Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:45.489Z
126397
2017-08-04T17:27:46.310Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:46.397Z
125238
2017-08-04T17:27:47.469Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:47.723Z
122354
2017-08-04T17:27:50.353Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:51.128Z
120454
2017-08-04T17:27:52.253Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:52.517Z
118646
2017-08-04T17:27:54.061Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:54.147Z
116629
2017-08-04T17:27:56.078Z
2017-08-04T17:29:52.707Z
2017-08-04T17:27:56.078Z
113488
2017-08-04T17:27:59.219Z
2017-08-04T17:29:52.707Z
2017-08-04T17:28:00.008Z
108464
2017-08-04T17:28:04.243Z
2017-08-04T17:29:52.707Z
2017-08-04T17:28:05.797Z
105738
2017-08-04T17:28:06.969Z
2017-08-04T17:29:52.707Z
2017-08-04T17:28:07.358Z
99375
2017-08-04T17:28:13.332Z
2017-08-04T17:29:52.707Z
2017-08-04T17:28:13.673Z
83184
2017-08-04T17:28:29.523Z
2017-08-04T17:29:52.707Z
2017-08-04T17:28:29.567Z
73916
2017-08-04T17:28:38.791Z
2017-08-04T17:29:52.707Z
2017-08-04T17:28:38.962Z
67910
2017-08-04T17:28:44.797Z
2017-08-04T17:29:52.707Z
2017-08-04T17:28:44.797Z
56986
2017-08-04T17:28:55.721Z
2017-08-04T17:29:52.707Z
2017-08-04T17:28:55.721Z
53897
2017-08-04T17:28:58.810Z
2017-08-04T17:29:52.707Z
2017-08-04T17:28:58.810Z
52655
2017-08-04T17:29:00.052Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:00.095Z
49673
2017-08-04T17:29:03.034Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:03.131Z
47752
2017-08-04T17:29:04.955Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:05.041Z
46243
2017-08-04T17:29:06.464Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:07.295Z
44770
2017-08-04T17:29:07.937Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:08.021Z
41219
2017-08-04T17:29:11.488Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:11.488Z
40147
2017-08-04T17:29:12.560Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:12.731Z
36643
2017-08-04T17:29:16.064Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:17.100Z
34834
2017-08-04T17:29:17.873Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:17.873Z
33549
2017-08-04T17:29:19.158Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:20.657Z
31357
2017-08-04T17:29:21.350Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:21.350Z
29941
2017-08-04T17:29:22.766Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:22.766Z
29204
2017-08-04T17:29:23.503Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:24.026Z
27636
2017-08-04T17:29:25.071Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:25.583Z
25207
2017-08-04T17:29:27.500Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:27.500Z
23528
2017-08-04T17:29:29.179Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:29.179Z
22888
2017-08-04T17:29:29.819Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:29.819Z
19869
2017-08-04T17:29:32.838Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:33.275Z
18739
2017-08-04T17:29:33.968Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:34.654Z
17009
2017-08-04T17:29:35.698Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:36.839Z
11500
2017-08-04T17:29:41.207Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:41.564Z
10370
2017-08-04T17:29:42.337Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:47.302Z
4146
2017-08-04T17:29:48.561Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:48.822Z
1947
2017-08-04T17:29:50.760Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:50.887Z
0
2017-08-04T17:29:52.707Z
2017-08-04T17:29:52.707Z
2017-08-04T17:29:53.348Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 91
5218699
2017-08-04T16:02:53.992Z
2017-08-04T17:29:52.691Z
2017-08-04T16:02:55.016Z
5144479
2017-08-04T16:04:08.212Z
2017-08-04T17:29:52.691Z
2017-08-04T16:04:09.113Z
5132755
2017-08-04T16:04:19.936Z
2017-08-04T17:29:52.691Z
2017-08-04T16:04:19.936Z
5111158
2017-08-04T16:04:41.533Z
2017-08-04T17:29:52.691Z
2017-08-04T16:04:41.533Z
5081454
2017-08-04T16:05:11.237Z
2017-08-04T17:29:52.691Z
2017-08-04T16:05:11.842Z
3516939
2017-08-04T16:31:15.752Z
2017-08-04T17:29:52.691Z
2017-08-04T16:31:16.861Z
3243132
2017-08-04T16:35:49.559Z
2017-08-04T17:29:52.691Z
2017-08-04T16:35:49.559Z
2883768
2017-08-04T16:41:48.923Z
2017-08-04T17:29:52.691Z
2017-08-04T16:41:48.923Z
2873283
2017-08-04T16:41:59.408Z
2017-08-04T17:29:52.691Z
2017-08-04T16:41:59.408Z
2856503
2017-08-04T16:42:16.188Z
2017-08-04T17:29:52.691Z
2017-08-04T16:42:16.657Z
2654921
2017-08-04T16:45:37.770Z
2017-08-04T17:29:52.691Z
2017-08-04T16:45:37.983Z
2651508
2017-08-04T16:45:41.183Z
2017-08-04T17:29:52.691Z
2017-08-04T16:45:41.268Z
2649844
2017-08-04T16:45:42.847Z
2017-08-04T17:29:52.691Z
2017-08-04T16:45:42.847Z
2648094
2017-08-04T16:45:44.597Z
2017-08-04T17:29:52.691Z
2017-08-04T16:45:44.597Z
2623522
2017-08-04T16:46:09.169Z
2017-08-04T17:29:52.691Z
2017-08-04T16:46:09.169Z
2554470
2017-08-04T16:47:18.221Z
2017-08-04T17:29:52.691Z
2017-08-04T16:47:19.117Z
2538699
2017-08-04T16:47:33.992Z
2017-08-04T17:29:52.691Z
2017-08-04T16:47:33.992Z
2537888
2017-08-04T16:47:34.803Z
2017-08-04T17:29:52.691Z
2017-08-04T16:47:35.368Z
2534720
2017-08-04T16:47:37.971Z
2017-08-04T17:29:52.691Z
2017-08-04T16:47:38.227Z
2524901
2017-08-04T16:47:47.790Z
2017-08-04T17:29:52.691Z
2017-08-04T16:47:49.155Z
2520677
2017-08-04T16:47:52.014Z
2017-08-04T17:29:52.691Z
2017-08-04T16:47:56.195Z
2515599
2017-08-04T16:47:57.092Z
2017-08-04T17:29:52.691Z
2017-08-04T16:47:57.219Z
2041081
2017-08-04T16:55:51.610Z
2017-08-04T17:29:52.691Z
2017-08-04T16:55:52.122Z
1889912
2017-08-04T16:58:22.779Z
2017-08-04T17:29:52.691Z
2017-08-04T16:58:22.779Z
1856286
2017-08-04T16:58:56.405Z
2017-08-04T17:29:52.691Z
2017-08-04T16:58:56.405Z
1059396
2017-08-04T17:12:13.295Z
2017-08-04T17:29:52.691Z
2017-08-04T17:12:13.295Z
851355
2017-08-04T17:15:41.336Z
2017-08-04T17:29:52.691Z
2017-08-04T17:15:41.336Z
678832
2017-08-04T17:18:33.859Z
2017-08-04T17:29:52.691Z
2017-08-04T17:18:33.859Z
572532
2017-08-04T17:20:20.159Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:20.202Z
571417
2017-08-04T17:20:21.274Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:21.578Z
569534
2017-08-04T17:20:23.157Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:23.200Z
568809
2017-08-04T17:20:23.882Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:25.930Z
565609
2017-08-04T17:20:27.082Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:29.472Z
561811
2017-08-04T17:20:30.880Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:34.170Z
557537
2017-08-04T17:20:35.154Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:35.154Z
554126
2017-08-04T17:20:38.565Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:38.651Z
549779
2017-08-04T17:20:42.912Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:43.040Z
545790
2017-08-04T17:20:46.901Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:47.072Z
544254
2017-08-04T17:20:48.437Z
2017-08-04T17:29:52.691Z
2017-08-04T17:20:48.522Z
532429
2017-08-04T17:21:00.262Z
2017-08-04T17:29:52.691Z
2017-08-04T17:21:00.646Z
524429
2017-08-04T17:21:08.262Z
2017-08-04T17:29:52.691Z
2017-08-04T17:21:08.304Z
137884
2017-08-04T17:27:34.807Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:34.807Z
133335
2017-08-04T17:27:39.356Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:39.356Z
130904
2017-08-04T17:27:41.787Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:42.043Z
126429
2017-08-04T17:27:46.262Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:46.306Z
125405
2017-08-04T17:27:47.286Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:47.675Z
122343
2017-08-04T17:27:50.348Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:50.348Z
120400
2017-08-04T17:27:52.291Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:52.333Z
118635
2017-08-04T17:27:54.056Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:55.438Z
116613
2017-08-04T17:27:56.078Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:56.120Z
115931
2017-08-04T17:27:56.760Z
2017-08-04T17:29:52.691Z
2017-08-04T17:27:56.760Z
114944
2017-08-04T17:27:57.747Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:00.004Z
110335
2017-08-04T17:28:02.356Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:02.569Z
108409
2017-08-04T17:28:04.282Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:05.801Z
105754
2017-08-04T17:28:06.937Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:07.150Z
101263
2017-08-04T17:28:11.428Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:11.474Z
99247
2017-08-04T17:28:13.444Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:13.444Z
92354
2017-08-04T17:28:20.337Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:20.337Z
91651
2017-08-04T17:28:21.040Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:21.040Z
79267
2017-08-04T17:28:33.424Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:33.424Z
75777
2017-08-04T17:28:36.914Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:36.958Z
73498
2017-08-04T17:28:39.193Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:39.193Z
67875
2017-08-04T17:28:44.816Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:44.855Z
57007
2017-08-04T17:28:55.684Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:55.727Z
53924
2017-08-04T17:28:58.767Z
2017-08-04T17:29:52.691Z
2017-08-04T17:28:58.810Z
52634
2017-08-04T17:29:00.057Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:00.357Z
51514
2017-08-04T17:29:01.177Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:01.177Z
49643
2017-08-04T17:29:03.048Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:03.142Z
48685
2017-08-04T17:29:04.006Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:04.006Z
47726
2017-08-04T17:29:04.965Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:04.965Z
46300
2017-08-04T17:29:06.391Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:07.295Z
44755
2017-08-04T17:29:07.936Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:08.064Z
40126
2017-08-04T17:29:12.565Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:13.430Z
36665
2017-08-04T17:29:16.026Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:16.668Z
34866
2017-08-04T17:29:17.825Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:17.867Z
33670
2017-08-04T17:29:19.021Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:19.021Z
32860
2017-08-04T17:29:19.831Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:21.357Z
29984
2017-08-04T17:29:22.707Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:22.707Z
29119
2017-08-04T17:29:23.572Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:24.016Z
27257
2017-08-04T17:29:25.434Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:25.478Z
25182
2017-08-04T17:29:27.509Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:27.509Z
22808
2017-08-04T17:29:29.883Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:29.883Z
19939
2017-08-04T17:29:32.752Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:33.275Z
18723
2017-08-04T17:29:33.968Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:34.614Z
17299
2017-08-04T17:29:35.392Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:36.156Z
15851
2017-08-04T17:29:36.840Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:37.082Z
11473
2017-08-04T17:29:41.218Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:41.666Z
10296
2017-08-04T17:29:42.395Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:46.065Z
5986
2017-08-04T17:29:46.705Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:47.058Z
1862
2017-08-04T17:29:50.829Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:50.829Z
0
2017-08-04T17:29:52.691Z
2017-08-04T17:29:52.691Z
2017-08-04T17:29:53.288Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 22
5083857
2017-08-04T16:05:08.844Z
2017-08-04T17:29:52.701Z
2017-08-04T16:05:09.099Z
49683
2017-08-04T17:29:03.018Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:03.103Z
46099
2017-08-04T17:29:06.602Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:06.645Z
41213
2017-08-04T17:29:11.488Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:11.488Z
40141
2017-08-04T17:29:12.560Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:13.456Z
36653
2017-08-04T17:29:16.048Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:17.105Z
34861
2017-08-04T17:29:17.840Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:17.883Z
33495
2017-08-04T17:29:19.206Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:21.361Z
28979
2017-08-04T17:29:23.722Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:24.026Z
27619
2017-08-04T17:29:25.082Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:25.466Z
23601
2017-08-04T17:29:29.100Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:29.148Z
22834
2017-08-04T17:29:29.867Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:29.953Z
19921
2017-08-04T17:29:32.780Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:34.715Z
17031
2017-08-04T17:29:35.670Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:36.168Z
15874
2017-08-04T17:29:36.827Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:36.827Z
11499
2017-08-04T17:29:41.202Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:41.729Z
10285
2017-08-04T17:29:42.416Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:44.806Z
7213
2017-08-04T17:29:45.488Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:45.702Z
6272
2017-08-04T17:29:46.429Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:47.292Z
4156
2017-08-04T17:29:48.545Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:48.758Z
1819
2017-08-04T17:29:50.882Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:50.925Z
0
2017-08-04T17:29:52.701Z
2017-08-04T17:29:52.701Z
2017-08-04T17:29:53.682Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984af273fdd10ba54f6fa53,
       participant: 'dog',
       turns: 0.344 },
     { _id: 5984af273fdd10ba54f6fa52,
       participant: 'jordan',
       turns: 0.392 },
     { _id: 5984af273fdd10ba54f6fa51,
       participant: 'meep',
       turns: 0.16 },
     { _id: 5984af273fdd10ba54f6fa50,
       participant: 'mep',
       turns: 0.104 } ],
  meeting: 'no',
  transitions: 110,
  timestamp: 2017-08-04T17:30:15.172Z,
  from: 2017-08-04T17:25:15.080Z,
  to: 2017-08-04T17:30:15.080Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: utterances found: 92
5221749
2017-08-04T16:02:53.992Z
2017-08-04T17:29:55.741Z
2017-08-04T16:02:55.016Z
5147529
2017-08-04T16:04:08.212Z
2017-08-04T17:29:55.741Z
2017-08-04T16:04:09.113Z
5135805
2017-08-04T16:04:19.936Z
2017-08-04T17:29:55.741Z
2017-08-04T16:04:19.936Z
5114208
2017-08-04T16:04:41.533Z
2017-08-04T17:29:55.741Z
2017-08-04T16:04:41.533Z
5084504
2017-08-04T16:05:11.237Z
2017-08-04T17:29:55.741Z
2017-08-04T16:05:11.842Z
3519989
2017-08-04T16:31:15.752Z
2017-08-04T17:29:55.741Z
2017-08-04T16:31:16.861Z
3246182
2017-08-04T16:35:49.559Z
2017-08-04T17:29:55.741Z
2017-08-04T16:35:49.559Z
2886818
2017-08-04T16:41:48.923Z
2017-08-04T17:29:55.741Z
2017-08-04T16:41:48.923Z
2876333
2017-08-04T16:41:59.408Z
2017-08-04T17:29:55.741Z
2017-08-04T16:41:59.408Z
2859553
2017-08-04T16:42:16.188Z
2017-08-04T17:29:55.741Z
2017-08-04T16:42:16.657Z
2657971
2017-08-04T16:45:37.770Z
2017-08-04T17:29:55.741Z
2017-08-04T16:45:37.983Z
2654558
2017-08-04T16:45:41.183Z
2017-08-04T17:29:55.741Z
2017-08-04T16:45:41.268Z
2652894
2017-08-04T16:45:42.847Z
2017-08-04T17:29:55.741Z
2017-08-04T16:45:42.847Z
2651144
2017-08-04T16:45:44.597Z
2017-08-04T17:29:55.741Z
2017-08-04T16:45:44.597Z
2626572
2017-08-04T16:46:09.169Z
2017-08-04T17:29:55.741Z
2017-08-04T16:46:09.169Z
2557520
2017-08-04T16:47:18.221Z
2017-08-04T17:29:55.741Z
2017-08-04T16:47:19.117Z
2541749
2017-08-04T16:47:33.992Z
2017-08-04T17:29:55.741Z
2017-08-04T16:47:33.992Z
2540938
2017-08-04T16:47:34.803Z
2017-08-04T17:29:55.741Z
2017-08-04T16:47:35.368Z
2537770
2017-08-04T16:47:37.971Z
2017-08-04T17:29:55.741Z
2017-08-04T16:47:38.227Z
2527951
2017-08-04T16:47:47.790Z
2017-08-04T17:29:55.741Z
2017-08-04T16:47:49.155Z
2523727
2017-08-04T16:47:52.014Z
2017-08-04T17:29:55.741Z
2017-08-04T16:47:56.195Z
2518649
2017-08-04T16:47:57.092Z
2017-08-04T17:29:55.741Z
2017-08-04T16:47:57.219Z
2044131
2017-08-04T16:55:51.610Z
2017-08-04T17:29:55.741Z
2017-08-04T16:55:52.122Z
1892962
2017-08-04T16:58:22.779Z
2017-08-04T17:29:55.741Z
2017-08-04T16:58:22.779Z
1859336
2017-08-04T16:58:56.405Z
2017-08-04T17:29:55.741Z
2017-08-04T16:58:56.405Z
1062446
2017-08-04T17:12:13.295Z
2017-08-04T17:29:55.741Z
2017-08-04T17:12:13.295Z
854405
2017-08-04T17:15:41.336Z
2017-08-04T17:29:55.741Z
2017-08-04T17:15:41.336Z
681882
2017-08-04T17:18:33.859Z
2017-08-04T17:29:55.741Z
2017-08-04T17:18:33.859Z
575582
2017-08-04T17:20:20.159Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:20.202Z
574467
2017-08-04T17:20:21.274Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:21.578Z
572584
2017-08-04T17:20:23.157Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:23.200Z
571859
2017-08-04T17:20:23.882Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:25.930Z
568659
2017-08-04T17:20:27.082Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:29.472Z
564861
2017-08-04T17:20:30.880Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:34.170Z
560587
2017-08-04T17:20:35.154Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:35.154Z
557176
2017-08-04T17:20:38.565Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:38.651Z
552829
2017-08-04T17:20:42.912Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:43.040Z
548840
2017-08-04T17:20:46.901Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:47.072Z
547304
2017-08-04T17:20:48.437Z
2017-08-04T17:29:55.741Z
2017-08-04T17:20:48.522Z
535479
2017-08-04T17:21:00.262Z
2017-08-04T17:29:55.741Z
2017-08-04T17:21:00.646Z
527479
2017-08-04T17:21:08.262Z
2017-08-04T17:29:55.741Z
2017-08-04T17:21:08.304Z
140934
2017-08-04T17:27:34.807Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:34.807Z
136385
2017-08-04T17:27:39.356Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:39.356Z
133954
2017-08-04T17:27:41.787Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:42.043Z
129479
2017-08-04T17:27:46.262Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:46.306Z
128455
2017-08-04T17:27:47.286Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:47.675Z
125393
2017-08-04T17:27:50.348Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:50.348Z
123450
2017-08-04T17:27:52.291Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:52.333Z
121685
2017-08-04T17:27:54.056Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:55.438Z
119663
2017-08-04T17:27:56.078Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:56.120Z
118981
2017-08-04T17:27:56.760Z
2017-08-04T17:29:55.741Z
2017-08-04T17:27:56.760Z
117994
2017-08-04T17:27:57.747Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:00.004Z
113385
2017-08-04T17:28:02.356Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:02.569Z
111459
2017-08-04T17:28:04.282Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:05.801Z
108804
2017-08-04T17:28:06.937Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:07.150Z
104313
2017-08-04T17:28:11.428Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:11.474Z
102297
2017-08-04T17:28:13.444Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:13.444Z
95404
2017-08-04T17:28:20.337Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:20.337Z
94701
2017-08-04T17:28:21.040Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:21.040Z
82317
2017-08-04T17:28:33.424Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:33.424Z
78827
2017-08-04T17:28:36.914Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:36.958Z
76548
2017-08-04T17:28:39.193Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:39.193Z
70925
2017-08-04T17:28:44.816Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:44.855Z
60057
2017-08-04T17:28:55.684Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:55.727Z
56974
2017-08-04T17:28:58.767Z
2017-08-04T17:29:55.741Z
2017-08-04T17:28:58.810Z
55684
2017-08-04T17:29:00.057Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:00.357Z
54564
2017-08-04T17:29:01.177Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:01.177Z
52693
2017-08-04T17:29:03.048Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:03.142Z
51735
2017-08-04T17:29:04.006Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:04.006Z
50776
2017-08-04T17:29:04.965Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:04.965Z
49350
2017-08-04T17:29:06.391Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:07.295Z
47805
2017-08-04T17:29:07.936Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:08.064Z
43176
2017-08-04T17:29:12.565Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:13.430Z
39715
2017-08-04T17:29:16.026Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:16.668Z
37916
2017-08-04T17:29:17.825Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:17.867Z
36720
2017-08-04T17:29:19.021Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:19.021Z
35910
2017-08-04T17:29:19.831Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:21.357Z
33034
2017-08-04T17:29:22.707Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:22.707Z
32169
2017-08-04T17:29:23.572Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:24.016Z
30307
2017-08-04T17:29:25.434Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:25.478Z
28232
2017-08-04T17:29:27.509Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:27.509Z
25858
2017-08-04T17:29:29.883Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:29.883Z
22989
2017-08-04T17:29:32.752Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:33.275Z
21773
2017-08-04T17:29:33.968Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:34.614Z
20349
2017-08-04T17:29:35.392Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:36.156Z
18901
2017-08-04T17:29:36.840Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:37.082Z
14523
2017-08-04T17:29:41.218Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:41.666Z
13346
2017-08-04T17:29:42.395Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:46.065Z
9036
2017-08-04T17:29:46.705Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:47.058Z
4912
2017-08-04T17:29:50.829Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:50.829Z
3050
2017-08-04T17:29:52.691Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:53.288Z
0
2017-08-04T17:29:55.741Z
2017-08-04T17:29:55.741Z
2017-08-04T17:29:55.741Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 93
5222731
2017-08-04T16:02:53.992Z
2017-08-04T17:29:56.723Z
2017-08-04T16:02:55.016Z
5148511
2017-08-04T16:04:08.212Z
2017-08-04T17:29:56.723Z
2017-08-04T16:04:09.113Z
5136787
2017-08-04T16:04:19.936Z
2017-08-04T17:29:56.723Z
2017-08-04T16:04:19.936Z
5115190
2017-08-04T16:04:41.533Z
2017-08-04T17:29:56.723Z
2017-08-04T16:04:41.533Z
5085486
2017-08-04T16:05:11.237Z
2017-08-04T17:29:56.723Z
2017-08-04T16:05:11.842Z
3520971
2017-08-04T16:31:15.752Z
2017-08-04T17:29:56.723Z
2017-08-04T16:31:16.861Z
3247164
2017-08-04T16:35:49.559Z
2017-08-04T17:29:56.723Z
2017-08-04T16:35:49.559Z
2887800
2017-08-04T16:41:48.923Z
2017-08-04T17:29:56.723Z
2017-08-04T16:41:48.923Z
2877315
2017-08-04T16:41:59.408Z
2017-08-04T17:29:56.723Z
2017-08-04T16:41:59.408Z
2860535
2017-08-04T16:42:16.188Z
2017-08-04T17:29:56.723Z
2017-08-04T16:42:16.657Z
2658953
2017-08-04T16:45:37.770Z
2017-08-04T17:29:56.723Z
2017-08-04T16:45:37.983Z
2655540
2017-08-04T16:45:41.183Z
2017-08-04T17:29:56.723Z
2017-08-04T16:45:41.268Z
2653876
2017-08-04T16:45:42.847Z
2017-08-04T17:29:56.723Z
2017-08-04T16:45:42.847Z
2652126
2017-08-04T16:45:44.597Z
2017-08-04T17:29:56.723Z
2017-08-04T16:45:44.597Z
2627554
2017-08-04T16:46:09.169Z
2017-08-04T17:29:56.723Z
2017-08-04T16:46:09.169Z
2558502
2017-08-04T16:47:18.221Z
2017-08-04T17:29:56.723Z
2017-08-04T16:47:19.117Z
2542731
2017-08-04T16:47:33.992Z
2017-08-04T17:29:56.723Z
2017-08-04T16:47:33.992Z
2541920
2017-08-04T16:47:34.803Z
2017-08-04T17:29:56.723Z
2017-08-04T16:47:35.368Z
2538752
2017-08-04T16:47:37.971Z
2017-08-04T17:29:56.723Z
2017-08-04T16:47:38.227Z
2528933
2017-08-04T16:47:47.790Z
2017-08-04T17:29:56.723Z
2017-08-04T16:47:49.155Z
2524709
2017-08-04T16:47:52.014Z
2017-08-04T17:29:56.723Z
2017-08-04T16:47:56.195Z
2519631
2017-08-04T16:47:57.092Z
2017-08-04T17:29:56.723Z
2017-08-04T16:47:57.219Z
2045113
2017-08-04T16:55:51.610Z
2017-08-04T17:29:56.723Z
2017-08-04T16:55:52.122Z
1893944
2017-08-04T16:58:22.779Z
2017-08-04T17:29:56.723Z
2017-08-04T16:58:22.779Z
1860318
2017-08-04T16:58:56.405Z
2017-08-04T17:29:56.723Z
2017-08-04T16:58:56.405Z
1063428
2017-08-04T17:12:13.295Z
2017-08-04T17:29:56.723Z
2017-08-04T17:12:13.295Z
855387
2017-08-04T17:15:41.336Z
2017-08-04T17:29:56.723Z
2017-08-04T17:15:41.336Z
682864
2017-08-04T17:18:33.859Z
2017-08-04T17:29:56.723Z
2017-08-04T17:18:33.859Z
576564
2017-08-04T17:20:20.159Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:20.202Z
575449
2017-08-04T17:20:21.274Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:21.578Z
573566
2017-08-04T17:20:23.157Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:23.200Z
572841
2017-08-04T17:20:23.882Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:25.930Z
569641
2017-08-04T17:20:27.082Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:29.472Z
565843
2017-08-04T17:20:30.880Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:34.170Z
561569
2017-08-04T17:20:35.154Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:35.154Z
558158
2017-08-04T17:20:38.565Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:38.651Z
553811
2017-08-04T17:20:42.912Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:43.040Z
549822
2017-08-04T17:20:46.901Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:47.072Z
548286
2017-08-04T17:20:48.437Z
2017-08-04T17:29:56.723Z
2017-08-04T17:20:48.522Z
536461
2017-08-04T17:21:00.262Z
2017-08-04T17:29:56.723Z
2017-08-04T17:21:00.646Z
528461
2017-08-04T17:21:08.262Z
2017-08-04T17:29:56.723Z
2017-08-04T17:21:08.304Z
141916
2017-08-04T17:27:34.807Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:34.807Z
137367
2017-08-04T17:27:39.356Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:39.356Z
134936
2017-08-04T17:27:41.787Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:42.043Z
130461
2017-08-04T17:27:46.262Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:46.306Z
129437
2017-08-04T17:27:47.286Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:47.675Z
126375
2017-08-04T17:27:50.348Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:50.348Z
124432
2017-08-04T17:27:52.291Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:52.333Z
122667
2017-08-04T17:27:54.056Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:55.438Z
120645
2017-08-04T17:27:56.078Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:56.120Z
119963
2017-08-04T17:27:56.760Z
2017-08-04T17:29:56.723Z
2017-08-04T17:27:56.760Z
118976
2017-08-04T17:27:57.747Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:00.004Z
114367
2017-08-04T17:28:02.356Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:02.569Z
112441
2017-08-04T17:28:04.282Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:05.801Z
109786
2017-08-04T17:28:06.937Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:07.150Z
105295
2017-08-04T17:28:11.428Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:11.474Z
103279
2017-08-04T17:28:13.444Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:13.444Z
96386
2017-08-04T17:28:20.337Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:20.337Z
95683
2017-08-04T17:28:21.040Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:21.040Z
83299
2017-08-04T17:28:33.424Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:33.424Z
79809
2017-08-04T17:28:36.914Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:36.958Z
77530
2017-08-04T17:28:39.193Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:39.193Z
71907
2017-08-04T17:28:44.816Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:44.855Z
61039
2017-08-04T17:28:55.684Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:55.727Z
57956
2017-08-04T17:28:58.767Z
2017-08-04T17:29:56.723Z
2017-08-04T17:28:58.810Z
56666
2017-08-04T17:29:00.057Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:00.357Z
55546
2017-08-04T17:29:01.177Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:01.177Z
53675
2017-08-04T17:29:03.048Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:03.142Z
52717
2017-08-04T17:29:04.006Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:04.006Z
51758
2017-08-04T17:29:04.965Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:04.965Z
50332
2017-08-04T17:29:06.391Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:07.295Z
48787
2017-08-04T17:29:07.936Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:08.064Z
44158
2017-08-04T17:29:12.565Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:13.430Z
40697
2017-08-04T17:29:16.026Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:16.668Z
38898
2017-08-04T17:29:17.825Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:17.867Z
37702
2017-08-04T17:29:19.021Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:19.021Z
36892
2017-08-04T17:29:19.831Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:21.357Z
34016
2017-08-04T17:29:22.707Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:22.707Z
33151
2017-08-04T17:29:23.572Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:24.016Z
31289
2017-08-04T17:29:25.434Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:25.478Z
29214
2017-08-04T17:29:27.509Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:27.509Z
26840
2017-08-04T17:29:29.883Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:29.883Z
23971
2017-08-04T17:29:32.752Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:33.275Z
22755
2017-08-04T17:29:33.968Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:34.614Z
21331
2017-08-04T17:29:35.392Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:36.156Z
19883
2017-08-04T17:29:36.840Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:37.082Z
15505
2017-08-04T17:29:41.218Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:41.666Z
14328
2017-08-04T17:29:42.395Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:46.065Z
10018
2017-08-04T17:29:46.705Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:47.058Z
5894
2017-08-04T17:29:50.829Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:50.829Z
4032
2017-08-04T17:29:52.691Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:53.288Z
982
2017-08-04T17:29:55.741Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:55.741Z
0
2017-08-04T17:29:56.723Z
2017-08-04T17:29:56.723Z
2017-08-04T17:29:56.723Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 94
5223923
2017-08-04T16:02:53.992Z
2017-08-04T17:29:57.915Z
2017-08-04T16:02:55.016Z
5149703
2017-08-04T16:04:08.212Z
2017-08-04T17:29:57.915Z
2017-08-04T16:04:09.113Z
5137979
2017-08-04T16:04:19.936Z
2017-08-04T17:29:57.915Z
2017-08-04T16:04:19.936Z
5116382
2017-08-04T16:04:41.533Z
2017-08-04T17:29:57.915Z
2017-08-04T16:04:41.533Z
5086678
2017-08-04T16:05:11.237Z
2017-08-04T17:29:57.915Z
2017-08-04T16:05:11.842Z
3522163
2017-08-04T16:31:15.752Z
2017-08-04T17:29:57.915Z
2017-08-04T16:31:16.861Z
3248356
2017-08-04T16:35:49.559Z
2017-08-04T17:29:57.915Z
2017-08-04T16:35:49.559Z
2888992
2017-08-04T16:41:48.923Z
2017-08-04T17:29:57.915Z
2017-08-04T16:41:48.923Z
2878507
2017-08-04T16:41:59.408Z
2017-08-04T17:29:57.915Z
2017-08-04T16:41:59.408Z
2861727
2017-08-04T16:42:16.188Z
2017-08-04T17:29:57.915Z
2017-08-04T16:42:16.657Z
2660145
2017-08-04T16:45:37.770Z
2017-08-04T17:29:57.915Z
2017-08-04T16:45:37.983Z
2656732
2017-08-04T16:45:41.183Z
2017-08-04T17:29:57.915Z
2017-08-04T16:45:41.268Z
2655068
2017-08-04T16:45:42.847Z
2017-08-04T17:29:57.915Z
2017-08-04T16:45:42.847Z
2653318
2017-08-04T16:45:44.597Z
2017-08-04T17:29:57.915Z
2017-08-04T16:45:44.597Z
2628746
2017-08-04T16:46:09.169Z
2017-08-04T17:29:57.915Z
2017-08-04T16:46:09.169Z
2559694
2017-08-04T16:47:18.221Z
2017-08-04T17:29:57.915Z
2017-08-04T16:47:19.117Z
2543923
2017-08-04T16:47:33.992Z
2017-08-04T17:29:57.915Z
2017-08-04T16:47:33.992Z
2543112
2017-08-04T16:47:34.803Z
2017-08-04T17:29:57.915Z
2017-08-04T16:47:35.368Z
2539944
2017-08-04T16:47:37.971Z
2017-08-04T17:29:57.915Z
2017-08-04T16:47:38.227Z
2530125
2017-08-04T16:47:47.790Z
2017-08-04T17:29:57.915Z
2017-08-04T16:47:49.155Z
2525901
2017-08-04T16:47:52.014Z
2017-08-04T17:29:57.915Z
2017-08-04T16:47:56.195Z
2520823
2017-08-04T16:47:57.092Z
2017-08-04T17:29:57.915Z
2017-08-04T16:47:57.219Z
2046305
2017-08-04T16:55:51.610Z
2017-08-04T17:29:57.915Z
2017-08-04T16:55:52.122Z
1895136
2017-08-04T16:58:22.779Z
2017-08-04T17:29:57.915Z
2017-08-04T16:58:22.779Z
1861510
2017-08-04T16:58:56.405Z
2017-08-04T17:29:57.915Z
2017-08-04T16:58:56.405Z
1064620
2017-08-04T17:12:13.295Z
2017-08-04T17:29:57.915Z
2017-08-04T17:12:13.295Z
856579
2017-08-04T17:15:41.336Z
2017-08-04T17:29:57.915Z
2017-08-04T17:15:41.336Z
684056
2017-08-04T17:18:33.859Z
2017-08-04T17:29:57.915Z
2017-08-04T17:18:33.859Z
577756
2017-08-04T17:20:20.159Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:20.202Z
576641
2017-08-04T17:20:21.274Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:21.578Z
574758
2017-08-04T17:20:23.157Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:23.200Z
574033
2017-08-04T17:20:23.882Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:25.930Z
570833
2017-08-04T17:20:27.082Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:29.472Z
567035
2017-08-04T17:20:30.880Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:34.170Z
562761
2017-08-04T17:20:35.154Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:35.154Z
559350
2017-08-04T17:20:38.565Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:38.651Z
555003
2017-08-04T17:20:42.912Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:43.040Z
551014
2017-08-04T17:20:46.901Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:47.072Z
549478
2017-08-04T17:20:48.437Z
2017-08-04T17:29:57.915Z
2017-08-04T17:20:48.522Z
537653
2017-08-04T17:21:00.262Z
2017-08-04T17:29:57.915Z
2017-08-04T17:21:00.646Z
529653
2017-08-04T17:21:08.262Z
2017-08-04T17:29:57.915Z
2017-08-04T17:21:08.304Z
143108
2017-08-04T17:27:34.807Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:34.807Z
138559
2017-08-04T17:27:39.356Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:39.356Z
136128
2017-08-04T17:27:41.787Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:42.043Z
131653
2017-08-04T17:27:46.262Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:46.306Z
130629
2017-08-04T17:27:47.286Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:47.675Z
127567
2017-08-04T17:27:50.348Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:50.348Z
125624
2017-08-04T17:27:52.291Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:52.333Z
123859
2017-08-04T17:27:54.056Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:55.438Z
121837
2017-08-04T17:27:56.078Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:56.120Z
121155
2017-08-04T17:27:56.760Z
2017-08-04T17:29:57.915Z
2017-08-04T17:27:56.760Z
120168
2017-08-04T17:27:57.747Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:00.004Z
115559
2017-08-04T17:28:02.356Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:02.569Z
113633
2017-08-04T17:28:04.282Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:05.801Z
110978
2017-08-04T17:28:06.937Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:07.150Z
106487
2017-08-04T17:28:11.428Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:11.474Z
104471
2017-08-04T17:28:13.444Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:13.444Z
97578
2017-08-04T17:28:20.337Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:20.337Z
96875
2017-08-04T17:28:21.040Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:21.040Z
84491
2017-08-04T17:28:33.424Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:33.424Z
81001
2017-08-04T17:28:36.914Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:36.958Z
78722
2017-08-04T17:28:39.193Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:39.193Z
73099
2017-08-04T17:28:44.816Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:44.855Z
62231
2017-08-04T17:28:55.684Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:55.727Z
59148
2017-08-04T17:28:58.767Z
2017-08-04T17:29:57.915Z
2017-08-04T17:28:58.810Z
57858
2017-08-04T17:29:00.057Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:00.357Z
56738
2017-08-04T17:29:01.177Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:01.177Z
54867
2017-08-04T17:29:03.048Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:03.142Z
53909
2017-08-04T17:29:04.006Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:04.006Z
52950
2017-08-04T17:29:04.965Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:04.965Z
51524
2017-08-04T17:29:06.391Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:07.295Z
49979
2017-08-04T17:29:07.936Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:08.064Z
45350
2017-08-04T17:29:12.565Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:13.430Z
41889
2017-08-04T17:29:16.026Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:16.668Z
40090
2017-08-04T17:29:17.825Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:17.867Z
38894
2017-08-04T17:29:19.021Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:19.021Z
38084
2017-08-04T17:29:19.831Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:21.357Z
35208
2017-08-04T17:29:22.707Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:22.707Z
34343
2017-08-04T17:29:23.572Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:24.016Z
32481
2017-08-04T17:29:25.434Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:25.478Z
30406
2017-08-04T17:29:27.509Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:27.509Z
28032
2017-08-04T17:29:29.883Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:29.883Z
25163
2017-08-04T17:29:32.752Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:33.275Z
23947
2017-08-04T17:29:33.968Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:34.614Z
22523
2017-08-04T17:29:35.392Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:36.156Z
21075
2017-08-04T17:29:36.840Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:37.082Z
16697
2017-08-04T17:29:41.218Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:41.666Z
15520
2017-08-04T17:29:42.395Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:46.065Z
11210
2017-08-04T17:29:46.705Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:47.058Z
7086
2017-08-04T17:29:50.829Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:50.829Z
5224
2017-08-04T17:29:52.691Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:53.288Z
2174
2017-08-04T17:29:55.741Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:55.741Z
1192
2017-08-04T17:29:56.723Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:56.723Z
0
2017-08-04T17:29:57.915Z
2017-08-04T17:29:57.915Z
2017-08-04T17:29:58.172Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 95
5225865
2017-08-04T16:02:53.992Z
2017-08-04T17:29:59.857Z
2017-08-04T16:02:55.016Z
5151645
2017-08-04T16:04:08.212Z
2017-08-04T17:29:59.857Z
2017-08-04T16:04:09.113Z
5139921
2017-08-04T16:04:19.936Z
2017-08-04T17:29:59.857Z
2017-08-04T16:04:19.936Z
5118324
2017-08-04T16:04:41.533Z
2017-08-04T17:29:59.857Z
2017-08-04T16:04:41.533Z
5088620
2017-08-04T16:05:11.237Z
2017-08-04T17:29:59.857Z
2017-08-04T16:05:11.842Z
3524105
2017-08-04T16:31:15.752Z
2017-08-04T17:29:59.857Z
2017-08-04T16:31:16.861Z
3250298
2017-08-04T16:35:49.559Z
2017-08-04T17:29:59.857Z
2017-08-04T16:35:49.559Z
2890934
2017-08-04T16:41:48.923Z
2017-08-04T17:29:59.857Z
2017-08-04T16:41:48.923Z
2880449
2017-08-04T16:41:59.408Z
2017-08-04T17:29:59.857Z
2017-08-04T16:41:59.408Z
2863669
2017-08-04T16:42:16.188Z
2017-08-04T17:29:59.857Z
2017-08-04T16:42:16.657Z
2662087
2017-08-04T16:45:37.770Z
2017-08-04T17:29:59.857Z
2017-08-04T16:45:37.983Z
2658674
2017-08-04T16:45:41.183Z
2017-08-04T17:29:59.857Z
2017-08-04T16:45:41.268Z
2657010
2017-08-04T16:45:42.847Z
2017-08-04T17:29:59.857Z
2017-08-04T16:45:42.847Z
2655260
2017-08-04T16:45:44.597Z
2017-08-04T17:29:59.857Z
2017-08-04T16:45:44.597Z
2630688
2017-08-04T16:46:09.169Z
2017-08-04T17:29:59.857Z
2017-08-04T16:46:09.169Z
2561636
2017-08-04T16:47:18.221Z
2017-08-04T17:29:59.857Z
2017-08-04T16:47:19.117Z
2545865
2017-08-04T16:47:33.992Z
2017-08-04T17:29:59.857Z
2017-08-04T16:47:33.992Z
2545054
2017-08-04T16:47:34.803Z
2017-08-04T17:29:59.857Z
2017-08-04T16:47:35.368Z
2541886
2017-08-04T16:47:37.971Z
2017-08-04T17:29:59.857Z
2017-08-04T16:47:38.227Z
2532067
2017-08-04T16:47:47.790Z
2017-08-04T17:29:59.857Z
2017-08-04T16:47:49.155Z
2527843
2017-08-04T16:47:52.014Z
2017-08-04T17:29:59.857Z
2017-08-04T16:47:56.195Z
2522765
2017-08-04T16:47:57.092Z
2017-08-04T17:29:59.857Z
2017-08-04T16:47:57.219Z
2048247
2017-08-04T16:55:51.610Z
2017-08-04T17:29:59.857Z
2017-08-04T16:55:52.122Z
1897078
2017-08-04T16:58:22.779Z
2017-08-04T17:29:59.857Z
2017-08-04T16:58:22.779Z
1863452
2017-08-04T16:58:56.405Z
2017-08-04T17:29:59.857Z
2017-08-04T16:58:56.405Z
1066562
2017-08-04T17:12:13.295Z
2017-08-04T17:29:59.857Z
2017-08-04T17:12:13.295Z
858521
2017-08-04T17:15:41.336Z
2017-08-04T17:29:59.857Z
2017-08-04T17:15:41.336Z
685998
2017-08-04T17:18:33.859Z
2017-08-04T17:29:59.857Z
2017-08-04T17:18:33.859Z
579698
2017-08-04T17:20:20.159Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:20.202Z
578583
2017-08-04T17:20:21.274Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:21.578Z
576700
2017-08-04T17:20:23.157Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:23.200Z
575975
2017-08-04T17:20:23.882Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:25.930Z
572775
2017-08-04T17:20:27.082Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:29.472Z
568977
2017-08-04T17:20:30.880Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:34.170Z
564703
2017-08-04T17:20:35.154Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:35.154Z
561292
2017-08-04T17:20:38.565Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:38.651Z
556945
2017-08-04T17:20:42.912Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:43.040Z
552956
2017-08-04T17:20:46.901Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:47.072Z
551420
2017-08-04T17:20:48.437Z
2017-08-04T17:29:59.857Z
2017-08-04T17:20:48.522Z
539595
2017-08-04T17:21:00.262Z
2017-08-04T17:29:59.857Z
2017-08-04T17:21:00.646Z
531595
2017-08-04T17:21:08.262Z
2017-08-04T17:29:59.857Z
2017-08-04T17:21:08.304Z
145050
2017-08-04T17:27:34.807Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:34.807Z
140501
2017-08-04T17:27:39.356Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:39.356Z
138070
2017-08-04T17:27:41.787Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:42.043Z
133595
2017-08-04T17:27:46.262Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:46.306Z
132571
2017-08-04T17:27:47.286Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:47.675Z
129509
2017-08-04T17:27:50.348Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:50.348Z
127566
2017-08-04T17:27:52.291Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:52.333Z
125801
2017-08-04T17:27:54.056Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:55.438Z
123779
2017-08-04T17:27:56.078Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:56.120Z
123097
2017-08-04T17:27:56.760Z
2017-08-04T17:29:59.857Z
2017-08-04T17:27:56.760Z
122110
2017-08-04T17:27:57.747Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:00.004Z
117501
2017-08-04T17:28:02.356Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:02.569Z
115575
2017-08-04T17:28:04.282Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:05.801Z
112920
2017-08-04T17:28:06.937Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:07.150Z
108429
2017-08-04T17:28:11.428Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:11.474Z
106413
2017-08-04T17:28:13.444Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:13.444Z
99520
2017-08-04T17:28:20.337Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:20.337Z
98817
2017-08-04T17:28:21.040Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:21.040Z
86433
2017-08-04T17:28:33.424Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:33.424Z
82943
2017-08-04T17:28:36.914Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:36.958Z
80664
2017-08-04T17:28:39.193Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:39.193Z
75041
2017-08-04T17:28:44.816Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:44.855Z
64173
2017-08-04T17:28:55.684Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:55.727Z
61090
2017-08-04T17:28:58.767Z
2017-08-04T17:29:59.857Z
2017-08-04T17:28:58.810Z
59800
2017-08-04T17:29:00.057Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:00.357Z
58680
2017-08-04T17:29:01.177Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:01.177Z
56809
2017-08-04T17:29:03.048Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:03.142Z
55851
2017-08-04T17:29:04.006Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:04.006Z
54892
2017-08-04T17:29:04.965Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:04.965Z
53466
2017-08-04T17:29:06.391Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:07.295Z
51921
2017-08-04T17:29:07.936Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:08.064Z
47292
2017-08-04T17:29:12.565Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:13.430Z
43831
2017-08-04T17:29:16.026Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:16.668Z
42032
2017-08-04T17:29:17.825Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:17.867Z
40836
2017-08-04T17:29:19.021Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:19.021Z
40026
2017-08-04T17:29:19.831Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:21.357Z
37150
2017-08-04T17:29:22.707Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:22.707Z
36285
2017-08-04T17:29:23.572Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:24.016Z
34423
2017-08-04T17:29:25.434Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:25.478Z
32348
2017-08-04T17:29:27.509Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:27.509Z
29974
2017-08-04T17:29:29.883Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:29.883Z
27105
2017-08-04T17:29:32.752Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:33.275Z
25889
2017-08-04T17:29:33.968Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:34.614Z
24465
2017-08-04T17:29:35.392Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:36.156Z
23017
2017-08-04T17:29:36.840Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:37.082Z
18639
2017-08-04T17:29:41.218Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:41.666Z
17462
2017-08-04T17:29:42.395Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:46.065Z
13152
2017-08-04T17:29:46.705Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:47.058Z
9028
2017-08-04T17:29:50.829Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:50.829Z
7166
2017-08-04T17:29:52.691Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:53.288Z
4116
2017-08-04T17:29:55.741Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:55.741Z
3134
2017-08-04T17:29:56.723Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:56.723Z
1942
2017-08-04T17:29:57.915Z
2017-08-04T17:29:59.857Z
2017-08-04T17:29:58.172Z
0
2017-08-04T17:29:59.857Z
2017-08-04T17:29:59.857Z
2017-08-04T17:30:00.715Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 96
5231233
2017-08-04T16:02:53.992Z
2017-08-04T17:30:05.225Z
2017-08-04T16:02:55.016Z
5157013
2017-08-04T16:04:08.212Z
2017-08-04T17:30:05.225Z
2017-08-04T16:04:09.113Z
5145289
2017-08-04T16:04:19.936Z
2017-08-04T17:30:05.225Z
2017-08-04T16:04:19.936Z
5123692
2017-08-04T16:04:41.533Z
2017-08-04T17:30:05.225Z
2017-08-04T16:04:41.533Z
5093988
2017-08-04T16:05:11.237Z
2017-08-04T17:30:05.225Z
2017-08-04T16:05:11.842Z
3529473
2017-08-04T16:31:15.752Z
2017-08-04T17:30:05.225Z
2017-08-04T16:31:16.861Z
3255666
2017-08-04T16:35:49.559Z
2017-08-04T17:30:05.225Z
2017-08-04T16:35:49.559Z
2896302
2017-08-04T16:41:48.923Z
2017-08-04T17:30:05.225Z
2017-08-04T16:41:48.923Z
2885817
2017-08-04T16:41:59.408Z
2017-08-04T17:30:05.225Z
2017-08-04T16:41:59.408Z
2869037
2017-08-04T16:42:16.188Z
2017-08-04T17:30:05.225Z
2017-08-04T16:42:16.657Z
2667455
2017-08-04T16:45:37.770Z
2017-08-04T17:30:05.225Z
2017-08-04T16:45:37.983Z
2664042
2017-08-04T16:45:41.183Z
2017-08-04T17:30:05.225Z
2017-08-04T16:45:41.268Z
2662378
2017-08-04T16:45:42.847Z
2017-08-04T17:30:05.225Z
2017-08-04T16:45:42.847Z
2660628
2017-08-04T16:45:44.597Z
2017-08-04T17:30:05.225Z
2017-08-04T16:45:44.597Z
2636056
2017-08-04T16:46:09.169Z
2017-08-04T17:30:05.225Z
2017-08-04T16:46:09.169Z
2567004
2017-08-04T16:47:18.221Z
2017-08-04T17:30:05.225Z
2017-08-04T16:47:19.117Z
2551233
2017-08-04T16:47:33.992Z
2017-08-04T17:30:05.225Z
2017-08-04T16:47:33.992Z
2550422
2017-08-04T16:47:34.803Z
2017-08-04T17:30:05.225Z
2017-08-04T16:47:35.368Z
2547254
2017-08-04T16:47:37.971Z
2017-08-04T17:30:05.225Z
2017-08-04T16:47:38.227Z
2537435
2017-08-04T16:47:47.790Z
2017-08-04T17:30:05.225Z
2017-08-04T16:47:49.155Z
2533211
2017-08-04T16:47:52.014Z
2017-08-04T17:30:05.225Z
2017-08-04T16:47:56.195Z
2528133
2017-08-04T16:47:57.092Z
2017-08-04T17:30:05.225Z
2017-08-04T16:47:57.219Z
2053615
2017-08-04T16:55:51.610Z
2017-08-04T17:30:05.225Z
2017-08-04T16:55:52.122Z
1902446
2017-08-04T16:58:22.779Z
2017-08-04T17:30:05.225Z
2017-08-04T16:58:22.779Z
1868820
2017-08-04T16:58:56.405Z
2017-08-04T17:30:05.225Z
2017-08-04T16:58:56.405Z
1071930
2017-08-04T17:12:13.295Z
2017-08-04T17:30:05.225Z
2017-08-04T17:12:13.295Z
863889
2017-08-04T17:15:41.336Z
2017-08-04T17:30:05.225Z
2017-08-04T17:15:41.336Z
691366
2017-08-04T17:18:33.859Z
2017-08-04T17:30:05.225Z
2017-08-04T17:18:33.859Z
585066
2017-08-04T17:20:20.159Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:20.202Z
583951
2017-08-04T17:20:21.274Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:21.578Z
582068
2017-08-04T17:20:23.157Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:23.200Z
581343
2017-08-04T17:20:23.882Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:25.930Z
578143
2017-08-04T17:20:27.082Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:29.472Z
574345
2017-08-04T17:20:30.880Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:34.170Z
570071
2017-08-04T17:20:35.154Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:35.154Z
566660
2017-08-04T17:20:38.565Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:38.651Z
562313
2017-08-04T17:20:42.912Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:43.040Z
558324
2017-08-04T17:20:46.901Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:47.072Z
556788
2017-08-04T17:20:48.437Z
2017-08-04T17:30:05.225Z
2017-08-04T17:20:48.522Z
544963
2017-08-04T17:21:00.262Z
2017-08-04T17:30:05.225Z
2017-08-04T17:21:00.646Z
536963
2017-08-04T17:21:08.262Z
2017-08-04T17:30:05.225Z
2017-08-04T17:21:08.304Z
150418
2017-08-04T17:27:34.807Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:34.807Z
145869
2017-08-04T17:27:39.356Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:39.356Z
143438
2017-08-04T17:27:41.787Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:42.043Z
138963
2017-08-04T17:27:46.262Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:46.306Z
137939
2017-08-04T17:27:47.286Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:47.675Z
134877
2017-08-04T17:27:50.348Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:50.348Z
132934
2017-08-04T17:27:52.291Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:52.333Z
131169
2017-08-04T17:27:54.056Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:55.438Z
129147
2017-08-04T17:27:56.078Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:56.120Z
128465
2017-08-04T17:27:56.760Z
2017-08-04T17:30:05.225Z
2017-08-04T17:27:56.760Z
127478
2017-08-04T17:27:57.747Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:00.004Z
122869
2017-08-04T17:28:02.356Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:02.569Z
120943
2017-08-04T17:28:04.282Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:05.801Z
118288
2017-08-04T17:28:06.937Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:07.150Z
113797
2017-08-04T17:28:11.428Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:11.474Z
111781
2017-08-04T17:28:13.444Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:13.444Z
104888
2017-08-04T17:28:20.337Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:20.337Z
104185
2017-08-04T17:28:21.040Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:21.040Z
91801
2017-08-04T17:28:33.424Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:33.424Z
88311
2017-08-04T17:28:36.914Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:36.958Z
86032
2017-08-04T17:28:39.193Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:39.193Z
80409
2017-08-04T17:28:44.816Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:44.855Z
69541
2017-08-04T17:28:55.684Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:55.727Z
66458
2017-08-04T17:28:58.767Z
2017-08-04T17:30:05.225Z
2017-08-04T17:28:58.810Z
65168
2017-08-04T17:29:00.057Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:00.357Z
64048
2017-08-04T17:29:01.177Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:01.177Z
62177
2017-08-04T17:29:03.048Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:03.142Z
61219
2017-08-04T17:29:04.006Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:04.006Z
60260
2017-08-04T17:29:04.965Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:04.965Z
58834
2017-08-04T17:29:06.391Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:07.295Z
57289
2017-08-04T17:29:07.936Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:08.064Z
52660
2017-08-04T17:29:12.565Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:13.430Z
49199
2017-08-04T17:29:16.026Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:16.668Z
47400
2017-08-04T17:29:17.825Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:17.867Z
46204
2017-08-04T17:29:19.021Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:19.021Z
45394
2017-08-04T17:29:19.831Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:21.357Z
42518
2017-08-04T17:29:22.707Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:22.707Z
41653
2017-08-04T17:29:23.572Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:24.016Z
39791
2017-08-04T17:29:25.434Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:25.478Z
37716
2017-08-04T17:29:27.509Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:27.509Z
35342
2017-08-04T17:29:29.883Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:29.883Z
32473
2017-08-04T17:29:32.752Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:33.275Z
31257
2017-08-04T17:29:33.968Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:34.614Z
29833
2017-08-04T17:29:35.392Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:36.156Z
28385
2017-08-04T17:29:36.840Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:37.082Z
24007
2017-08-04T17:29:41.218Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:41.666Z
22830
2017-08-04T17:29:42.395Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:46.065Z
18520
2017-08-04T17:29:46.705Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:47.058Z
14396
2017-08-04T17:29:50.829Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:50.829Z
12534
2017-08-04T17:29:52.691Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:53.288Z
9484
2017-08-04T17:29:55.741Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:55.741Z
8502
2017-08-04T17:29:56.723Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:56.723Z
7310
2017-08-04T17:29:57.915Z
2017-08-04T17:30:05.225Z
2017-08-04T17:29:58.172Z
5368
2017-08-04T17:29:59.857Z
2017-08-04T17:30:05.225Z
2017-08-04T17:30:00.715Z
0
2017-08-04T17:30:05.225Z
2017-08-04T17:30:05.225Z
2017-08-04T17:30:05.268Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 97
5231927
2017-08-04T16:02:53.992Z
2017-08-04T17:30:05.919Z
2017-08-04T16:02:55.016Z
5157707
2017-08-04T16:04:08.212Z
2017-08-04T17:30:05.919Z
2017-08-04T16:04:09.113Z
5145983
2017-08-04T16:04:19.936Z
2017-08-04T17:30:05.919Z
2017-08-04T16:04:19.936Z
5124386
2017-08-04T16:04:41.533Z
2017-08-04T17:30:05.919Z
2017-08-04T16:04:41.533Z
5094682
2017-08-04T16:05:11.237Z
2017-08-04T17:30:05.919Z
2017-08-04T16:05:11.842Z
3530167
2017-08-04T16:31:15.752Z
2017-08-04T17:30:05.919Z
2017-08-04T16:31:16.861Z
3256360
2017-08-04T16:35:49.559Z
2017-08-04T17:30:05.919Z
2017-08-04T16:35:49.559Z
2896996
2017-08-04T16:41:48.923Z
2017-08-04T17:30:05.919Z
2017-08-04T16:41:48.923Z
2886511
2017-08-04T16:41:59.408Z
2017-08-04T17:30:05.919Z
2017-08-04T16:41:59.408Z
2869731
2017-08-04T16:42:16.188Z
2017-08-04T17:30:05.919Z
2017-08-04T16:42:16.657Z
2668149
2017-08-04T16:45:37.770Z
2017-08-04T17:30:05.919Z
2017-08-04T16:45:37.983Z
2664736
2017-08-04T16:45:41.183Z
2017-08-04T17:30:05.919Z
2017-08-04T16:45:41.268Z
2663072
2017-08-04T16:45:42.847Z
2017-08-04T17:30:05.919Z
2017-08-04T16:45:42.847Z
2661322
2017-08-04T16:45:44.597Z
2017-08-04T17:30:05.919Z
2017-08-04T16:45:44.597Z
2636750
2017-08-04T16:46:09.169Z
2017-08-04T17:30:05.919Z
2017-08-04T16:46:09.169Z
2567698
2017-08-04T16:47:18.221Z
2017-08-04T17:30:05.919Z
2017-08-04T16:47:19.117Z
2551927
2017-08-04T16:47:33.992Z
2017-08-04T17:30:05.919Z
2017-08-04T16:47:33.992Z
2551116
2017-08-04T16:47:34.803Z
2017-08-04T17:30:05.919Z
2017-08-04T16:47:35.368Z
2547948
2017-08-04T16:47:37.971Z
2017-08-04T17:30:05.919Z
2017-08-04T16:47:38.227Z
2538129
2017-08-04T16:47:47.790Z
2017-08-04T17:30:05.919Z
2017-08-04T16:47:49.155Z
2533905
2017-08-04T16:47:52.014Z
2017-08-04T17:30:05.919Z
2017-08-04T16:47:56.195Z
2528827
2017-08-04T16:47:57.092Z
2017-08-04T17:30:05.919Z
2017-08-04T16:47:57.219Z
2054309
2017-08-04T16:55:51.610Z
2017-08-04T17:30:05.919Z
2017-08-04T16:55:52.122Z
1903140
2017-08-04T16:58:22.779Z
2017-08-04T17:30:05.919Z
2017-08-04T16:58:22.779Z
1869514
2017-08-04T16:58:56.405Z
2017-08-04T17:30:05.919Z
2017-08-04T16:58:56.405Z
1072624
2017-08-04T17:12:13.295Z
2017-08-04T17:30:05.919Z
2017-08-04T17:12:13.295Z
864583
2017-08-04T17:15:41.336Z
2017-08-04T17:30:05.919Z
2017-08-04T17:15:41.336Z
692060
2017-08-04T17:18:33.859Z
2017-08-04T17:30:05.919Z
2017-08-04T17:18:33.859Z
585760
2017-08-04T17:20:20.159Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:20.202Z
584645
2017-08-04T17:20:21.274Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:21.578Z
582762
2017-08-04T17:20:23.157Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:23.200Z
582037
2017-08-04T17:20:23.882Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:25.930Z
578837
2017-08-04T17:20:27.082Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:29.472Z
575039
2017-08-04T17:20:30.880Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:34.170Z
570765
2017-08-04T17:20:35.154Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:35.154Z
567354
2017-08-04T17:20:38.565Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:38.651Z
563007
2017-08-04T17:20:42.912Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:43.040Z
559018
2017-08-04T17:20:46.901Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:47.072Z
557482
2017-08-04T17:20:48.437Z
2017-08-04T17:30:05.919Z
2017-08-04T17:20:48.522Z
545657
2017-08-04T17:21:00.262Z
2017-08-04T17:30:05.919Z
2017-08-04T17:21:00.646Z
537657
2017-08-04T17:21:08.262Z
2017-08-04T17:30:05.919Z
2017-08-04T17:21:08.304Z
151112
2017-08-04T17:27:34.807Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:34.807Z
146563
2017-08-04T17:27:39.356Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:39.356Z
144132
2017-08-04T17:27:41.787Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:42.043Z
139657
2017-08-04T17:27:46.262Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:46.306Z
138633
2017-08-04T17:27:47.286Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:47.675Z
135571
2017-08-04T17:27:50.348Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:50.348Z
133628
2017-08-04T17:27:52.291Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:52.333Z
131863
2017-08-04T17:27:54.056Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:55.438Z
129841
2017-08-04T17:27:56.078Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:56.120Z
129159
2017-08-04T17:27:56.760Z
2017-08-04T17:30:05.919Z
2017-08-04T17:27:56.760Z
128172
2017-08-04T17:27:57.747Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:00.004Z
123563
2017-08-04T17:28:02.356Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:02.569Z
121637
2017-08-04T17:28:04.282Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:05.801Z
118982
2017-08-04T17:28:06.937Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:07.150Z
114491
2017-08-04T17:28:11.428Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:11.474Z
112475
2017-08-04T17:28:13.444Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:13.444Z
105582
2017-08-04T17:28:20.337Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:20.337Z
104879
2017-08-04T17:28:21.040Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:21.040Z
92495
2017-08-04T17:28:33.424Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:33.424Z
89005
2017-08-04T17:28:36.914Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:36.958Z
86726
2017-08-04T17:28:39.193Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:39.193Z
81103
2017-08-04T17:28:44.816Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:44.855Z
70235
2017-08-04T17:28:55.684Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:55.727Z
67152
2017-08-04T17:28:58.767Z
2017-08-04T17:30:05.919Z
2017-08-04T17:28:58.810Z
65862
2017-08-04T17:29:00.057Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:00.357Z
64742
2017-08-04T17:29:01.177Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:01.177Z
62871
2017-08-04T17:29:03.048Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:03.142Z
61913
2017-08-04T17:29:04.006Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:04.006Z
60954
2017-08-04T17:29:04.965Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:04.965Z
59528
2017-08-04T17:29:06.391Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:07.295Z
57983
2017-08-04T17:29:07.936Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:08.064Z
53354
2017-08-04T17:29:12.565Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:13.430Z
49893
2017-08-04T17:29:16.026Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:16.668Z
48094
2017-08-04T17:29:17.825Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:17.867Z
46898
2017-08-04T17:29:19.021Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:19.021Z
46088
2017-08-04T17:29:19.831Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:21.357Z
43212
2017-08-04T17:29:22.707Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:22.707Z
42347
2017-08-04T17:29:23.572Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:24.016Z
40485
2017-08-04T17:29:25.434Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:25.478Z
38410
2017-08-04T17:29:27.509Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:27.509Z
36036
2017-08-04T17:29:29.883Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:29.883Z
33167
2017-08-04T17:29:32.752Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:33.275Z
31951
2017-08-04T17:29:33.968Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:34.614Z
30527
2017-08-04T17:29:35.392Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:36.156Z
29079
2017-08-04T17:29:36.840Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:37.082Z
24701
2017-08-04T17:29:41.218Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:41.666Z
23524
2017-08-04T17:29:42.395Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:46.065Z
19214
2017-08-04T17:29:46.705Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:47.058Z
15090
2017-08-04T17:29:50.829Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:50.829Z
13228
2017-08-04T17:29:52.691Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:53.288Z
10178
2017-08-04T17:29:55.741Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:55.741Z
9196
2017-08-04T17:29:56.723Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:56.723Z
8004
2017-08-04T17:29:57.915Z
2017-08-04T17:30:05.919Z
2017-08-04T17:29:58.172Z
6062
2017-08-04T17:29:59.857Z
2017-08-04T17:30:05.919Z
2017-08-04T17:30:00.715Z
694
2017-08-04T17:30:05.225Z
2017-08-04T17:30:05.919Z
2017-08-04T17:30:05.268Z
0
2017-08-04T17:30:05.919Z
2017-08-04T17:30:05.919Z
2017-08-04T17:30:05.961Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 98
5233042
2017-08-04T16:02:53.992Z
2017-08-04T17:30:07.034Z
2017-08-04T16:02:55.016Z
5158822
2017-08-04T16:04:08.212Z
2017-08-04T17:30:07.034Z
2017-08-04T16:04:09.113Z
5147098
2017-08-04T16:04:19.936Z
2017-08-04T17:30:07.034Z
2017-08-04T16:04:19.936Z
5125501
2017-08-04T16:04:41.533Z
2017-08-04T17:30:07.034Z
2017-08-04T16:04:41.533Z
5095797
2017-08-04T16:05:11.237Z
2017-08-04T17:30:07.034Z
2017-08-04T16:05:11.842Z
3531282
2017-08-04T16:31:15.752Z
2017-08-04T17:30:07.034Z
2017-08-04T16:31:16.861Z
3257475
2017-08-04T16:35:49.559Z
2017-08-04T17:30:07.034Z
2017-08-04T16:35:49.559Z
2898111
2017-08-04T16:41:48.923Z
2017-08-04T17:30:07.034Z
2017-08-04T16:41:48.923Z
2887626
2017-08-04T16:41:59.408Z
2017-08-04T17:30:07.034Z
2017-08-04T16:41:59.408Z
2870846
2017-08-04T16:42:16.188Z
2017-08-04T17:30:07.034Z
2017-08-04T16:42:16.657Z
2669264
2017-08-04T16:45:37.770Z
2017-08-04T17:30:07.034Z
2017-08-04T16:45:37.983Z
2665851
2017-08-04T16:45:41.183Z
2017-08-04T17:30:07.034Z
2017-08-04T16:45:41.268Z
2664187
2017-08-04T16:45:42.847Z
2017-08-04T17:30:07.034Z
2017-08-04T16:45:42.847Z
2662437
2017-08-04T16:45:44.597Z
2017-08-04T17:30:07.034Z
2017-08-04T16:45:44.597Z
2637865
2017-08-04T16:46:09.169Z
2017-08-04T17:30:07.034Z
2017-08-04T16:46:09.169Z
2568813
2017-08-04T16:47:18.221Z
2017-08-04T17:30:07.034Z
2017-08-04T16:47:19.117Z
2553042
2017-08-04T16:47:33.992Z
2017-08-04T17:30:07.034Z
2017-08-04T16:47:33.992Z
2552231
2017-08-04T16:47:34.803Z
2017-08-04T17:30:07.034Z
2017-08-04T16:47:35.368Z
2549063
2017-08-04T16:47:37.971Z
2017-08-04T17:30:07.034Z
2017-08-04T16:47:38.227Z
2539244
2017-08-04T16:47:47.790Z
2017-08-04T17:30:07.034Z
2017-08-04T16:47:49.155Z
2535020
2017-08-04T16:47:52.014Z
2017-08-04T17:30:07.034Z
2017-08-04T16:47:56.195Z
2529942
2017-08-04T16:47:57.092Z
2017-08-04T17:30:07.034Z
2017-08-04T16:47:57.219Z
2055424
2017-08-04T16:55:51.610Z
2017-08-04T17:30:07.034Z
2017-08-04T16:55:52.122Z
1904255
2017-08-04T16:58:22.779Z
2017-08-04T17:30:07.034Z
2017-08-04T16:58:22.779Z
1870629
2017-08-04T16:58:56.405Z
2017-08-04T17:30:07.034Z
2017-08-04T16:58:56.405Z
1073739
2017-08-04T17:12:13.295Z
2017-08-04T17:30:07.034Z
2017-08-04T17:12:13.295Z
865698
2017-08-04T17:15:41.336Z
2017-08-04T17:30:07.034Z
2017-08-04T17:15:41.336Z
693175
2017-08-04T17:18:33.859Z
2017-08-04T17:30:07.034Z
2017-08-04T17:18:33.859Z
586875
2017-08-04T17:20:20.159Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:20.202Z
585760
2017-08-04T17:20:21.274Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:21.578Z
583877
2017-08-04T17:20:23.157Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:23.200Z
583152
2017-08-04T17:20:23.882Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:25.930Z
579952
2017-08-04T17:20:27.082Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:29.472Z
576154
2017-08-04T17:20:30.880Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:34.170Z
571880
2017-08-04T17:20:35.154Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:35.154Z
568469
2017-08-04T17:20:38.565Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:38.651Z
564122
2017-08-04T17:20:42.912Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:43.040Z
560133
2017-08-04T17:20:46.901Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:47.072Z
558597
2017-08-04T17:20:48.437Z
2017-08-04T17:30:07.034Z
2017-08-04T17:20:48.522Z
546772
2017-08-04T17:21:00.262Z
2017-08-04T17:30:07.034Z
2017-08-04T17:21:00.646Z
538772
2017-08-04T17:21:08.262Z
2017-08-04T17:30:07.034Z
2017-08-04T17:21:08.304Z
152227
2017-08-04T17:27:34.807Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:34.807Z
147678
2017-08-04T17:27:39.356Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:39.356Z
145247
2017-08-04T17:27:41.787Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:42.043Z
140772
2017-08-04T17:27:46.262Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:46.306Z
139748
2017-08-04T17:27:47.286Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:47.675Z
136686
2017-08-04T17:27:50.348Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:50.348Z
134743
2017-08-04T17:27:52.291Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:52.333Z
132978
2017-08-04T17:27:54.056Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:55.438Z
130956
2017-08-04T17:27:56.078Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:56.120Z
130274
2017-08-04T17:27:56.760Z
2017-08-04T17:30:07.034Z
2017-08-04T17:27:56.760Z
129287
2017-08-04T17:27:57.747Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:00.004Z
124678
2017-08-04T17:28:02.356Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:02.569Z
122752
2017-08-04T17:28:04.282Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:05.801Z
120097
2017-08-04T17:28:06.937Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:07.150Z
115606
2017-08-04T17:28:11.428Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:11.474Z
113590
2017-08-04T17:28:13.444Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:13.444Z
106697
2017-08-04T17:28:20.337Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:20.337Z
105994
2017-08-04T17:28:21.040Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:21.040Z
93610
2017-08-04T17:28:33.424Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:33.424Z
90120
2017-08-04T17:28:36.914Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:36.958Z
87841
2017-08-04T17:28:39.193Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:39.193Z
82218
2017-08-04T17:28:44.816Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:44.855Z
71350
2017-08-04T17:28:55.684Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:55.727Z
68267
2017-08-04T17:28:58.767Z
2017-08-04T17:30:07.034Z
2017-08-04T17:28:58.810Z
66977
2017-08-04T17:29:00.057Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:00.357Z
65857
2017-08-04T17:29:01.177Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:01.177Z
63986
2017-08-04T17:29:03.048Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:03.142Z
63028
2017-08-04T17:29:04.006Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:04.006Z
62069
2017-08-04T17:29:04.965Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:04.965Z
60643
2017-08-04T17:29:06.391Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:07.295Z
59098
2017-08-04T17:29:07.936Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:08.064Z
54469
2017-08-04T17:29:12.565Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:13.430Z
51008
2017-08-04T17:29:16.026Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:16.668Z
49209
2017-08-04T17:29:17.825Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:17.867Z
48013
2017-08-04T17:29:19.021Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:19.021Z
47203
2017-08-04T17:29:19.831Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:21.357Z
44327
2017-08-04T17:29:22.707Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:22.707Z
43462
2017-08-04T17:29:23.572Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:24.016Z
41600
2017-08-04T17:29:25.434Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:25.478Z
39525
2017-08-04T17:29:27.509Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:27.509Z
37151
2017-08-04T17:29:29.883Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:29.883Z
34282
2017-08-04T17:29:32.752Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:33.275Z
33066
2017-08-04T17:29:33.968Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:34.614Z
31642
2017-08-04T17:29:35.392Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:36.156Z
30194
2017-08-04T17:29:36.840Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:37.082Z
25816
2017-08-04T17:29:41.218Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:41.666Z
24639
2017-08-04T17:29:42.395Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:46.065Z
20329
2017-08-04T17:29:46.705Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:47.058Z
16205
2017-08-04T17:29:50.829Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:50.829Z
14343
2017-08-04T17:29:52.691Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:53.288Z
11293
2017-08-04T17:29:55.741Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:55.741Z
10311
2017-08-04T17:29:56.723Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:56.723Z
9119
2017-08-04T17:29:57.915Z
2017-08-04T17:30:07.034Z
2017-08-04T17:29:58.172Z
7177
2017-08-04T17:29:59.857Z
2017-08-04T17:30:07.034Z
2017-08-04T17:30:00.715Z
1809
2017-08-04T17:30:05.225Z
2017-08-04T17:30:07.034Z
2017-08-04T17:30:05.268Z
1115
2017-08-04T17:30:05.919Z
2017-08-04T17:30:07.034Z
2017-08-04T17:30:05.961Z
0
2017-08-04T17:30:07.034Z
2017-08-04T17:30:07.034Z
2017-08-04T17:30:07.381Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: utterances found: 99
5235102
2017-08-04T16:02:53.992Z
2017-08-04T17:30:09.094Z
2017-08-04T16:02:55.016Z
5160882
2017-08-04T16:04:08.212Z
2017-08-04T17:30:09.094Z
2017-08-04T16:04:09.113Z
5149158
2017-08-04T16:04:19.936Z
2017-08-04T17:30:09.094Z
2017-08-04T16:04:19.936Z
5127561
2017-08-04T16:04:41.533Z
2017-08-04T17:30:09.094Z
2017-08-04T16:04:41.533Z
5097857
2017-08-04T16:05:11.237Z
2017-08-04T17:30:09.094Z
2017-08-04T16:05:11.842Z
3533342
2017-08-04T16:31:15.752Z
2017-08-04T17:30:09.094Z
2017-08-04T16:31:16.861Z
3259535
2017-08-04T16:35:49.559Z
2017-08-04T17:30:09.094Z
2017-08-04T16:35:49.559Z
2900171
2017-08-04T16:41:48.923Z
2017-08-04T17:30:09.094Z
2017-08-04T16:41:48.923Z
2889686
2017-08-04T16:41:59.408Z
2017-08-04T17:30:09.094Z
2017-08-04T16:41:59.408Z
2872906
2017-08-04T16:42:16.188Z
2017-08-04T17:30:09.094Z
2017-08-04T16:42:16.657Z
2671324
2017-08-04T16:45:37.770Z
2017-08-04T17:30:09.094Z
2017-08-04T16:45:37.983Z
2667911
2017-08-04T16:45:41.183Z
2017-08-04T17:30:09.094Z
2017-08-04T16:45:41.268Z
2666247
2017-08-04T16:45:42.847Z
2017-08-04T17:30:09.094Z
2017-08-04T16:45:42.847Z
2664497
2017-08-04T16:45:44.597Z
2017-08-04T17:30:09.094Z
2017-08-04T16:45:44.597Z
2639925
2017-08-04T16:46:09.169Z
2017-08-04T17:30:09.094Z
2017-08-04T16:46:09.169Z
2570873
2017-08-04T16:47:18.221Z
2017-08-04T17:30:09.094Z
2017-08-04T16:47:19.117Z
2555102
2017-08-04T16:47:33.992Z
2017-08-04T17:30:09.094Z
2017-08-04T16:47:33.992Z
2554291
2017-08-04T16:47:34.803Z
2017-08-04T17:30:09.094Z
2017-08-04T16:47:35.368Z
2551123
2017-08-04T16:47:37.971Z
2017-08-04T17:30:09.094Z
2017-08-04T16:47:38.227Z
2541304
2017-08-04T16:47:47.790Z
2017-08-04T17:30:09.094Z
2017-08-04T16:47:49.155Z
2537080
2017-08-04T16:47:52.014Z
2017-08-04T17:30:09.094Z
2017-08-04T16:47:56.195Z
2532002
2017-08-04T16:47:57.092Z
2017-08-04T17:30:09.094Z
2017-08-04T16:47:57.219Z
2057484
2017-08-04T16:55:51.610Z
2017-08-04T17:30:09.094Z
2017-08-04T16:55:52.122Z
1906315
2017-08-04T16:58:22.779Z
2017-08-04T17:30:09.094Z
2017-08-04T16:58:22.779Z
1872689
2017-08-04T16:58:56.405Z
2017-08-04T17:30:09.094Z
2017-08-04T16:58:56.405Z
1075799
2017-08-04T17:12:13.295Z
2017-08-04T17:30:09.094Z
2017-08-04T17:12:13.295Z
867758
2017-08-04T17:15:41.336Z
2017-08-04T17:30:09.094Z
2017-08-04T17:15:41.336Z
695235
2017-08-04T17:18:33.859Z
2017-08-04T17:30:09.094Z
2017-08-04T17:18:33.859Z
588935
2017-08-04T17:20:20.159Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:20.202Z
587820
2017-08-04T17:20:21.274Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:21.578Z
585937
2017-08-04T17:20:23.157Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:23.200Z
585212
2017-08-04T17:20:23.882Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:25.930Z
582012
2017-08-04T17:20:27.082Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:29.472Z
578214
2017-08-04T17:20:30.880Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:34.170Z
573940
2017-08-04T17:20:35.154Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:35.154Z
570529
2017-08-04T17:20:38.565Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:38.651Z
566182
2017-08-04T17:20:42.912Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:43.040Z
562193
2017-08-04T17:20:46.901Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:47.072Z
560657
2017-08-04T17:20:48.437Z
2017-08-04T17:30:09.094Z
2017-08-04T17:20:48.522Z
548832
2017-08-04T17:21:00.262Z
2017-08-04T17:30:09.094Z
2017-08-04T17:21:00.646Z
540832
2017-08-04T17:21:08.262Z
2017-08-04T17:30:09.094Z
2017-08-04T17:21:08.304Z
154287
2017-08-04T17:27:34.807Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:34.807Z
149738
2017-08-04T17:27:39.356Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:39.356Z
147307
2017-08-04T17:27:41.787Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:42.043Z
142832
2017-08-04T17:27:46.262Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:46.306Z
141808
2017-08-04T17:27:47.286Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:47.675Z
138746
2017-08-04T17:27:50.348Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:50.348Z
136803
2017-08-04T17:27:52.291Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:52.333Z
135038
2017-08-04T17:27:54.056Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:55.438Z
133016
2017-08-04T17:27:56.078Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:56.120Z
132334
2017-08-04T17:27:56.760Z
2017-08-04T17:30:09.094Z
2017-08-04T17:27:56.760Z
131347
2017-08-04T17:27:57.747Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:00.004Z
126738
2017-08-04T17:28:02.356Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:02.569Z
124812
2017-08-04T17:28:04.282Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:05.801Z
122157
2017-08-04T17:28:06.937Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:07.150Z
117666
2017-08-04T17:28:11.428Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:11.474Z
115650
2017-08-04T17:28:13.444Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:13.444Z
108757
2017-08-04T17:28:20.337Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:20.337Z
108054
2017-08-04T17:28:21.040Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:21.040Z
95670
2017-08-04T17:28:33.424Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:33.424Z
92180
2017-08-04T17:28:36.914Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:36.958Z
89901
2017-08-04T17:28:39.193Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:39.193Z
84278
2017-08-04T17:28:44.816Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:44.855Z
73410
2017-08-04T17:28:55.684Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:55.727Z
70327
2017-08-04T17:28:58.767Z
2017-08-04T17:30:09.094Z
2017-08-04T17:28:58.810Z
69037
2017-08-04T17:29:00.057Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:00.357Z
67917
2017-08-04T17:29:01.177Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:01.177Z
66046
2017-08-04T17:29:03.048Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:03.142Z
65088
2017-08-04T17:29:04.006Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:04.006Z
64129
2017-08-04T17:29:04.965Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:04.965Z
62703
2017-08-04T17:29:06.391Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:07.295Z
61158
2017-08-04T17:29:07.936Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:08.064Z
56529
2017-08-04T17:29:12.565Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:13.430Z
53068
2017-08-04T17:29:16.026Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:16.668Z
51269
2017-08-04T17:29:17.825Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:17.867Z
50073
2017-08-04T17:29:19.021Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:19.021Z
49263
2017-08-04T17:29:19.831Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:21.357Z
46387
2017-08-04T17:29:22.707Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:22.707Z
45522
2017-08-04T17:29:23.572Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:24.016Z
43660
2017-08-04T17:29:25.434Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:25.478Z
41585
2017-08-04T17:29:27.509Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:27.509Z
39211
2017-08-04T17:29:29.883Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:29.883Z
36342
2017-08-04T17:29:32.752Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:33.275Z
35126
2017-08-04T17:29:33.968Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:34.614Z
33702
2017-08-04T17:29:35.392Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:36.156Z
32254
2017-08-04T17:29:36.840Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:37.082Z
27876
2017-08-04T17:29:41.218Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:41.666Z
26699
2017-08-04T17:29:42.395Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:46.065Z
22389
2017-08-04T17:29:46.705Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:47.058Z
18265
2017-08-04T17:29:50.829Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:50.829Z
16403
2017-08-04T17:29:52.691Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:53.288Z
13353
2017-08-04T17:29:55.741Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:55.741Z
12371
2017-08-04T17:29:56.723Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:56.723Z
11179
2017-08-04T17:29:57.915Z
2017-08-04T17:30:09.094Z
2017-08-04T17:29:58.172Z
9237
2017-08-04T17:29:59.857Z
2017-08-04T17:30:09.094Z
2017-08-04T17:30:00.715Z
3869
2017-08-04T17:30:05.225Z
2017-08-04T17:30:09.094Z
2017-08-04T17:30:05.268Z
3175
2017-08-04T17:30:05.919Z
2017-08-04T17:30:09.094Z
2017-08-04T17:30:05.961Z
2060
2017-08-04T17:30:07.034Z
2017-08-04T17:30:09.094Z
2017-08-04T17:30:07.381Z
0
2017-08-04T17:30:09.094Z
2017-08-04T17:30:09.094Z
2017-08-04T17:30:09.914Z
info: Tried to insert repeat talking history data! Nuh-Uh
info: getting turn data for hangout no 2017-08-04T17:25:20.085Z 2017-08-04T17:30:20.085Z
info: updated turns for meeting: no
info: auth filter, data: { turns: 
   [ { _id: 5984af2c3fdd10ba54f6fa5f,
       participant: 'dog',
       turns: 0.3235294117647059 },
     { _id: 5984af2c3fdd10ba54f6fa5e,
       participant: 'jordan',
       turns: 0.4264705882352941 },
     { _id: 5984af2c3fdd10ba54f6fa5d,
       participant: 'meep',
       turns: 0.15441176470588236 },
     { _id: 5984af2c3fdd10ba54f6fa5c,
       participant: 'mep',
       turns: 0.09558823529411764 } ],
  meeting: 'no',
  transitions: 114,
  timestamp: 2017-08-04T17:30:20.092Z,
  from: 2017-08-04T17:25:20.085Z,
  to: 2017-08-04T17:30:20.085Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-04T17:25:25.089Z 2017-08-04T17:30:25.089Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:25:30.092Z 2017-08-04T17:30:30.092Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:25:35.098Z 2017-08-04T17:30:35.098Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:25:40.101Z 2017-08-04T17:30:40.101Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan, meep, mep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 31816 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:25:45.103Z 2017-08-04T17:30:45.103Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:25:50.107Z 2017-08-04T17:30:50.107Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:25:55.111Z 2017-08-04T17:30:55.111Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:00.113Z 2017-08-04T17:31:00.113Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:05.114Z 2017-08-04T17:31:05.114Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:10.120Z 2017-08-04T17:31:10.120Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:15.124Z 2017-08-04T17:31:15.124Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:20.128Z 2017-08-04T17:31:20.128Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:25.132Z 2017-08-04T17:31:25.132Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:30.139Z 2017-08-04T17:31:30.139Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:35.142Z 2017-08-04T17:31:35.142Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:40.147Z 2017-08-04T17:31:40.147Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan, meep, mep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 91816 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:26:45.148Z 2017-08-04T17:31:45.148Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:50.150Z 2017-08-04T17:31:50.150Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:26:55.151Z 2017-08-04T17:31:55.151Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:00.158Z 2017-08-04T17:32:00.158Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:05.161Z 2017-08-04T17:32:05.161Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:10.164Z 2017-08-04T17:32:10.164Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:15.170Z 2017-08-04T17:32:15.170Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:20.174Z 2017-08-04T17:32:20.174Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:25.179Z 2017-08-04T17:32:25.179Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:30.183Z 2017-08-04T17:32:30.183Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:35.190Z 2017-08-04T17:32:35.190Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:40.192Z 2017-08-04T17:32:40.192Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan, meep, mep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 151824 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:27:45.193Z 2017-08-04T17:32:45.193Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:50.199Z 2017-08-04T17:32:50.199Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:27:55.203Z 2017-08-04T17:32:55.203Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:00.209Z 2017-08-04T17:33:00.209Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:05.211Z 2017-08-04T17:33:05.211Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:10.216Z 2017-08-04T17:33:10.216Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:15.220Z 2017-08-04T17:33:15.220Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:20.222Z 2017-08-04T17:33:20.222Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:25.226Z 2017-08-04T17:33:25.226Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:30.230Z 2017-08-04T17:33:30.230Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:35.235Z 2017-08-04T17:33:35.235Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:40.242Z 2017-08-04T17:33:40.242Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan, meep, mep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 211825 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:28:45.248Z 2017-08-04T17:33:45.248Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:50.254Z 2017-08-04T17:33:50.254Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:28:55.260Z 2017-08-04T17:33:55.260Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:00.262Z 2017-08-04T17:34:00.262Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:05.266Z 2017-08-04T17:34:05.266Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:10.268Z 2017-08-04T17:34:10.268Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:15.270Z 2017-08-04T17:34:15.270Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:20.275Z 2017-08-04T17:34:20.275Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:25.279Z 2017-08-04T17:34:25.279Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:30.285Z 2017-08-04T17:34:30.285Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:35.290Z 2017-08-04T17:34:35.290Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:40.296Z 2017-08-04T17:34:40.296Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan, meep, mep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 271828 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout no 2017-08-04T17:29:45.303Z 2017-08-04T17:34:45.303Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:50.306Z 2017-08-04T17:34:50.306Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:29:55.309Z 2017-08-04T17:34:55.309Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:30:00.314Z 2017-08-04T17:35:00.314Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:30:05.319Z 2017-08-04T17:35:05.319Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:30:10.323Z 2017-08-04T17:35:10.323Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:30:15.324Z 2017-08-04T17:35:15.324Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:30:20.329Z 2017-08-04T17:35:20.329Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:30:25.335Z 2017-08-04T17:35:25.335Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:30:30.338Z 2017-08-04T17:35:30.338Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:30:35.339Z 2017-08-04T17:35:35.339Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-04T17:30:40.341Z 2017-08-04T17:35:40.341Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan, meep, mep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 331828 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan, meep, mep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-04T17:35:41.744Z,
  endTime: 2017-08-04T17:35:41.747Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[dog, jordan, meep, mep], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Fri Aug 04 2017 13:35:41 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-07T18:59:43.791Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMjM4MywiZXhwIjoxNTg4NTMyMzgzLCJpc3MiOiJmZWF0aGVycyJ9.h1TTKNwuo7rLdXcx5qVJQUP-r6pX4G5X02AVbAZhSBI
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-07T18:59:43.791Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMjM4MywiZXhwIjoxNTg4NTMyMzgzLCJpc3MiOiJmZWF0aGVycyJ9.h1TTKNwuo7rLdXcx5qVJQUP-r6pX4G5X02AVbAZhSBI' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-04T17:35:41.747Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-07T18:59:43.865Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:54:43.887Z 2017-08-07T18:59:43.887Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5988b89f3fdd10ba54f6fb3b,
  timestamp: 2017-08-07T18:59:43.888Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T18:59:43.911Z,
  from: 2017-08-07T18:54:43.887Z,
  to: 2017-08-07T18:59:43.887Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T18:54:48.892Z 2017-08-07T18:59:48.892Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T18:59:48.894Z,
  from: 2017-08-07T18:54:48.892Z,
  to: 2017-08-07T18:59:48.892Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 264581521 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-07T18:59:51.443Z,
  endTime: 2017-08-07T18:59:51.461Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: meeting joined event: participant=boy, name=boy, participants=[participant=jordan, participant=boy], meeting=no, meetingUrl=http://localhost:3001/?user=boy&room=no, consent=true, consentDate=2017-08-07T18:59:51.459Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMjM5MSwiZXhwIjoxNTg4NTMyMzkxLCJpc3MiOiJmZWF0aGVycyJ9.Di3RcvyKgBOfQDJQx3cpP4wvDloPR0EkBn2wEs-yWVI
info: stopping computing turns for meeting: no
info: creating a new participant... NotFound: No record found for id 'boy'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Mon Aug 07 2017 14:59:51 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-07T18:59:51.461Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-07T18:59:51.461Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info (maybe) ended meetings: [ true ]
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Mon Aug 07 2017 14:59:51 GMT-0400 (EDT), updatedAt=Mon Aug 07 2017 14:59:51 GMT-0400 (EDT), consentDate=Mon Aug 07 2017 14:59:51 GMT-0400 (EDT), consent=true, name=boy, _id=boy, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'boy',
     name: 'boy',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=boy&room=no',
     consent: true,
     consentDate: '2017-08-07T18:59:51.459Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMjM5MSwiZXhwIjoxNTg4NTMyMzkxLCJpc3MiOiJmZWF0aGVycyJ9.Di3RcvyKgBOfQDJQx3cpP4wvDloPR0EkBn2wEs-yWVI' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'boy' ]
info: created participantEvent!
info: auth filter, data: { participants: [],
  _id: 5988b8a73fdd10ba54f6fb3d,
  timestamp: 2017-08-07T18:59:51.510Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [],
  _id: 5988b8a73fdd10ba54f6fb3d,
  timestamp: 2017-08-07T18:59:51.510Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-07T18:59:51.461Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'boy' ]
info: not adding participant: { participants: [ 'jordan', 'boy' ],
  lastUpdated: 2017-08-07T18:59:51.760Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:54:51.775Z 2017-08-07T18:59:51.775Z
updated meeting with participants { participants: [ 'jordan', 'boy' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'boy' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'boy' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: Creating report visualization...
info: Sending report...
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'boy' ],
  _id: 5988b8a73fdd10ba54f6fb3f,
  timestamp: 2017-08-07T18:59:51.775Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'boy' ],
  _id: 5988b8a73fdd10ba54f6fb3f,
  timestamp: 2017-08-07T18:59:51.775Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T18:59:52.475Z,
  from: 2017-08-07T18:54:51.775Z,
  to: 2017-08-07T18:59:51.775Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T18:59:52.475Z,
  from: 2017-08-07T18:54:51.775Z,
  to: 2017-08-07T18:59:51.775Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: getting turn data for hangout no 2017-08-07T18:54:56.779Z 2017-08-07T18:59:56.779Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:01.781Z 2017-08-07T19:00:01.781Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:06.783Z 2017-08-07T19:00:06.783Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:11.785Z 2017-08-07T19:00:11.785Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:16.790Z 2017-08-07T19:00:16.790Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:21.793Z 2017-08-07T19:00:21.793Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:26.798Z 2017-08-07T19:00:26.798Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:31.802Z 2017-08-07T19:00:31.802Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:36.809Z 2017-08-07T19:00:36.809Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:41.815Z 2017-08-07T19:00:41.815Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T18:55:46.821Z 2017-08-07T19:00:46.821Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, boy], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 264641297 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, boy], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-07T19:00:51.212Z,
  endTime: 2017-08-07T19:00:51.214Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, boy], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Mon Aug 07 2017 15:00:51 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-07T19:21:13.135Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMzY3MywiZXhwIjoxNTg4NTMzNjczLCJpc3MiOiJmZWF0aGVycyJ9.uurMK3pYoyNarIMpxKAGy9_R-fAkGvMNVy3C_gvyKZ8
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-07T19:21:13.135Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMzY3MywiZXhwIjoxNTg4NTMzNjczLCJpc3MiOiJmZWF0aGVycyJ9.uurMK3pYoyNarIMpxKAGy9_R-fAkGvMNVy3C_gvyKZ8' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-07T19:00:51.214Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-07T19:21:13.216Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:16:13.224Z 2017-08-07T19:21:13.224Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5988bda93fdd10ba54f6fb43,
  timestamp: 2017-08-07T19:21:13.224Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:21:13.228Z,
  from: 2017-08-07T19:16:13.224Z,
  to: 2017-08-07T19:21:13.224Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: getting turn data for hangout no 2017-08-07T19:16:18.234Z 2017-08-07T19:21:18.234Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:21:18.239Z,
  from: 2017-08-07T19:16:18.234Z,
  to: 2017-08-07T19:21:18.234Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:21:18.239Z,
  from: 2017-08-07T19:16:18.234Z,
  to: 2017-08-07T19:21:18.234Z,
  _id: 'no' } undefined
info: User not authenticated. undefined
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan, participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-07T19:21:18.597Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMzY3OCwiZXhwIjoxNTg4NTMzNjc4LCJpc3MiOiJmZWF0aGVycyJ9.5PP15mt1Lln-wzV0xHAWOWswtloJQMdSOTPx9ywGNIM
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-07T19:21:18.597Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMzY3OCwiZXhwIjoxNTg4NTMzNjc4LCJpc3MiOiJmZWF0aGVycyJ9.5PP15mt1Lln-wzV0xHAWOWswtloJQMdSOTPx9ywGNIM' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'jordan' ]
patching meeting { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-07T19:21:18.617Z } no
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5988bdae3fdd10ba54f6fb44,
  timestamp: 2017-08-07T19:21:18.626Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5988bdae3fdd10ba54f6fb44,
  timestamp: 2017-08-07T19:21:18.626Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=not, meetingUrl=http://localhost:3001/?user=jordan&room=not, consent=true, consentDate=2017-08-07T19:21:19.856Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMzY3OSwiZXhwIjoxNTg4NTMzNjc5LCJpc3MiOiJmZWF0aGVycyJ9.ewJObNbGiF9Ov7JSgmITTwuvA6x4sE2RhfDFPqICVh0
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'not',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=not',
     consent: true,
     consentDate: '2017-08-07T19:21:19.856Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMzY3OSwiZXhwIjoxNTg4NTMzNjc5LCJpc3MiOiJmZWF0aGVycyJ9.ewJObNbGiF9Ov7JSgmITTwuvA6x4sE2RhfDFPqICVh0' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
info: no meeting found { participant: 'jordan',
  name: 'jordan',
  participants: [ { participant: 'jordan' } ],
  meeting: 'not',
  meetingUrl: 'http://localhost:3001/?user=jordan&room=not',
  consent: true,
  consentDate: '2017-08-07T19:21:19.856Z',
  token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzMzY3OSwiZXhwIjoxNTg4NTMzNjc5LCJpc3MiOiJmZWF0aGVycyJ9.ewJObNbGiF9Ov7JSgmITTwuvA6x4sE2RhfDFPqICVh0' } NotFound: No record found for id 'not'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: starting computing turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:16:19.879Z 2017-08-07T19:21:19.879Z
new meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-07T19:21:19.877Z,
  meta: {},
  meetingUrl: 'http://localhost:3001/?user=jordan&room=not',
  active: true,
  _id: 'not',
  __v: 0 }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-07T19:21:19.877Z,
  meta: {},
  meetingUrl: 'http://localhost:3001/?user=jordan&room=not',
  active: true,
  _id: 'not',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-07T19:21:19.877Z,
  meta: {},
  meetingUrl: 'http://localhost:3001/?user=jordan&room=not',
  active: true,
  _id: 'not',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5988bdaf3fdd10ba54f6fb46,
  timestamp: 2017-08-07T19:21:19.879Z,
  meeting: 'not',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5988bdaf3fdd10ba54f6fb46,
  timestamp: 2017-08-07T19:21:19.879Z,
  meeting: 'not',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created turns for meeting: not
info: auth filter, data: { turns: [],
  to: 2017-08-07T19:21:19.879Z,
  from: 2017-08-07T19:16:19.879Z,
  timestamp: 2017-08-07T19:21:19.883Z,
  transitions: 0,
  meeting: 'not',
  _id: 'not',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  to: 2017-08-07T19:21:19.879Z,
  from: 2017-08-07T19:16:19.879Z,
  timestamp: 2017-08-07T19:21:19.883Z,
  transitions: 0,
  meeting: 'not',
  _id: 'not',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:16:23.239Z 2017-08-07T19:21:23.239Z
info: updated turns for meeting: no
info: getting turn data for hangout not 2017-08-07T19:16:24.883Z 2017-08-07T19:21:24.883Z
info: updated turns for meeting: not
info: getting turn data for hangout no 2017-08-07T19:16:28.245Z 2017-08-07T19:21:28.245Z
info: updated turns for meeting: no
info: getting turn data for hangout not 2017-08-07T19:16:29.888Z 2017-08-07T19:21:29.888Z
info: updated turns for meeting: not
info: getting turn data for hangout no 2017-08-07T19:16:33.247Z 2017-08-07T19:21:33.247Z
info: updated turns for meeting: no
info: getting turn data for hangout not 2017-08-07T19:16:34.893Z 2017-08-07T19:21:34.893Z
info: updated turns for meeting: not
info: getting turn data for hangout no 2017-08-07T19:16:38.248Z 2017-08-07T19:21:38.248Z
info: updated turns for meeting: no
info: getting turn data for hangout not 2017-08-07T19:16:39.895Z 2017-08-07T19:21:39.895Z
info: updated turns for meeting: not
info: getting turn data for hangout no 2017-08-07T19:16:43.249Z 2017-08-07T19:21:43.249Z
info: updated turns for meeting: no
info: getting turn data for hangout not 2017-08-07T19:16:44.899Z 2017-08-07T19:21:44.899Z
info: updated turns for meeting: not
info: getting turn data for hangout no 2017-08-07T19:16:48.254Z 2017-08-07T19:21:48.254Z
info: updated turns for meeting: no
info: getting turn data for hangout not 2017-08-07T19:16:49.905Z 2017-08-07T19:21:49.905Z
info: updated turns for meeting: not
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Mon Aug 07 2017 15:21:19 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=not, active=true, _id=not, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 265901388 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 31426 300000
info: should end?: false
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-07T19:21:51.302Z,
  endTime: 2017-08-07T19:21:51.305Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Mon Aug 07 2017 15:21:51 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info (maybe) ended meetings: [ true, false ]
info: created participantEvent!
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: getting turn data for hangout not 2017-08-07T19:16:54.910Z 2017-08-07T19:21:54.910Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:16:59.917Z 2017-08-07T19:21:59.917Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:04.919Z 2017-08-07T19:22:04.919Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:09.924Z 2017-08-07T19:22:09.924Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:14.930Z 2017-08-07T19:22:14.930Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:19.937Z 2017-08-07T19:22:19.937Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:24.942Z 2017-08-07T19:22:24.942Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:29.943Z 2017-08-07T19:22:29.943Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:34.947Z 2017-08-07T19:22:34.947Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:39.951Z 2017-08-07T19:22:39.951Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:44.958Z 2017-08-07T19:22:44.958Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:49.963Z 2017-08-07T19:22:49.963Z
info: updated turns for meeting: not
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Mon Aug 07 2017 15:21:19 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=not, active=true, _id=not, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 91429 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout not 2017-08-07T19:17:54.966Z 2017-08-07T19:22:54.966Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:17:59.969Z 2017-08-07T19:22:59.969Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:04.970Z 2017-08-07T19:23:04.970Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:09.971Z 2017-08-07T19:23:09.971Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:14.976Z 2017-08-07T19:23:14.976Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:19.977Z 2017-08-07T19:23:19.977Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:24.978Z 2017-08-07T19:23:24.978Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:29.984Z 2017-08-07T19:23:29.984Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:34.987Z 2017-08-07T19:23:34.987Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:39.988Z 2017-08-07T19:23:39.988Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:44.991Z 2017-08-07T19:23:44.991Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:18:49.995Z 2017-08-07T19:23:49.995Z
info: updated turns for meeting: not
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Mon Aug 07 2017 15:21:19 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=not, active=true, _id=not, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 151435 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout not 2017-08-07T19:18:54.997Z 2017-08-07T19:23:54.997Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:00.002Z 2017-08-07T19:24:00.002Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:05.005Z 2017-08-07T19:24:05.005Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:10.006Z 2017-08-07T19:24:10.006Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:15.012Z 2017-08-07T19:24:15.012Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:20.012Z 2017-08-07T19:24:20.012Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:25.017Z 2017-08-07T19:24:25.017Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:30.021Z 2017-08-07T19:24:30.021Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:35.024Z 2017-08-07T19:24:35.024Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:40.027Z 2017-08-07T19:24:40.027Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:45.027Z 2017-08-07T19:24:45.027Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:19:50.027Z 2017-08-07T19:24:50.027Z
info: updated turns for meeting: not
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Mon Aug 07 2017 15:21:19 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=not, active=true, _id=not, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 211443 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout not 2017-08-07T19:19:55.028Z 2017-08-07T19:24:55.028Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:00.033Z 2017-08-07T19:25:00.033Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:05.035Z 2017-08-07T19:25:05.035Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:10.035Z 2017-08-07T19:25:10.035Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:15.038Z 2017-08-07T19:25:15.038Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:20.039Z 2017-08-07T19:25:20.039Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:25.041Z 2017-08-07T19:25:25.041Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:30.043Z 2017-08-07T19:25:30.043Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:35.049Z 2017-08-07T19:25:35.049Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:40.052Z 2017-08-07T19:25:40.052Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:45.053Z 2017-08-07T19:25:45.053Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:20:50.054Z 2017-08-07T19:25:50.054Z
info: updated turns for meeting: not
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Mon Aug 07 2017 15:21:19 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=not, active=true, _id=not, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 271445 300000
info: should end?: false
info (maybe) ended meetings: [ false ]
info: getting turn data for hangout not 2017-08-07T19:20:55.059Z 2017-08-07T19:25:55.059Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:00.062Z 2017-08-07T19:26:00.062Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:05.062Z 2017-08-07T19:26:05.062Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:10.068Z 2017-08-07T19:26:10.068Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:15.070Z 2017-08-07T19:26:15.070Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:20.073Z 2017-08-07T19:26:20.073Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:25.077Z 2017-08-07T19:26:25.077Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:30.079Z 2017-08-07T19:26:30.079Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:35.080Z 2017-08-07T19:26:35.080Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:40.084Z 2017-08-07T19:26:40.084Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:45.087Z 2017-08-07T19:26:45.087Z
info: updated turns for meeting: not
info: getting turn data for hangout not 2017-08-07T19:21:50.090Z 2017-08-07T19:26:50.090Z
info: updated turns for meeting: not
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Mon Aug 07 2017 15:21:19 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=not, active=true, _id=not, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 331450 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Mon Aug 07 2017 15:21:19 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=not, active=true, _id=not, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-07T19:26:51.329Z,
  endTime: 2017-08-07T19:26:51.334Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Mon Aug 07 2017 15:21:19 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=not, active=true, _id=not, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: not
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Mon Aug 07 2017 15:21:19 GMT-0400 (EDT), endTime=Mon Aug 07 2017 15:26:51 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=not, active=false, _id=not, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-07T19:33:47.500Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQyNywiZXhwIjoxNTg4NTM0NDI3LCJpc3MiOiJmZWF0aGVycyJ9.aBLLg6CDigxliSI4I1Xc8L_c34b2g4T-Dkjz0J9txHo
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-07T19:33:47.500Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQyNywiZXhwIjoxNTg4NTM0NDI3LCJpc3MiOiJmZWF0aGVycyJ9.aBLLg6CDigxliSI4I1Xc8L_c34b2g4T-Dkjz0J9txHo' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-07T19:21:51.305Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-07T19:33:47.511Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:28:47.518Z 2017-08-07T19:33:47.518Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5988c09b3fdd10ba54f6fb4c,
  timestamp: 2017-08-07T19:33:47.518Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:33:47.526Z,
  from: 2017-08-07T19:28:47.518Z,
  to: 2017-08-07T19:33:47.518Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 266621433 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-07T19:33:51.348Z,
  endTime: 2017-08-07T19:33:51.360Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Mon Aug 07 2017 15:33:51 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: auth filter, data: { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-07T19:33:51.360Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: auth filter, data: { participants: [],
  _id: 5988c09f3fdd10ba54f6fb4e,
  timestamp: 2017-08-07T19:33:51.371Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=as, name=as, participants=[participant=jordan, participant=as], meeting=no, meetingUrl=http://localhost:3001/?user=as&room=no, consent=true, consentDate=2017-08-07T19:33:55.224Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQzNSwiZXhwIjoxNTg4NTM0NDM1LCJpc3MiOiJmZWF0aGVycyJ9.MyOQ-ur-j8IinSui-Vr_CGviZFHafB9yPMuFVh0gBa4
info: creating a new participant... NotFound: No record found for id 'as'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Mon Aug 07 2017 15:33:55 GMT-0400 (EDT), updatedAt=Mon Aug 07 2017 15:33:55 GMT-0400 (EDT), consentDate=Mon Aug 07 2017 15:33:55 GMT-0400 (EDT), consent=true, name=as, _id=as, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'as',
     name: 'as',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=as&room=no',
     consent: true,
     consentDate: '2017-08-07T19:33:55.224Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQzNSwiZXhwIjoxNTg4NTM0NDM1LCJpc3MiOiJmZWF0aGVycyJ9.MyOQ-ur-j8IinSui-Vr_CGviZFHafB9yPMuFVh0gBa4' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'as' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-07T19:33:51.360Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'as' ]
info: not adding participant: { participants: [ 'jordan', 'as' ],
  lastUpdated: 2017-08-07T19:33:55.376Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:28:55.393Z 2017-08-07T19:33:55.393Z
updated meeting with participants { participants: [ 'jordan', 'as' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'as' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'as' ],
  _id: 5988c0a33fdd10ba54f6fb50,
  timestamp: 2017-08-07T19:33:55.394Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as' ],
  _id: 5988c0a33fdd10ba54f6fb50,
  timestamp: 2017-08-07T19:33:55.394Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:33:55.401Z,
  from: 2017-08-07T19:28:55.393Z,
  to: 2017-08-07T19:33:55.393Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:33:55.401Z,
  from: 2017-08-07T19:28:55.393Z,
  to: 2017-08-07T19:33:55.393Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:00.398Z 2017-08-07T19:34:00.398Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:00.401Z,
  from: 2017-08-07T19:29:00.398Z,
  to: 2017-08-07T19:34:00.398Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=as, name=as, participants=[participant=jordan, participant=as], meeting=no, meetingUrl=http://localhost:3001/?user=as&room=no, consent=true, consentDate=2017-08-07T19:34:01.867Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQ0MSwiZXhwIjoxNTg4NTM0NDQxLCJpc3MiOiJmZWF0aGVycyJ9.5L0tRV-tJuUm8TkpdgEAxg0Rk67w6zOy0rwoK9N2iuM
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'as',
     name: 'as',
     participants: [ [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=as&room=no',
     consent: true,
     consentDate: '2017-08-07T19:34:01.867Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQ0MSwiZXhwIjoxNTg4NTM0NDQxLCJpc3MiOiJmZWF0aGVycyJ9.5L0tRV-tJuUm8TkpdgEAxg0Rk67w6zOy0rwoK9N2iuM' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'as' ]
patching meeting { participants: [ 'jordan', 'as' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'as' ]
info: not adding participant: { participants: [ 'jordan', 'as' ],
  lastUpdated: 2017-08-07T19:34:01.907Z } no
updated meeting with participants { participants: [ 'jordan', 'as' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'as' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'as' ],
  _id: 5988c0a93fdd10ba54f6fb51,
  timestamp: 2017-08-07T19:34:01.933Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as' ],
  _id: 5988c0a93fdd10ba54f6fb51,
  timestamp: 2017-08-07T19:34:01.933Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:05.403Z 2017-08-07T19:34:05.403Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:05.406Z,
  from: 2017-08-07T19:29:05.403Z,
  to: 2017-08-07T19:34:05.403Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:05.406Z,
  from: 2017-08-07T19:29:05.403Z,
  to: 2017-08-07T19:34:05.403Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:10.410Z 2017-08-07T19:34:10.410Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:10.412Z,
  from: 2017-08-07T19:29:10.410Z,
  to: 2017-08-07T19:34:10.410Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:10.412Z,
  from: 2017-08-07T19:29:10.410Z,
  to: 2017-08-07T19:34:10.410Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=asd, name=asd, participants=[participant=jordan, participant=as, participant=asd], meeting=no, meetingUrl=http://localhost:3001/?user=asd&room=no, consent=true, consentDate=2017-08-07T19:34:13.282Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQ1MywiZXhwIjoxNTg4NTM0NDUzLCJpc3MiOiJmZWF0aGVycyJ9.EqwE12UsCCnmTliDYfVDJOuEH8LR98b95fPlwELcBlE
info: creating a new participant... NotFound: No record found for id 'asd'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Mon Aug 07 2017 15:34:13 GMT-0400 (EDT), updatedAt=Mon Aug 07 2017 15:34:13 GMT-0400 (EDT), consentDate=Mon Aug 07 2017 15:34:13 GMT-0400 (EDT), consent=true, name=asd, _id=asd, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'asd',
     name: 'asd',
     participants: [ [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=asd&room=no',
     consent: true,
     consentDate: '2017-08-07T19:34:13.282Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQ1MywiZXhwIjoxNTg4NTM0NDUzLCJpc3MiOiJmZWF0aGVycyJ9.EqwE12UsCCnmTliDYfVDJOuEH8LR98b95fPlwELcBlE' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan', 'as', 'asd' ]
patching meeting { participants: [ 'jordan', 'as' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'jordan', 'as', 'asd' ]
info: not adding participant: { participants: [ 'jordan', 'as', 'asd' ],
  lastUpdated: 2017-08-07T19:34:13.351Z } no
updated meeting with participants { participants: [ 'jordan', 'as', 'asd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd' ],
  _id: 5988c0b53fdd10ba54f6fb52,
  timestamp: 2017-08-07T19:34:13.357Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd' ],
  _id: 5988c0b53fdd10ba54f6fb52,
  timestamp: 2017-08-07T19:34:13.357Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd' ],
  _id: 5988c0b53fdd10ba54f6fb52,
  timestamp: 2017-08-07T19:34:13.357Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:15.415Z 2017-08-07T19:34:15.415Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:15.476Z,
  from: 2017-08-07T19:29:15.415Z,
  to: 2017-08-07T19:34:15.415Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:15.476Z,
  from: 2017-08-07T19:29:15.415Z,
  to: 2017-08-07T19:34:15.415Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:15.476Z,
  from: 2017-08-07T19:29:15.415Z,
  to: 2017-08-07T19:34:15.415Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:20.421Z 2017-08-07T19:34:20.421Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:20.423Z,
  from: 2017-08-07T19:29:20.421Z,
  to: 2017-08-07T19:34:20.421Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:20.423Z,
  from: 2017-08-07T19:29:20.421Z,
  to: 2017-08-07T19:34:20.421Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:20.423Z,
  from: 2017-08-07T19:29:20.421Z,
  to: 2017-08-07T19:34:20.421Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:25.422Z 2017-08-07T19:34:25.422Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:25.454Z,
  from: 2017-08-07T19:29:25.422Z,
  to: 2017-08-07T19:34:25.422Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:25.454Z,
  from: 2017-08-07T19:29:25.422Z,
  to: 2017-08-07T19:34:25.422Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:25.454Z,
  from: 2017-08-07T19:29:25.422Z,
  to: 2017-08-07T19:34:25.422Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:30.428Z 2017-08-07T19:34:30.428Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:30.430Z,
  from: 2017-08-07T19:29:30.428Z,
  to: 2017-08-07T19:34:30.428Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:30.430Z,
  from: 2017-08-07T19:29:30.428Z,
  to: 2017-08-07T19:34:30.428Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:30.430Z,
  from: 2017-08-07T19:29:30.428Z,
  to: 2017-08-07T19:34:30.428Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=asfd, name=asfd, participants=[participant=as, participant=jordan, participant=asd, participant=asfd], meeting=no, meetingUrl=http://localhost:3001/?user=asfd&room=no, consent=true, consentDate=2017-08-07T19:34:32.949Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQ3MiwiZXhwIjoxNTg4NTM0NDcyLCJpc3MiOiJmZWF0aGVycyJ9.CHqRDhPDwXxbzfohW3DtiZ3uMnfcVfwUS2ZqzN_XMgI
info: creating a new participant... NotFound: No record found for id 'asfd'
    at NotFound.ExtendableBuiltin (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:21:28)
    at NotFound.FeathersError (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:99:87)
    at new NotFound (/Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-errors/lib/index.js:188:77)
    at /Users/jordan/medialab/dev/rhythm/rhythm-server/node_modules/feathers-mongoose/lib/service.js:167:17
    at process._tickCallback (internal/process/next_tick.js:109:7)
info: created a new participant strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, meetings=[no], createdAt=Mon Aug 07 2017 15:34:32 GMT-0400 (EDT), updatedAt=Mon Aug 07 2017 15:34:32 GMT-0400 (EDT), consentDate=Mon Aug 07 2017 15:34:32 GMT-0400 (EDT), consent=true, name=asfd, _id=asfd, __v=0, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'asfd',
     name: 'asfd',
     participants: [ [Object], [Object], [Object], [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=asfd&room=no',
     consent: true,
     consentDate: '2017-08-07T19:34:32.949Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNDQ3MiwiZXhwIjoxNTg4NTM0NDcyLCJpc3MiOiJmZWF0aGVycyJ9.CHqRDhPDwXxbzfohW3DtiZ3uMnfcVfwUS2ZqzN_XMgI' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'as', 'jordan', 'asd', 'asfd' ]
patching meeting { participants: [ 'jordan', 'as', 'asd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
adding participants to that meeting [ 'as', 'jordan', 'asd', 'asfd' ]
info: not adding participant: { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  lastUpdated: 2017-08-07T19:34:33.011Z } no
updated meeting with participants { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  _id: 5988c0c93fdd10ba54f6fb53,
  timestamp: 2017-08-07T19:34:33.233Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  _id: 5988c0c93fdd10ba54f6fb53,
  timestamp: 2017-08-07T19:34:33.233Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  _id: 5988c0c93fdd10ba54f6fb53,
  timestamp: 2017-08-07T19:34:33.233Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { participants: [ 'jordan', 'as', 'asd', 'asfd' ],
  _id: 5988c0c93fdd10ba54f6fb53,
  timestamp: 2017-08-07T19:34:33.233Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:35.433Z 2017-08-07T19:34:35.433Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:35.435Z,
  from: 2017-08-07T19:29:35.433Z,
  to: 2017-08-07T19:34:35.433Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:35.435Z,
  from: 2017-08-07T19:29:35.433Z,
  to: 2017-08-07T19:34:35.433Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:35.435Z,
  from: 2017-08-07T19:29:35.433Z,
  to: 2017-08-07T19:34:35.433Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:35.435Z,
  from: 2017-08-07T19:29:35.433Z,
  to: 2017-08-07T19:34:35.433Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:40.437Z 2017-08-07T19:34:40.437Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:40.440Z,
  from: 2017-08-07T19:29:40.437Z,
  to: 2017-08-07T19:34:40.437Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:40.440Z,
  from: 2017-08-07T19:29:40.437Z,
  to: 2017-08-07T19:34:40.437Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:40.440Z,
  from: 2017-08-07T19:29:40.437Z,
  to: 2017-08-07T19:34:40.437Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:45.440Z 2017-08-07T19:34:45.440Z
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:45.442Z,
  from: 2017-08-07T19:29:45.440Z,
  to: 2017-08-07T19:34:45.440Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T19:34:45.442Z,
  from: 2017-08-07T19:29:45.440Z,
  to: 2017-08-07T19:34:45.440Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:29:50.446Z 2017-08-07T19:34:50.446Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, as, asd, asfd], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 266681438 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, as, asd, asfd], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-07T19:34:51.353Z,
  endTime: 2017-08-07T19:34:51.356Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan, as, asd, asfd], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Mon Aug 07 2017 15:34:51 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
new connection!
info: registering socketio custom events.
info: meeting joined event: participant=jordan, name=jordan, participants=[participant=jordan], meeting=no, meetingUrl=http://localhost:3001/?user=jordan&room=no, consent=true, consentDate=2017-08-07T20:01:54.268Z, token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNjExNCwiZXhwIjoxNTg4NTM2MTE0LCJpc3MiOiJmZWF0aGVycyJ9.4mZVxfJSFBJBiO4Tg2qtKWtqghPZ0B_yea_nXiL_Bdc
info: getting or creating a meeting...
getOrCreateMeeting { data: 
   { participant: 'jordan',
     name: 'jordan',
     participants: [ [Object] ],
     meeting: 'no',
     meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
     consent: true,
     consentDate: '2017-08-07T20:01:54.268Z',
     token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5ODQ5OGI5M2ZkZDEwYmE1NGY2ZjRkZCIsImlhdCI6MTUwMjEzNjExNCwiZXhwIjoxNTg4NTM2MTE0LCJpc3MiOiJmZWF0aGVycyJ9.4mZVxfJSFBJBiO4Tg2qtKWtqghPZ0B_yea_nXiL_Bdc' },
  app: 
   { [Function: app]
     domain: undefined,
     _events: { mount: [Object] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'default',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/Users/jordan/medialab/dev/rhythm/rhythm-server/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        www: '/Users/jordan/medialab/dev/rhythm/rhythm-server/public/www',
        auth: [Object] },
     _eventsCount: 1,
     locals: { settings: [Object] },
     mountpath: '/',
     service: [Function: service],
     setup: [Function],
     configure: [Function: configure],
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function],
        [Function],
        [Function: socketMixin],
        [Function: filterMixin],
        [Function],
        push: [Function] ],
     services: 
      { 'auth/token': [Object],
        'auth/local': [Object],
        users: [Object],
        meetings: [Object],
        participants: [Object],
        utterances: [Object],
        meetingEvents: [Object],
        participantEvents: [Object],
        turns: [Object],
        utteranceDistributions: [Object],
        faces: [Object] },
     providers: [ [Function] ],
     _setup: false,
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Object] },
     rest: 
      { find: [Function: bound getHandler],
        get: [Function: bound getHandler],
        create: [Function: bound getHandler],
        update: [Function: bound getHandler],
        patch: [Function: bound getHandler],
        remove: [Function: bound getHandler] },
     logger: 
      { version: '2.2.0',
        transports: [Object],
        hash: [Function],
        clone: [Function],
        longestElement: [Function],
        exception: [Object],
        config: [Object],
        addColors: [Function],
        Container: [Function],
        Logger: [Object],
        Transport: [Object],
        loggers: [Object],
        levels: [Object],
        error: [Function],
        warn: [Function],
        info: [Function],
        verbose: [Function],
        debug: [Function],
        silly: [Function],
        log: [Function],
        query: [Function],
        stream: [Function],
        add: [Function],
        remove: [Function],
        clear: [Function],
        profile: [Function],
        startTimer: [Function],
        extend: [Function],
        cli: [Function],
        handleExceptions: [Function],
        unhandleExceptions: [Function],
        addRewriter: [Function],
        addFilter: [Function],
        setLevels: [Function] },
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     _socketInfo: 
      { method: 'emit',
        connection: [Function: connection],
        clients: [Function: clients],
        params: [Function: params] },
     _isSetup: true } }
participantIds [ 'jordan' ]
patching meeting { participants: [],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: 2017-08-07T19:34:51.356Z,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: false,
  _id: 'no' }
adding participants to that meeting [ 'jordan' ]
info: not adding participant: { participants: [ 'jordan' ],
  lastUpdated: 2017-08-07T20:01:54.291Z,
  active: true,
  endTime: null } no
info: starting computing turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:56:54.301Z 2017-08-07T20:01:54.301Z
updated meeting with participants { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' }
info: auth filter, data: { participants: [ 'jordan' ],
  startTime: 2017-08-04T16:01:11.891Z,
  endTime: null,
  __v: 0,
  meetingUrl: 'http://localhost:3001/?user=jordan&room=no',
  active: true,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: created participantEvent!
info: auth filter, data: { participants: [ 'jordan' ],
  _id: 5988c7323fdd10ba54f6fb57,
  timestamp: 2017-08-07T20:01:54.301Z,
  meeting: 'no',
  __v: 0 } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: updated turns for meeting: no
info: auth filter, data: { turns: [],
  meeting: 'no',
  transitions: 0,
  timestamp: 2017-08-07T20:01:54.307Z,
  from: 2017-08-07T19:56:54.301Z,
  to: 2017-08-07T20:01:54.301Z,
  _id: 'no' } _bsontype=ObjectID, id=Y¹?ÝºTöôÝ, email=jjreedie@gmail.com, __v=0, updatedAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT), createdAt=Fri Aug 04 2017 11:54:33 GMT-0400 (EDT)
info: getting turn data for hangout no 2017-08-07T19:56:59.301Z 2017-08-07T20:01:59.301Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:57:04.307Z 2017-08-07T20:02:04.307Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:57:09.309Z 2017-08-07T20:02:09.309Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:57:14.313Z 2017-08-07T20:02:14.313Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:57:19.315Z 2017-08-07T20:02:19.315Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:57:24.317Z 2017-08-07T20:02:24.317Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:57:29.318Z 2017-08-07T20:02:29.318Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:57:34.321Z 2017-08-07T20:02:34.321Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:57:39.324Z 2017-08-07T20:02:39.324Z
info: updated turns for meeting: no
info: getting turn data for hangout no 2017-08-07T19:57:44.325Z 2017-08-07T20:02:44.325Z
info: updated turns for meeting: no
info: [end-meeting-job] checking all meetings...
info: isMeetingEnded strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: should end?: 268356211 300000
info: should end?: true
info: meetingShouldEnd strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: Getting report data...
info: not adding participant: { participants: [],
  active: false,
  lastUpdated: 2017-08-07T20:02:46.126Z,
  endTime: 2017-08-07T20:02:46.129Z } strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[jordan], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=null, __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=true, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info: stopping computing turns for meeting: no
info: patched meeting: strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, participants=init, startTime=init, endTime=init, __v=init, meetingUrl=init, active=init, _id=init, , , endTime=true, __v=true, participants=true, startTime=true, meetingUrl=true, active=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, , _eventsCount=0, _maxListeners=0, isNew=false, errors=undefined, participants=[], startTime=Fri Aug 04 2017 12:01:11 GMT-0400 (EDT), endTime=Mon Aug 07 2017 16:02:46 GMT-0400 (EDT), __v=0, meetingUrl=http://localhost:3001/?user=jordan&room=no, active=false, _id=no, $__original_save=function () {
      var self = this
        , hookArgs // arguments eventually passed to the hook - are mutable
        , lastArg = arguments[arguments.length-1]
        , pres = this._pres[name]
        , posts = this._posts[name]
        , _total = pres.length
        , _current = -1
        , _asyncsLeft = proto[name].numAsyncPres
        , _asyncsDone = function(err) {
            if (err) {
              return handleError(err);
            }
            --_asyncsLeft || _done.apply(self, hookArgs);
          }
        , handleError = function(err) {
            if ('function' == typeof lastArg)
              return lastArg(err);
            if (errorCb) return errorCb.call(self, err);
            throw err;
          }
        , _next = function () {
            if (arguments[0] instanceof Error) {
              return handleError(arguments[0]);
            }
            var _args = Array.prototype.slice.call(arguments)
              , currPre
              , preArgs;
            if (_args.length && !(arguments[0] == null && typeof lastArg === 'function'))
              hookArgs = _args;
            if (++_current < _total) {
              currPre = pres[_current]
              if (currPre.isAsync && currPre.length < 2)
                throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");
              if (currPre.length < 1)
                throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");
              preArgs = (currPre.isAsync
                          ? [once(_next), once(_asyncsDone)]
                          : [once(_next)]).concat(hookArgs);
              return currPre.apply(self, preArgs);
            } else if (!_asyncsLeft) {
              return _done.apply(self, hookArgs);
            }
          }
        , _done = function () {
            var args_ = Array.prototype.slice.call(arguments)
              , ret, total_, current_, next_, done_, postArgs;

            if (_current === _total) {
              
              next_ = function () {
                if (arguments[0] instanceof Error) {
                  return handleError(arguments[0]);
                }
                var args_ = Array.prototype.slice.call(arguments, 1)
                  , currPost
                  , postArgs;
                if (args_.length) hookArgs = args_;
                if (++current_ < total_) {
                  currPost = posts[current_]
                  if (currPost.length < 1)
                    throw new Error("Your post must have a next argument -- e.g., function (next, ...)");
                  postArgs = [once(next_)].concat(hookArgs);
                  return currPost.apply(self, postArgs);
                } else if (typeof lastArg === 'function'){
                  // All post handlers are done, call original callback function
                  return lastArg.apply(self, arguments);
                }
              };

              // We are assuming that if the last argument provided to the wrapped function is a function, it was expecting
              // a callback.  We trap that callback and wait to call it until all post handlers have finished.
              if(typeof lastArg === 'function'){
                args_[args_.length - 1] = once(next_);
              }

              total_ = posts.length;
              current_ = -1;
              ret = fn.apply(self, args_); // Execute wrapped function, post handlers come afterward

              if (total_ && typeof lastArg !== 'function') return next_();  // no callback provided, execute next_() manually
              return ret;
            }
          };

      return _next.apply(this, arguments);
    }, save=function wrappedPointCut() {
      var args = [].slice.call(arguments);
      var lastArg = args.pop();
      var fn;

      return new Promise.ES6(function(resolve, reject) {
        if (lastArg && typeof lastArg !== 'function') {
          args.push(lastArg);
        } else {
          fn = lastArg;
        }
        args.push(function(error, result) {
          if (error) {
            _this.$__handleReject(error);
            fn && fn(error);
            reject(error);
            return;
          }

          fn && fn.apply(null, [null].concat(Array.prototype.slice.call(arguments, 1)));
          resolve(result);
        });

        _this[newName].apply(_this, args);
      });
    }, $__original_save=[function (next, options) {
      // Nested docs have their own presave
      if (this.ownerDocument) {
        return next();
      }

      var hasValidateBeforeSaveOption = options &&
          (typeof options === 'object') &&
          ('validateBeforeSave' in options);

      var shouldValidate;
      if (hasValidateBeforeSaveOption) {
        shouldValidate = !!options.validateBeforeSave;
      } else {
        shouldValidate = this.schema.options.validateBeforeSave;
      }

      // Validate
      if (shouldValidate) {
        // HACK: use $__original_validate to avoid promises so bluebird doesn't
        // complain
        if (this.$__original_validate) {
          this.$__original_validate({__noPromise: true}, function(error) {
            next(error);
          });
        } else {
          this.validate({__noPromise: true}, function(error) {
            next(error);
          });
        }
      } else {
        next();
      }
    }, function (next, done) {
      var subdocs = this.$__getAllSubdocs();

      if (!subdocs.length || this.$__preSavingFromParent) {
        done();
        next();
        return;
      }

      async.each(subdocs, function(subdoc, cb) {
        subdoc.$__preSavingFromParent = true;
        subdoc.save(function(err) {
          cb(err);
        });
      }, function(error) {
        for (var i = 0; i < subdocs.length; ++i) {
          delete subdocs[i].$__preSavingFromParent;
        }
        if (error) {
          done(error);
          return;
        }
        next();
        done();
      });
    }], $__original_save=[]
info (maybe) ended meetings: [ true ]
info: created participantEvent!
info: Creating report visualization...
info: Sending report...
[sendReport] error: Error: getaddrinfo ENOTFOUND email_host email_host:465
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
info: [end-meeting-job] checking all meetings...
info (maybe) ended meetings: []
